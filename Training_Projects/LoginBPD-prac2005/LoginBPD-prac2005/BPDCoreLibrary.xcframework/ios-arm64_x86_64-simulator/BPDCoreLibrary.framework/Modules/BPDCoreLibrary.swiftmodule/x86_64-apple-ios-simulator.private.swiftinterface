// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BPDCoreLibrary
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppTrackingTransparency
@_exported import BPDCoreLibrary
import Combine
import CommonCrypto
import Contacts
import CryptoKit
import DeviceCheck
import Dynatrace
import Foundation
import LocalAuthentication
import OSLog
import RSAMobileCollectionSDK
import Security
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct TransactionsHistoricalFDR : Swift.Codable, Swift.Hashable {
  public let id: Swift.String?
  public let postDate: Swift.String?
  public let reference: Swift.String?
  public let description: Swift.String?
  public let amount: Swift.String?
  public let fee: Swift.String?
  public let amountOfFees: Swift.String?
  public let deadlines: Swift.String?
  public let isFee: Swift.String?
  public let inTransit: Swift.String?
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.TransactionsHistoricalFDR, b: BPDCoreLibrary.TransactionsHistoricalFDR) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardFDRHistoricalResponse : Swift.Codable {
  public let number: Swift.String?
  public let balance: Swift.String?
  public let creditLimit: Swift.String?
  public let creditAvailable: Swift.String?
  public let cutOffDate: Swift.String?
  public let dueDateCc: Swift.String?
  public let dueFees: Swift.String?
  public let minPayment: Swift.String?
  public let monthlyPayment: Swift.String?
  public let cutOffBalance: Swift.String?
  public let paymentDate: Swift.String?
  public let dueAmount: Swift.String?
  public let previousBalance: Swift.String?
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenMaintenanceInput {
  public let tokenSerno: Swift.String
  public let newStatus: BPDCoreLibrary.TokenMaintenanceReasonCode
  public init(tokenSerno: Swift.String, newStatus: BPDCoreLibrary.TokenMaintenanceReasonCode)
}
public enum TokenMaintenanceReasonCode : Swift.String, Swift.Codable, Swift.CaseIterable {
  case active
  case suspended
  case deactivated
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.TokenMaintenanceReasonCode]
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.TokenMaintenanceReasonCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct IncreaseLimitRequestModel : Swift.Codable {
  public let cardNumber: Swift.String
  public let limiteSolicitadoUSD: Swift.String
  public let limiteSolicitadoRD: Swift.String
  public init(cardNumber: Swift.String, limiteSolicitadoUSD: Swift.Double, limiteSolicitadoRD: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenInquiryInput {
  public let cardNumber: Swift.String
  public let tokenListOptions: BPDCoreLibrary.TokenLisOptions
  public init(cardNumber: Swift.String, tokenListOptions: BPDCoreLibrary.TokenLisOptions)
}
public protocol ClaimsUseCaseDelegate : AnyObject {
  func createClaimResponse(result: Swift.Result<BPDCoreLibrary.CreateClaimResponseModel, BPDCoreLibrary.BPDError>)
  func consultClaimResponse(result: Swift.Result<BPDCoreLibrary.ConsultClaimResponseModel, BPDCoreLibrary.BPDError>)
  func getAvailableClaimsResponse(result: Swift.Result<BPDCoreLibrary.AvailableClaims, BPDCoreLibrary.BPDError>)
  func createComplaintResponse(result: Swift.Result<BPDCoreLibrary.CreateComplaintResponseModel, BPDCoreLibrary.BPDError>)
}
@_hasMissingDesignatedInitializers public class ClaimsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ClaimsUseCaseDelegate)?
  public init()
  public func createClaim(requestModel: BPDCoreLibrary.CreateClaimRequestModel)
  public func consultClaim(requestModel: BPDCoreLibrary.ConsultClaimRequestModel)
  public func getAvailableClaims(requestModel: BPDCoreLibrary.AvailableClaimsRequestModel)
  public func createComplaint(requestModel: BPDCoreLibrary.CreateComplaintRequestModel)
  @objc deinit
}
public struct BPDAssignmentPinDebitRequestModel {
  public let pin: Swift.String
  public let number: Swift.String
  public let expirationDate: Swift.String
  public init(pin: Swift.String, number: Swift.String, expirationDate: Swift.String)
}
public struct ThalesRegisterCCResponse : Swift.Codable {
  public let status: Swift.String
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let response: BPDCoreLibrary.ThalesStateRegisterCC
  public init(status: Swift.String, errorCode: Swift.String, errorDescription: Swift.String, response: BPDCoreLibrary.ThalesStateRegisterCC)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThalesStateRegisterCC : Swift.Codable, Swift.Hashable {
  public let state: Swift.String
  public let carId: Swift.String
  public init(state: Swift.String, carId: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.ThalesStateRegisterCC, b: BPDCoreLibrary.ThalesStateRegisterCC) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittancePrepareRequestModel : Swift.Codable {
  public var remittanceNumber: Swift.String?
  public var accountType: Swift.String?
  public var accountNumber: Swift.String?
  public var entity: Swift.String?
  public var cambioDivisa: Swift.Bool?
  public init()
  public init(remittanceNumber: Swift.String, accountType: Swift.String, accountNumber: Swift.String, entity: Swift.String, cambioDivisa: Swift.Bool? = false)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ProductUseCaseDelegate : AnyObject {
  func getProductsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.Product]>)
}
public protocol ProductDetailsUseCaseDelegate : AnyObject {
  func getProductDetailsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ProductDetails>)
  func getProductOwnerResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDAccountDetailsOwner>)
}
public protocol ProductTransactionUseCaseDelegate : AnyObject {
  func getTransactionsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDTransactionHistoricalResponseModel]>)
  func getTransactionDetailsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDTransactionHistoricalResponseModel>)
}
@_hasMissingDesignatedInitializers public class ProductUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ProductUseCaseDelegate)?
  weak public var eventDetailsDelegate: (any BPDCoreLibrary.ProductDetailsUseCaseDelegate)?
  weak public var eventTransactionDelegate: (any BPDCoreLibrary.ProductTransactionUseCaseDelegate)?
  public init()
  public func getProducts()
  public func getProductsWithImage(consultStrategy: BPDCoreLibrary.DataAccessStrategy = .localFirst)
  public func getProductDetails(model: BPDCoreLibrary.ProductDetailsRequestModel)
  public func getProductHistoricalTransactions(model: BPDCoreLibrary.TransactionHistoricalRequestModel)
  public func getProductHistoricalTransactionDetails(model: BPDCoreLibrary.TransactionHistoricalResponseModelList)
  public func getProductOwner(accountNumber: Swift.String)
  @objc deinit
}
extension BPDCoreLibrary.ProductUseCase {
  public func getProductDetailsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ProductDetails>)
}
public struct Cedulado {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let names: Swift.String
  public let firstLastName: Swift.String
  public let secondLastName: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", names: Swift.String = "", firstLastName: Swift.String = "", secondLastName: Swift.String = "")
}
@_hasMissingDesignatedInitializers public class BeneficiaryPayment {
  final public let id: Swift.String?
  final public let subscriptionCode: Swift.String
  final public let itemCode: Swift.String
  final public let itemDescription: Swift.String
  final public let categoryCode: Swift.String
  final public let categoryDescription: Swift.String
  final public let companyCode: Swift.String
  final public let companyDescription: Swift.String
  final public let contractNumber: Swift.String
  final public let email: Swift.String
  final public let alias: Swift.String
  final public let date: Swift.String
  final public let lastPaymentDate: Swift.String
  final public let lastBalancePayment: Swift.String
  final public let acceptCardPayment: Swift.String
  final public let exactPayment: Swift.String
  final public let acceptExpressPayment: Swift.String
  final public let migrated: Swift.String
  public init(subscriptionCode: Swift.String? = "", itemCode: Swift.String? = "", itemDescription: Swift.String? = "", categoryCode: Swift.String? = "", categoryDescription: Swift.String? = "", companyCode: Swift.String? = "", companyDescription: Swift.String? = "", contractNumber: Swift.String? = "", email: Swift.String? = "", alias: Swift.String? = "", date: Swift.String? = "", lastPaymentDate: Swift.String? = "", lastBalancePayment: Swift.String? = "", acceptCardPayment: Swift.String? = "", exactPayment: Swift.String? = "", acceptExpressPayment: Swift.String? = "", migrated: Swift.String? = "")
  @objc deinit
}
public struct CreditCardDynamicFormOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let requestId: Swift.String
  public let message: Swift.String
  public let status: Swift.String
  public let url: Swift.String
  public let messageId: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", requestId: Swift.String = "", message: Swift.String = "", status: Swift.String = "", url: Swift.String = "", messageId: Swift.String = "")
}
public struct CreditCardTransactionHistoricalFDR {
  public let transactions: [BPDCoreLibrary.TransactionsHistoricalFDR?]
  public let details: BPDCoreLibrary.CreditCardFDRHistoricalResponse
  public init(transactions: [BPDCoreLibrary.TransactionsHistoricalFDR?] = [TransactionsHistoricalFDR()], details: BPDCoreLibrary.CreditCardFDRHistoricalResponse = CreditCardFDRHistoricalResponse())
}
public struct RemittanceGetRequestModel {
  public var remittanceNumber: Swift.String?
  public var entity: Swift.String?
  public init()
  public init(remittanceNumber: Swift.String, entity: Swift.String)
}
public struct SaveQuestionRequestModel : Swift.Codable {
  public let questions: BPDCoreLibrary.Questions
  public let answers: [BPDCoreLibrary.SaveQuestionRequestModelAnswer]
  public let otpToken: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SaveQuestionRequestModelAnswer : Swift.Codable {
  public var answers: [BPDCoreLibrary.Answer]
  public var category: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Answer : Swift.Codable {
  public var idQuestion: Swift.Int
  public var response: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Questions : Swift.Codable {
  public var pep: [BPDCoreLibrary.QuestionDetail]
  public var ofac: [BPDCoreLibrary.QuestionDetail]
  public var domicilio: [BPDCoreLibrary.QuestionDetail]
  public var empleo: [BPDCoreLibrary.QuestionDetail]
  public var membresia: [BPDCoreLibrary.QuestionDetail]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pep
    case ofac
    case domicilio
    case empleo
    case membresia
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QuestionDetail : Swift.Codable {
  public let id: Swift.Int
  public let label: Swift.String
  public let responseType: Swift.String
  public let responseList: Swift.String
  public let questionSource: Swift.Int?
  public let questionSourceResponse: Swift.Int?
  public let surveyType: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol GoalUseCaseDelegate : AnyObject {
  func getGoalResponse(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDGoalsModel]>)
  func postOrDeleteGoalResponse(_ response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class GoalUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.GoalUseCaseDelegate)?
  public init()
  public func getGoals()
  public func postGoal(model: BPDCoreLibrary.SaveGoalRequestModel)
  public func deleteGoal(model: BPDCoreLibrary.DeleteGoalsRequestModel)
  @objc deinit
}
public struct BPDContractData {
  public let operationType: Swift.String
  public let category: Swift.String
  public let individualContracts: [BPDCoreLibrary.BPDIndividualContractDetail]
  public init()
  public init(operationType: Swift.String, category: Swift.String, individualContracts: [BPDCoreLibrary.BPDIndividualContractDetail])
}
public struct BPDCashCodeResponseModel {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let message: BPDCoreLibrary.MessageList?
}
public struct MessageList {
  public var transactionId: Swift.String?
  public var OTP: Swift.String?
  public var telefono: Swift.String?
  public var monto: Swift.Double?
  public var moneda: Swift.String?
  public var montoCambioDivisa: Swift.Double?
  public var montoRetiro: Swift.Double?
  public var monedaDestino: Swift.String?
  public var comision: Swift.Double?
  public var expiracion: Swift.String?
}
public protocol BeneficiariesDebtsUseCaseDelegate : AnyObject {
  func beneficiariesCategoriesResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiariesCategories]>)
  func beneficiariesDebtsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiariesDebts]>)
}
@_hasMissingDesignatedInitializers public class BeneficiariesDebtsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BeneficiariesDebtsUseCaseDelegate)?
  public init()
  public func getBeneficiariesCategories()
  public func getBeneficiariesDebts(model: BPDCoreLibrary.BeneficiariesDebtsRequestModel)
  @objc deinit
}
public struct GetDebitCardDetailsRequestModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDGetDebitCardDetailsInput {
  public let accountNumber: Swift.String
  public init(accountNumber: Swift.String)
}
public enum CreditCardStatus : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.CreditCardStatus {
    get
  }
  case normalStatus
  case suspiciousBlock
  case fraud
  case lost
  case stolen
  case temporalBlock
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.CreditCardStatus]
  public typealias ID = BPDCoreLibrary.CreditCardStatus
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.CreditCardStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CreditCardStatusInput {
  public let cardNumber: Swift.String
  public let creditCardStatus: BPDCoreLibrary.CreditCardStatus
  public init(cardNumber: Swift.String, creditCardStatus: BPDCoreLibrary.CreditCardStatus)
}
extension BPDCoreLibrary.MetadataTerritory {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case codeID
    case countryCode
    case internationalPrefix
    case mainCountryForCode
    case nationalPrefix
    case nationalPrefixFormattingRule
    case nationalPrefixForParsing
    case nationalPrefixTransformRule
    case preferredExtnPrefix
    case emergency
    case fixedLine
    case generalDesc
    case mobile
    case pager
    case personalNumber
    case premiumRate
    case sharedCost
    case tollFree
    case voicemail
    case voip
    case uan
    case numberFormats
    case leadingDigits
    case availableFormats
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension BPDCoreLibrary.MetadataPhoneNumberFormat {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pattern
    case format
    case intlFormat
    case leadingDigitsPatterns
    case nationalPrefixFormattingRule
    case nationalPrefixOptionalWhenFormatting
    case domesticCarrierCodeFormattingRule
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OtherBanksPaymentRequestModel {
  public let transactionType: BPDCoreLibrary.OtherBanksTypeTransaction
  public let amount: Swift.Double
  public let description: Swift.String
  public let accountFrom: BPDCoreLibrary.Product
  public let externalBankId: Swift.String
  public let beneficiaryDocumentType: BPDCoreLibrary.DocumentType
  public let beneficiaryDocumentNumber: Swift.String
  public let beneficiaryAccount: Swift.String
  public let beneficiaryAccountType: Swift.String
  public let beneficiaryAccountCurrency: BPDCoreLibrary.Currency
  public let beneficiaryAlias: Swift.String
  public let beneficiaryName: Swift.String
  public init(transactionType: BPDCoreLibrary.OtherBanksTypeTransaction, amount: Swift.Double, description: Swift.String, accountFrom: BPDCoreLibrary.Product, externalBankId: Swift.String, beneficiaryDocumentType: BPDCoreLibrary.DocumentType, beneficiaryDocumentNumber: Swift.String, beneficiaryAccount: Swift.String, beneficiaryAccountType: Swift.String, beneficiaryAccountCurrency: BPDCoreLibrary.Currency, beneficiaryAlias: Swift.String, beneficiaryName: Swift.String)
}
public struct OtherBanksBaneficiaryPaymentRequestModel {
  public let transactionType: BPDCoreLibrary.OtherBanksTypeTransaction
  public let amount: Swift.Double
  public let description: Swift.String
  public let accountFrom: BPDCoreLibrary.Product
  public let beneficiary: BPDCoreLibrary.BeneficiaryOB
  public init(transactionType: BPDCoreLibrary.OtherBanksTypeTransaction, amount: Swift.Double, description: Swift.String, accountFrom: BPDCoreLibrary.Product, beneficiary: BPDCoreLibrary.BeneficiaryOB)
}
public struct SurveyInfo {
  public let _id: Swift.String
  public let description: Swift.String
  public var questions: [BPDCoreLibrary.DetailQuestion]
  public init(_id: Swift.String, description: Swift.String, questions: [BPDCoreLibrary.DetailQuestion])
  public init()
}
public struct BPDObSaveQuestionsRequestModel {
  public let source: BPDCoreLibrary.SaveQuestionRequestModel
  public init(source: BPDCoreLibrary.SaveQuestionRequestModel)
}
public struct InstallmentActionsResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentAmortizations : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IssuerInstallmentAmortizationData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstallmentActionsResult : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebitCardInfoInput {
  public let accountNumber: Swift.String
  public init(accountNumber: Swift.String)
}
public struct OnboardingContract : Swift.Decodable {
  public let name: Swift.String
  public let body: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDCashCodeFavResponseModel {
  public let id: Swift.String
  public let document: Swift.String
  public let alias: Swift.String
  public init(id: Swift.String, document: Swift.String, alias: Swift.String)
}
public struct BPDCreditCardActivationRequestModel {
  public let number: Swift.String?
  public let cvv: Swift.String?
  public let expiryDate: Swift.String?
  public init(number: Swift.String?, cvv: Swift.String?, expiryDate: Swift.String?)
}
public protocol PinCreditUseCaseDelegate : AnyObject {
  func assignmentPinCreditResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.PinCreditObject>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class PinCreditUseCase {
  weak public var pinCreditDelegate: (any BPDCoreLibrary.PinCreditUseCaseDelegate)?
  public init()
  public func assignmentPinCredit(model: BPDCoreLibrary.PinCreditInput)
  public func callTokenNotifyPinCredit(token: Swift.String)
  public func callBiometricNotifyPinCredit(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
public struct RemittanceRetryInput {
  public let entity: Swift.String
  public let remittanceNumber: Swift.String
  public init(entity: Swift.String, remittanceNumber: Swift.String)
}
public struct RemittanceTransactionDataInput {
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let amount: Swift.Double
  public let currency: Swift.String
  public init(accountNumber: Swift.String, accountType: Swift.String, amount: Swift.Double, currency: Swift.String)
}
public struct BPDNewTransactionRequestModel {
  public init(transactionType: BPDCoreLibrary.AnalyzeTypeTransaction = .none, accountFrom: Swift.String = "", typeAccountFrom: Swift.String = "", currencyAccountFrom: Swift.String = "", accountTo: Swift.String = "", typeAccountTo: Swift.String = "", currencyAccountTo: Swift.String = "", amountFrom: Swift.Double = 0.0, amountTo: Swift.Double = 0.0, interTradeNumber: Swift.String = "", contractNumber: Swift.String = "", beneficiaryName: Swift.String = "", desc: Swift.String = "", correlID: Swift.String = "", entity: Swift.String = "", cambioDivisa: Swift.Bool = false, statementInquiry: Swift.String = "", remittanceNumber: Swift.String = "", otherInfo: BPDCoreLibrary.BPDRemittancePaymentOtherInfoRequestModel = BPDRemittancePaymentOtherInfoRequestModel())
}
@_hasMissingDesignatedInitializers public class UnleashManager {
  public static var shared: BPDCoreLibrary.UnleashManager
  public func getFeatureVariant(for name: Swift.String, _ callback: @escaping (BPDCoreLibrary.Variant?) -> Swift.Void)
  public func getFeatureVariant(for name: Swift.String) -> BPDCoreLibrary.Variant?
  public func isFeatureEnabled(featureName name: Swift.String, _ callback: @escaping (Swift.Bool) -> Swift.Void)
  public func isFeatureEnabled(featureName name: Swift.String) -> Swift.Bool
  @objc deinit
}
public struct CreditCardDynamicFormInput {
  public let statusId: Swift.String, statusDescription: Swift.String, configFormId: Swift.String, categoryTypeId: Swift.String
  public let creditScoringId: Swift.String
  public let officeDelivery: Swift.String, sector: Swift.String, municipality: Swift.String, creditCardBrand: Swift.String, decisionEA: Swift.String
  public let companyName: Swift.String, productNumber: Swift.String, referredBy: Swift.String, issueAdditionalCreditCard: Swift.String
  public let diferredLimit: Swift.String, street: Swift.String, trueBlueCode: Swift.String, approvedLimit: Swift.String, `extension`: Swift.String
  public let bloq: Swift.String, currency: Swift.String, email: Swift.String, phoneNFS: Swift.String, floorDepartment: Swift.String, buildingName: Swift.String, reference: Swift.String
  public let adressType: Swift.String, authorizedBy: Swift.String, scheduleDelivery: Swift.String, docNumber: Swift.String, opportunityId: Swift.String
  public let number: Swift.String, additionalName: Swift.String, province: Swift.String, mans: Swift.String, apartment: Swift.String, firstName: Swift.String, building: Swift.String
  public let district: Swift.String, productCode: Swift.String, deliveryDate: Swift.String, creditCardName: Swift.String, lastName: Swift.String, additionalDocumentNumber: Swift.String, phoneNumber: Swift.String
  public init(statusId: Swift.String, statusDescription: Swift.String, configFormId: Swift.String, categoryTypeId: Swift.String, creditScoringId: Swift.String, officeDelivery: Swift.String, sector: Swift.String, municipality: Swift.String, creditCardBrand: Swift.String, decisionEA: Swift.String, companyName: Swift.String, productNumber: Swift.String, referredBy: Swift.String, issueAdditionalCreditCard: Swift.String, diferredLimit: Swift.String, street: Swift.String, trueBlueCode: Swift.String, approvedLimit: Swift.String, bloq: Swift.String, currency: Swift.String, email: Swift.String, phoneNFS: Swift.String, floorDepartment: Swift.String, buildingName: Swift.String, reference: Swift.String, adressType: Swift.String, authorizedBy: Swift.String, scheduleDelivery: Swift.String, docNumber: Swift.String, opportunityId: Swift.String, number: Swift.String, additionalName: Swift.String, province: Swift.String, mans: Swift.String, apartment: Swift.String, firstName: Swift.String, building: Swift.String, district: Swift.String, productCode: Swift.String, deliveryDate: Swift.String, creditCardName: Swift.String, lastName: Swift.String, additionalDocumentNumber: Swift.String, phoneNumber: Swift.String, extension: Swift.String)
}
public struct BPDOperationAcceptResponseModel {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let body: BPDCoreLibrary.BPDOperationAcceptBody?
}
public struct BPDOperationAcceptBody {
  public let name: Swift.String?
  public let body: Swift.String?
  public let devicePrint: Swift.String?
  public let ip: Swift.String?
  public let deviceId: Swift.String?
  public let documentType: Swift.String?
  public let documentNumber: Swift.String?
  public let creationDate: Swift.String?
  public let acceptedDate: Swift.String?
}
public protocol TokenOTPUseCaseDelegate : AnyObject {
  func tokenOTPResponse(result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDOtpTransaction>)
}
@_hasMissingDesignatedInitializers public class TokenOTPUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.TokenOTPUseCaseDelegate)?
  public func validateToken(model: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestModel)
  @objc deinit
}
public struct BPDResetPasswordRequestModel {
  public let newPassword: Swift.String
  public let documentNumber: Swift.String
  public let minutias: BPDCoreLibrary.Minutias
  public let userAgreed: Swift.Bool
  public init(newPassword: Swift.String, documentNumber: Swift.String, minutias: BPDCoreLibrary.Minutias, userAgreed: Swift.Bool)
}
public struct SectorFilterInput {
  public let filterName: Swift.String
  public init(filterName: Swift.String)
}
public struct BPDCreditCardImageResponseModel {
  public let bines: [BPDCoreLibrary.BPDCreditCardImageResponseList]
  public init(bines: [BPDCoreLibrary.BPDCreditCardImageResponseList])
}
public struct BPDCreditCardImageResponseList : Swift.Decodable {
  public let bin: Swift.String?
  public let urlSm: Swift.String?
  public let urlLg: Swift.String?
  public let productName: Swift.String?
  public init(bin: Swift.String?, urlSm: Swift.String?, urlLg: Swift.String?, productName: Swift.String?)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public protocol OnboardingAuthorizeUseCaseDelegate : AnyObject {
  func authorizeResponse(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnboardingValidateUserResponseModel>)
  func getValidateUserDataLocalResponse(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnboardingValidateUserResponseModel>)
  func generateEmailTokenResponse(_ response: BPDCoreLibrary.BPDResult)
  func validateOTPTokenV2Response(_ response: BPDCoreLibrary.BPDResult)
  func generateTokenResponseV2(_ response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class OnboardingAuthorizeUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.OnboardingAuthorizeUseCaseDelegate)?
  public init()
  public func authorize(documentNo: Swift.String, indexFinger: Swift.String, middleFinger: Swift.String, ringFinger: Swift.String, littleFinger: Swift.String)
  public func authorizeV2(model: BPDCoreLibrary.LoginDataUserOnBoarding)
  public func getValidateUserResponse()
  public func generateEmailToken(model: BPDCoreLibrary.GenerateEmailTokenRequestModel)
  public func validateOTPTokenV2(otpToken: Swift.String)
  public func generateTokenV2(model: BPDCoreLibrary.OnboardingGenerateTokenV2RequestModel)
  @objc deinit
}
public protocol SharesCertificatesUseCaseDelegate : AnyObject {
  func getCertificatesResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.SharesCertificates]>)
  func certificateResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreateCertificate>)
}
@_hasMissingDesignatedInitializers public class SharesCertificatesUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SharesCertificatesUseCaseDelegate)?
  public init()
  public func getCertificates(model: BPDCoreLibrary.SharesCertificatesRequestModel)
  public func createCertificate(model: BPDCoreLibrary.CreateCertificateRequestModel)
  public func associateCertificate(model: BPDCoreLibrary.AssociateCertificateRequestModel)
  @objc deinit
}
public protocol BPDPayCreditCardUserCaseDelegate : AnyObject {
  func payCreditCardError(message: Swift.String)
  func payCreditCardReceiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func payCreditCardProcessed(result: BPDCoreLibrary.BPDPaymentResponseModel)
  func payCreditCardReceiveTokenSignal(id: Swift.String)
  func payCreditCardInvalidUserState()
  func payCreditCardReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class BPDPayCreditCardUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDPayCreditCardUserCaseDelegate)?
  public init()
  public func creditCardPayment()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func proceedWithPayment()
  @objc deinit
}
public struct RemittanceClaimInput {
  public let claimRemittance: Swift.Bool
  public let remittanceNumber: Swift.String
  public let entity: Swift.String
  public init(claimRemittance: Swift.Bool = false, remittanceNumber: Swift.String = "", remittanceEntity: Swift.String = "")
}
public protocol CancelAccountDynamicFormUseCaseDelegate : AnyObject {
  func cancelAccountDynamicFormResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CancelAccountDynamicFormOutput>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class CancelAccountDynamicFormUseCase {
  weak public var cancelAccountDelegate: (any BPDCoreLibrary.CancelAccountDynamicFormUseCaseDelegate)?
  public init()
  public func cancelAccountDynamicForm(model: BPDCoreLibrary.CancelAccountDynamicFormInput)
  public func callTokenNotifyCancelAccount(token: Swift.String)
  public func callBiometricNotifyCancelAccount(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
extension BPDCoreLibrary.CancelAccountDynamicFormUseCase {
  public func cancelAccountDynamicFormResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CancelAccountDynamicFormOutput>)
  public func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
public protocol AssignmentPinDebitDelegate : AnyObject {
  func assignmentPinDebitResponse(_ result: BPDCoreLibrary.BPDResult)
  func recieveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class AssignmentPinDebitUseCase {
  weak public var assignmentPinDebitDelegate: (any BPDCoreLibrary.AssignmentPinDebitDelegate)?
  public init()
  public func assignmentPinDebit(model: BPDCoreLibrary.BPDAssignmentPinDebitRequestModel)
  public func callTokenNotifyAssignmentPinDebit(token: Swift.String)
  public func callBiometricNotifyAssignmentPinDebit(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
public struct Provinces : Swift.Hashable {
  public let code: Swift.String
  public let name: Swift.String
  public init(code: Swift.String, name: Swift.String)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.Provinces, b: BPDCoreLibrary.Provinces) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDAccountDetailsOwner {
  public let ownerName: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public var accountNumber: Swift.String
  public init(ownerName: Swift.String, accountType: Swift.String, currency: Swift.String, accountNumber: Swift.String)
  public init()
}
public struct CCInfo {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let cvv: Swift.String
  public let expDate: Swift.String
  public let cardNumber: Swift.String
  public let name: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", cvv: Swift.String = "", expiryDate: Swift.String = "", cardNumber: Swift.String = "", name: Swift.String = "")
}
public struct ConvertTransactionRequestModel : Swift.Codable {
  public let transactionSerno: Swift.String
  public let instalmentPlanSerno: Swift.String
  public let numberOfInstalments: Swift.String
  public let transactionId: Swift.String
  public init(transactionSerno: Swift.String, instalmentPlanSerno: Swift.String, numberOfInstalments: Swift.String, transactionId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum OtherBanksPaymentEvents {
  case duplicateTransaction
  case tokenChallenge
  case biometricChallenge
  case otherBanksPaymentSuccess(BPDCoreLibrary.OtherBanksPaymentPostingResponse)
  case otherBanksPaymentValidationSuccess(BPDCoreLibrary.OtherBanksPaymentValidationResponse)
  case error(BPDCoreLibrary.BPDError)
}
public enum TypeAccountTo : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.TypeAccountTo {
    get
  }
  case checking
  case savings
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.TypeAccountTo]
  public typealias ID = BPDCoreLibrary.TypeAccountTo
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.TypeAccountTo] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum OtherBanksTypeTransaction : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.OtherBanksTypeTransaction {
    get
  }
  case ach
  case lbtr
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.OtherBanksTypeTransaction]
  public typealias ID = BPDCoreLibrary.OtherBanksTypeTransaction
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.OtherBanksTypeTransaction] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum Currency : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.Currency {
    get
  }
  case usd
  case dop
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.Currency]
  public typealias ID = BPDCoreLibrary.Currency
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.Currency] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum DocumentType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.DocumentType {
    get
  }
  case cedula
  case rnc
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.DocumentType]
  public typealias ID = BPDCoreLibrary.DocumentType
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.DocumentType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct BPDTransactionHistoricalResponseModel : Swift.Identifiable {
  public let id: Foundation.UUID
  public let seq: Swift.String
  public let transactionType: Swift.String
  public let postingDate: Swift.String
  public let efectiveDate: Swift.String
  public let chequeNumber: Swift.String
  public let refNumber: Swift.String
  public let description: Swift.String
  public let amount: Swift.Double
  public let balance: Swift.Double
  public let BAICode: Swift.String
  public let csSeq: Swift.Int
  public let operationType: Swift.String, csDesc: Swift.String
  public let csIntCode: Swift.Int
  public let image: Swift.Bool
  public init()
  public typealias ID = Foundation.UUID
}
extension BPDCoreLibrary.BPDTransactionHistoricalResponseModel {
  public func fromPublicModel() -> BPDCoreLibrary.TransactionHistoricalResponseModelList
}
public enum DebitTokenReasonCode : Swift.String, Swift.Codable, Swift.CaseIterable {
  case issuerDecision
  case userDecision
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.DebitTokenReasonCode]
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.DebitTokenReasonCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct BPDBalanceQuickViewResponseModel : Swift.Codable {
  public let errorDescription: Swift.String?
  public let errorCode: Swift.String?
  public let product: [BPDCoreLibrary.BPDCQVSProductItemsModel]?
  public init(errorDescription: Swift.String, errorCode: Swift.String, product: [BPDCoreLibrary.BPDCQVSProductItemsModel])
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDCQVSProductItemsModel : Swift.Codable {
  public var id: Foundation.UUID
  public var number: Swift.String?
  public var type: Swift.String?
  public var balance: Swift.String?
  public var alias: Swift.String?
  public var currency: Swift.String?
  public init(number: Swift.String, type: Swift.String, balance: Swift.String, alias: Swift.String = "", currency: Swift.String?)
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDUserRecoveryResponseModel {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let userName: Swift.String
}
public struct BeneficiaryPaymentSubCategory : Swift.Hashable {
  public let categoryCode: Swift.String
  public let categoryDesc: Swift.String
  public let migrated: Swift.String
  public let itemCode: Swift.String
  public let companyCode: Swift.String
  public let stateCompanyCode: Swift.String
  public init(categoryCode: Swift.String? = "", categoryDesc: Swift.String? = "", migrated: Swift.String? = "", itemCode: Swift.String? = "", companyCode: Swift.String? = "", stateCompanyCode: Swift.String? = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiaryPaymentSubCategory, b: BPDCoreLibrary.BeneficiaryPaymentSubCategory) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SiebelLoanCreationOutput : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let response: BPDCoreLibrary.ResponseLoanCreationOutput?
  public init(errorCode: Swift.String, errorDescription: Swift.String, response: BPDCoreLibrary.ResponseLoanCreationOutput)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseLoanCreationOutput : Swift.Codable {
  public let creaOptyOutput: BPDCoreLibrary.CreaOptyOutput
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDPaymentEft {
  public let documentType: Swift.String
  public let idUserBank: Swift.String
  public let idClient: Swift.String
  public let desClaimer: Swift.String
  public let idTransactionOrigin: Swift.String
  public let datHour: Swift.String
  public let codChannel: Swift.String
  public let codCollector: Swift.String
  public let numberDocument: Swift.String
  public let cantPayments: Swift.String
  public let payments: [BPDCoreLibrary.BPDPaymentEftDebts]
  public let profile: Swift.String
  public init(documentType: Swift.String, idUserBank: Swift.String, idClient: Swift.String, desClaimer: Swift.String, idTransactionOrigin: Swift.String, datHour: Swift.String, codChannel: Swift.String, codCollector: Swift.String, numberDocument: Swift.String, cantPayments: Swift.String, payments: [BPDCoreLibrary.BPDPaymentEftDebts], profile: Swift.String)
  public init()
}
public enum OnBoardingCreateResponseType : Swift.Equatable {
  case client
  case product(Swift.String)
  case loan
  case credentials
  case creditCard(Swift.String)
  case token
  public static func == (a: BPDCoreLibrary.OnBoardingCreateResponseType, b: BPDCoreLibrary.OnBoardingCreateResponseType) -> Swift.Bool
}
public protocol SelfTransferUseCaseDelegate : AnyObject {
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveMultiCurrencyData(result: BPDCoreLibrary.MultiCurrencyResponse)
}
@_hasMissingDesignatedInitializers public class SelfTransferUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SelfTransferUseCaseDelegate)?
  public init()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amount: Swift.Double)
  public func proceedWithPayment()
  @objc deinit
}
public protocol QRPaymentUseCaseDelegate : AnyObject {
  func readQRResponse(_ result: BPDCoreLibrary.BPDResults<Swift.String>)
  func getQRResponse(_ result: BPDCoreLibrary.BPDResults<Swift.String>)
  func createQRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDCreateQrResponseModel>)
  func resultQRImage(_ result: BPDCoreLibrary.BPDResults<UIKit.UIImage>)
  func viewDataQRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ViewDataQrResponseModel>)
  func decodedDataQRUrlResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ViewDataQrResponseModel>, _ amount: Swift.Double?)
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class QRPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.QRPaymentUseCaseDelegate)?
  public init()
  public func createQR(model: BPDCoreLibrary.CreateQrRequestModel)
  public func viewDataQR(model: BPDCoreLibrary.ViewDataQrRequestModel)
  public func decodeQRUrl(_ QRUrl: Swift.String)
  public func getQRPayloads(nameImage: Swift.String)
  public func readQRImageFromGallery(QRImage: UIKit.UIImage)
  public func getQRUrl(_ amount: Swift.Double)
  public func prepareQRPayment(model: BPDCoreLibrary.BPDPaymentQrRequestModel)
  public func proceedWithQRPayment()
  @objc deinit
}
public struct SharesCertificatesRequestModel : Swift.Codable, Swift.Hashable {
  public let company: BPDCoreLibrary.SharesCompany
  public init(company: BPDCoreLibrary.SharesCompany)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.SharesCertificatesRequestModel, b: BPDCoreLibrary.SharesCertificatesRequestModel) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum SharesCompany : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Codable {
  public var id: BPDCoreLibrary.SharesCompany {
    get
  }
  public var sharesCompanyName: Swift.String {
    get
  }
  case consultaAccionesBPD
  case accionesBancoPopular
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.SharesCompany]
  public typealias ID = BPDCoreLibrary.SharesCompany
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.SharesCompany] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct BPDConfigQuickViewSaveRequestModel {
  public let number: Swift.String
  public let type: Swift.String
  public let currency: Swift.String
  public init(number: Swift.String, type: Swift.String, currency: Swift.String)
}
public struct AuthorizeRecoveryAccess {
  public let documentNumber: Swift.String
  public let minutias: BPDCoreLibrary.Minutias
  public init(documentNumber: Swift.String, minutias: BPDCoreLibrary.Minutias)
}
public struct Minutias : Swift.Sequence, Swift.IteratorProtocol {
  public let indexFinger: Swift.String
  public let middleFinger: Swift.String
  public let ringFinger: Swift.String
  public let littleFinger: Swift.String
  public init(indexFinger: Swift.String, middleFinger: Swift.String, ringFinger: Swift.String, littleFinger: Swift.String)
  public mutating func next() -> (Swift.String, Swift.String)?
  public typealias Element = (Swift.String, Swift.String)
  public typealias Iterator = BPDCoreLibrary.Minutias
}
public struct OnboardingAnswer {
  public var category: BPDCoreLibrary.CategoryQuestion
  public var identification: Swift.String?
  public var answers: [BPDCoreLibrary.AnswerQuestion]
  public init()
  public init(category: BPDCoreLibrary.CategoryQuestion, identification: Swift.String?, answers: [BPDCoreLibrary.AnswerQuestion])
  public init(category: BPDCoreLibrary.CategoryQuestion, answers: [BPDCoreLibrary.AnswerQuestion])
}
public enum DataAccessStrategy {
  case remoteOnly
  case localOnly
  case remoteFirst
  case localFirst
  public static func == (a: BPDCoreLibrary.DataAccessStrategy, b: BPDCoreLibrary.DataAccessStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDEntityInquiryRequestModel {
  public let number: Swift.String?
  public let currency: Swift.String?
  public init(number: Swift.String?, currency: Swift.String?)
}
@_hasMissingDesignatedInitializers public class AttestationInfo {
  final public let attestationPeriod: Swift.Int
  final public let appVersion: Swift.String
  final public let schemaVersion: Swift.Int64
  final public let deleteRealmIfMigrationNeeded: Swift.Bool?
  final public let bundleID: Swift.String
  final public let sdkVersion: Swift.String
  public func getActiveServerHost() -> Swift.String
  public func getDevice() -> Swift.String
  @objc deinit
}
public protocol LoanPaymentUseCaseDelegate : AnyObject {
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class LoanPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.LoanPaymentUseCaseDelegate)?
  public init()
  public func proceedWithPayment()
  public func preparePayment(_ model: BPDCoreLibrary.LoanPaymentInput)
  @objc deinit
}
public struct BeneficiariesPopular {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public var beneficiaries: [BPDCoreLibrary.BeneficiaryPopularOutputObject]
  public init(errorCode: Swift.String, errorDescription: Swift.String, beneficiaries: [BPDCoreLibrary.BeneficiaryPopularOutputObject])
}
public struct BeneficiaryPopularOutputObject : Swift.Identifiable, Swift.Hashable {
  public var id: Foundation.UUID
  public var alias: Swift.String
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public init(id: Foundation.UUID = UUID(), alias: Swift.String = "", accountNumber: Swift.String = "", accountType: Swift.String = "", currency: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiaryPopularOutputObject, b: BPDCoreLibrary.BeneficiaryPopularOutputObject) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public enum AccountTypes : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Codable {
  public var id: BPDCoreLibrary.AccountTypes {
    get
  }
  case savings
  case checking
  case creditCardLCL
  case creditCardFDR
  case loan
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.AccountTypes]
  public typealias ID = BPDCoreLibrary.AccountTypes
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.AccountTypes] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum Currencies : Swift.String, Swift.CaseIterable, Swift.Identifiable, Swift.Codable {
  public var id: BPDCoreLibrary.Currencies {
    get
  }
  case euro
  case dop
  case usd
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.Currencies]
  public typealias ID = BPDCoreLibrary.Currencies
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.Currencies] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CreateLoanInput {
  public let templateID: Swift.String
  public let idSolicitud: Swift.String
  public let diasPrimerPago: Swift.String
  public let primerFechaPago: Swift.String
  public let numeroCuenta: Swift.String
  public init(templateID: Swift.String, idSolicitud: Swift.String, diasPrimerPago: Swift.String, primerFechaPago: Swift.String, numeroCuenta: Swift.String)
}
public struct AnswerQuestionRequestModel : Swift.Encodable {
  public var idQuestion: Swift.Int
  public var response: Swift.String
  public init()
  public init(idQuestion: Swift.Int, response: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(*, deprecated, message: "Please check new protocol ProductUseCaseDelegate.")
public protocol BPDDDashboardUserCaseDelegate : AnyObject {
  @available(*, deprecated, message: "Please check new protocol ProductUseCaseDelegate: getProductsResponse.")
  func eventSuccess(response: [BPDCoreLibrary.BPDDashboardAccountModel])
  @available(*, deprecated, message: "Please check new protocol ProductUseCaseDelegate: getProductsResponse.")
  func eventError(message: Swift.String)
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "Please check new class ProductUseCase.")
public class BPDDashboardUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDDDashboardUserCaseDelegate)?
  public init()
  @available(*, deprecated, message: "Please check new function in ProductUserCase: getProducts and getProductsWithImage.")
  public func requestDashboard()
  @objc deinit
}
public struct BPDContractPaymentDebtsDetailResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPaymentDebtResponseModel : Swift.Codable {
  public let detail: [BPDCoreLibrary.BPDContractPaymentDetailResponseModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPaymentDetailResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPaymentProcessedDetailResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPaymentResponseModel : Swift.Codable {
  public init(codRecaudador: Swift.String?, codCanal: Swift.String?, idTransaccionOrigen: Swift.String?, fechaHora: Swift.String?, idUsuarioBanco: Swift.String?, perfil: Swift.String?, tipoDocumento: Swift.String?, numeroDocumento: Swift.String?, idCliente: Swift.String?, desclaimer: Swift.String?, cantPagos: Swift.String?, pagos: [BPDCoreLibrary.BPDContractPaymentDebtsDetailResponseModel]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.String {
  public func aesEncrypt(key: Swift.String, iv: Swift.String) -> Swift.String?
  public func aesDecrypt(key: Swift.String, iv: Swift.String) -> Swift.String?
}
extension Foundation.Data {
  public func encryptAES256(key: Foundation.Data, iv: Foundation.Data, options: Swift.Int = kCCOptionPKCS7Padding) -> Foundation.Data?
  public func decryptAES256(key: Foundation.Data, iv: Foundation.Data, options: Swift.Int = kCCOptionPKCS7Padding) -> Foundation.Data?
}
public func randomGenerateBytes(count: Swift.Int) -> Foundation.Data?
public struct CategoryInfo {
  public let _id: Swift.String
  public let description: Swift.String
  public let list: [BPDCoreLibrary.CategoryOption]
}
@_hasMissingDesignatedInitializers public class ProductDetails {
  final public let appId: Swift.String?
  final public let number: Swift.String?
  final public let type: Swift.String?
  final public let currency: Swift.String?
  final public let name: Swift.String?
  final public let custSeg: Swift.String?
  final public let docType: Swift.String?
  final public let custCIF: Swift.String?
  final public let acctToProvide: Swift.String?
  final public let acctToProvideType: Swift.String?
  final public let acctOpeningDay: Swift.String?
  final public let actualBalance: Swift.Double?
  final public let availableBalance: Swift.Double?
  final public let transitBalance: Swift.Double?
  final public let initialBalance: Swift.Double?
  final public let liquidationbalanceLast12Months: Swift.Double?
  final public let averageBalanceLast12Months: Swift.Double?
  final public let actualMonthAverageBalance: Swift.Double?
  final public let lastSettlementBalance: Swift.Double?
  final public let blocks: Swift.Double?
  final public let checkCreditAccount: Swift.String?
  final public let overdraftDays: Swift.Int?
  final public let onlineBooking: Swift.Double?
  final public let status: Swift.String?
  final public let milesDate: Swift.String?
  final public let nextSettlementDate: Swift.String?
  final public let lastSettlementDate: Swift.String?
  final public let expirationDateACA: Swift.String?
  final public let indCheckCreditAccount: Swift.String?
  final public let earnedUnpaidInterest: Swift.Double?
  final public let lineLimitReservation: Swift.Double?
  final public let remainingLimit: Swift.Double?
  final public let annualMilesGained: Swift.Int?
  final public let annualRedeemedMiles: Swift.Int?
  final public let annualExpirationMiles: Swift.Int?
  final public let lineBalanceACA: Swift.Double?
  final public let pledgedAmount: Swift.Double?
  final public let overdraftAmountTOD: Swift.Double?
  final public let productName: Swift.String?
  final public let acctOfficer: Swift.String?
  final public let ownsVisaDebit: Swift.Bool?
  final public let regionalAcct: Swift.String?
  final public let relation: Swift.String?
  final public let regionalAcctStatus: Swift.String?
  final public let interestRate: Swift.Double?
  final public let lineRateACA: Swift.Double?
  final public let overdraftRateTOD: Swift.Double?
  final public let totalAccumulatedMiles: Swift.Int?
  final public let transitDay1_TRANSIT_DAY_1: Swift.Double?
  final public let transitDay2: Swift.Double?
  final public let transitDay3: Swift.Double?
  final public let transitDay4: Swift.Double?
  final public let transitDay5: Swift.Double?
  final public let transitDay6: Swift.Double?
  final public let useACA: Swift.String?
  final public let monthlyFee: Swift.Double?
  final public let linkedAccount: Swift.String?
  final public let nextPaymentDate: Swift.String?
  final public let productNumber: Swift.String?
  final public let nextInterestPaymentDate: Swift.String?
  final public let expirationDate: Swift.String?
  @objc deinit
}
public enum PossibleLengthType : Swift.String, Swift.Codable {
  case national
  case localOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SiebelNewProductStatusUseCaseDelegate : AnyObject {
  func getSiebelNewProductStatusResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SiebelNewProductStatusResponseModel>)
}
@_hasMissingDesignatedInitializers public class SiebelNewProductStatusUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SiebelNewProductStatusUseCaseDelegate)?
  public init()
  public func getSiebelNewProductStatusResponse(model: BPDCoreLibrary.SiebelNewProductStatusInput)
  @objc deinit
}
extension Foundation.URLSession {
  public func perform(_ request: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
}
public struct BPDHistoricalOTPResponseModel : Swift.Decodable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public var historicoResponseDTO: [BPDCoreLibrary.BPDHistoricoResponseDTO]
  public init(errorCode: Swift.String, errorDescription: Swift.String, historicoResponseDTO: [BPDCoreLibrary.BPDHistoricoResponseDTO])
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDHistoricoResponseDTO : Swift.Decodable {
  public var id: Foundation.UUID
  public var OTP: Swift.String
  public let transactionId: Swift.String
  public let fecha: Swift.String
  public let fechaModificado: Swift.String
  public let estado: Swift.String
  public let cuenta: Swift.String
  public let montoDestino: Swift.Double
  public let monedaDestino: Swift.String
  public init(transactionId: Swift.String, fecha: Swift.String, fechaModificado: Swift.String, estado: Swift.String, cuenta: Swift.String, montoDestino: Swift.Double, monedaDestino: Swift.String, OTP: Swift.String)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoanDynamicFormInput {
  public let statusId: Swift.String
  public let statusDescription: Swift.String
  public let configFormId: Swift.String
  public let categoryTypeId: Swift.String
  public let creditScoringId: Swift.String
  public let opportunityId: Swift.String
  public let accountNumber: Swift.String
  public let approvedLimit: Swift.String
  public let referredBy: Swift.String
  public let numberOfInstallments: Swift.String
  public let fixedTermRate: Swift.String
  public let selectedRate: Swift.String
  public let debtorInsurance: Swift.String
  public init(statusId: Swift.String = "", statusDescription: Swift.String = "", configFormId: Swift.String = "", categoryTypeId: Swift.String = "", creditScoringId: Swift.String = "", opportunityId: Swift.String = "", accountNumber: Swift.String, approvedLimit: Swift.String, referredBy: Swift.String, numberOfInstallments: Swift.String, fixedTermRate: Swift.String, selectedRate: Swift.String, debtorInsurance: Swift.String)
}
public struct FDRCCHistoricalTransactionsRequestModel : Swift.Codable {
  public var number: Swift.String?
  public var currency: Swift.String?
  public var action: BPDCoreLibrary.BPDStatementInquiry.RawValue?
  public init(number: Swift.String?, currency: Swift.String?, action: BPDCoreLibrary.BPDStatementInquiry?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittancePrepareResponseModel : Swift.Codable {
  public var transaction: BPDCoreLibrary.Transaction?
  public var payment: BPDCoreLibrary.Payment?
  public var error: BPDCoreLibrary.ErrorRemittancePrepareDTO?
  public var correlId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorRemittancePrepareDTO : Swift.Codable {
  public var code: Swift.String?
  public var description: Swift.String?
  public var remittanceErrorResponse: BPDCoreLibrary.RemittancePrepareResponseError?
  public init()
  public init(code: Swift.String, description: Swift.String)
  public init(code: Swift.String, description: Swift.String, remittanceErrorResponse: BPDCoreLibrary.RemittancePrepareResponseError)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Payment : Swift.Codable {
  public var currency: Swift.String?
  public var amount: Swift.Double?
  public var rate: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public var messageType: Swift.String?
  public var channel: Swift.String?
  public var date: Swift.String?
  public var time: Swift.String?
  public var entity: Swift.String?
  public var remittances: Swift.String?
  public var payer: Swift.String?
  public var amount: Swift.Double?
  public var convertedAmount: Swift.Double?
  public var currency: Swift.String?
  public var rate: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittancePrepareResponseError : Swift.Error, Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittanceError : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum BiometricStatus : Swift.String {
  public typealias RawValue = Swift.String
  case BIOMETRIC_SUCCESS
  case BIOMETRIC_FAILED
  case BIOMETRIC_CHANGED
  case BIOMETRIC_ERROR_NONE_ENROLLED
  case BIOMETRIC_ERROR_NO_HARDWARE
  case BIOMETRIC_ERROR_CONVERTION
  case BIOMETRIC_NO_HAVE_TYPE
  case NO_ACTIVE_SESSION
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum BiometricType {
  case FaceID
  case TouchID
  case None
  public static func == (a: BPDCoreLibrary.BiometricType, b: BPDCoreLibrary.BiometricType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MAMServiceUseCaseDelegate : AnyObject {
  func mamResult(_ response: BPDCoreLibrary.BPDResults<Swift.String>)
}
@_hasMissingDesignatedInitializers public class MAMServiceUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.MAMServiceUseCaseDelegate)?
  public init()
  public func postMAM(model: BPDCoreLibrary.BPDMamRequestModel)
  @objc deinit
}
public struct SiebelCreateProductInput {
  public let requestType: Swift.String
  public let productType: Swift.String
  public let requestedLimitUS: Swift.String
  public let requestedLimitRD: Swift.String
  public init(requestType: Swift.String, productType: Swift.String, requestedLimitUS: Swift.String, requestedLimitRD: Swift.String)
}
public struct DebtInquiryFDRResponseModel : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractRequestModel {
  public let tipoOperacion: Swift.String
  public let categoria: Swift.String
  public let contratosIndividuales: [BPDCoreLibrary.BPDContratosIndividuales]
  public init()
  public init(tipoOperacion: Swift.String, categoria: Swift.String, contratosIndividuales: [BPDCoreLibrary.BPDContratosIndividuales])
}
public struct BPDContratosIndividuales {
  public let idPayee: Swift.String
  public let numeroContrato: Swift.String
  public init()
  public init(idPayee: Swift.String, numeroContrato: Swift.String)
}
public struct CancelAccountDynamicFormInput {
  public let statusId: Swift.String
  public let statusDescription: Swift.String
  public let configFormId: Swift.String
  public let categoryTypeId: Swift.String
  public let creditScoringId: Swift.String
  public let entryFlow: Swift.String
  public let accountNumber: Swift.String
  public let queryDate: Swift.String
  public let cancellationReason: Swift.String
  public let cancellationSubReason: Swift.String
  public init(statusId: Swift.String = "", statusDescription: Swift.String = "", configFormId: Swift.String = "", categoryTypeId: Swift.String = "", creditScoringId: Swift.String = "", entryFlow: Swift.String = "", accountNumber: Swift.String = "", queryDate: Swift.String = "", cancellationReason: Swift.String = "", cancellationSubReason: Swift.String = "")
}
public struct BPDSplitEnrollResponseModel : Swift.Decodable {
  public let id: Swift.String?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public init(id: Swift.String?, errorCode: Swift.String?, errorDescription: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BeneficiaryPaymentUseCaseDelegate : AnyObject {
  func beneficiaryPaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BeneficiaryPaymentDetail>)
  func beneficiaryPaymentCategoryResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPaymentCategory]>)
  func beneficiaryPaymentSubCategoryResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPaymentSubCategory]>)
  func beneficiariesPaymentResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPayment]>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class BeneficiaryPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BeneficiaryPaymentUseCaseDelegate)?
  public init()
  public func getBeneficiaryPaymentCategories()
  public func getBeneficiaryPaymentSubCategories(_ itemCode: Swift.String)
  public func getBeneficiariesPayment()
  public func addBeneficiaryPaymentDetail(_ model: BPDCoreLibrary.BeneficiaryPaymentDetailInput)
  public func editBeneficiaryPayment(_ model: BPDCoreLibrary.BeneficiaryPaymentDetailInput)
  public func deleteBeneficiaryPayment(_ model: BPDCoreLibrary.BeneficiaryPaymentDetailInput)
  @objc deinit
}
extension BPDCoreLibrary.BeneficiaryPaymentUseCase {
  public func receiveTokenSignal(transactionId: Swift.String)
  public func beneficiaryPaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BeneficiaryPaymentDetail>)
  public func beneficiaryCategoryPaymentResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPaymentCategory]>)
  public func beneficiarySubCategoryPaymentResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPaymentSubCategory]>)
  public func beneficiariesPaymentResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryPayment]>)
}
public struct BPDCreditCardActivactionResponse {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
}
public protocol AccountHiddenUseCaseDelegate : AnyObject {
  func hideAnAccountResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.HideAccount>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class AccountHiddenUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.AccountHiddenUseCaseDelegate)?
  public init()
  public func hideAnAccount(model: BPDCoreLibrary.HideAccountRequestModel)
  @objc deinit
}
public protocol SplitPaymentUseCaseDelegate : AnyObject {
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveBiometricSignal(transactionId: Swift.String)
  func receiveMultiCurrencyData(result: BPDCoreLibrary.MultiCurrencyResponse)
}
@_hasMissingDesignatedInitializers public class SplitPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SplitPaymentUseCaseDelegate)?
  public init()
  public func proceedWithPayment()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amount: Swift.Double)
  @objc deinit
}
public struct PaymentQrResponseModel : Swift.Codable {
  public var errorCode: Swift.String
  public var errorMessage: Swift.String
  public var pagarQRResponseDTO: BPDCoreLibrary.QRPaymentResponseDTO
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct QRPaymentResponseDTO : Swift.Codable {
  public var transactionID: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GenericResponseModel {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
}
public struct SupportedVersionRequestModel {
  public var appId: Swift.String?
  public var osType: Swift.String?
  public init()
  public init(appId: Swift.String, osType: Swift.String)
}
public protocol DetailsCreditCardFDRUseCaseDelegate : AnyObject {
  func debtInquiryFDRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDDebtInquiryFDRResponseModel>)
  func historicalTransactionsFDRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDFDRResult>, errorCode: Swift.String, errorDescription: Swift.String)
}
@_hasMissingDesignatedInitializers public class DetailsCreditCardFDRUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.DetailsCreditCardFDRUseCaseDelegate)?
  public init()
  public func debtInquiryFDR(model: BPDCoreLibrary.DebtInquiryFDRRequestModel)
  public func historicalTransactions(model: BPDCoreLibrary.FDRCCHistoricalTransactionsRequestModel)
  @objc deinit
}
public struct BPDSplitUserResponseModel {
  public var id: Swift.String
  public var errorCode: Swift.String
  public var errorDescription: Swift.String
  public var accountNumber: Swift.String
  public var accountType: Swift.String
  public var accountCurrency: Swift.String
  public init(id: Swift.String, errorCode: Swift.String, errorDescription: Swift.String, accountNumber: Swift.String, accountType: Swift.String, accountCurrency: Swift.String)
}
public protocol DetailsDebitCardUserCaseDelegate : AnyObject {
  func getDebitCardDetailsResponse(_ results: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDGetDebitCardDetailsResponseModel]>, errorCode: Swift.String, errorDescription: Swift.String)
}
@_hasMissingDesignatedInitializers public class DetailsDebitCardUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.DetailsDebitCardUserCaseDelegate)?
  public init()
  public func getDebitCardDetails(model: BPDCoreLibrary.GetDebitCardDetailsRequestModel)
  @objc deinit
}
public protocol DebitCardStatusUseCaseDelegate : AnyObject {
  func setDebitCardStatusResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DebitCardStatusOutput>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class DebitCardStatusUseCase {
  weak public var debitCardStatusDelegate: (any BPDCoreLibrary.DebitCardStatusUseCaseDelegate)?
  public init()
  public func setDebitCardStatus(model: BPDCoreLibrary.DebitCardStatusInput)
  public func callTokenNotifyDebitCardStatus(token: Swift.String)
  public func callBiometricNotifyDebitCardStatus(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
public struct CreateCertificate {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let product: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String, product: Swift.String)
}
public struct BPDOnboardingTermsAndConditions {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let body: BPDCoreLibrary.BPDOnboardingTermsAndConditionsBody?
  public init(errorCode: Swift.String?, errorDescription: Swift.String?, body: BPDCoreLibrary.BPDOnboardingTermsAndConditionsBody?)
  public init()
}
public struct BPDOnboardingTermsAndConditionsBody {
  public let name: Swift.String?
  public let body: Swift.String?
  public let devicePrint: Swift.String?
  public let ip: Swift.String?
  public let deviceId: Swift.String?
  public let documentType: Swift.String?
  public let documentNumber: Swift.String?
  public let creationDate: Swift.String?
  public let acceptedDate: Swift.String?
  public var htmlContent: Swift.String {
    get
  }
}
public enum ContractName : Swift.String {
  case scontainer
  case gnial
  case micropyme
  case remesas
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TransactionHistoricalRequestModel {
  public let numero: Swift.String
  public let tipo: Swift.String
  public let moneda: Swift.String
  public let fromDate: Swift.String
  public let toDate: Swift.String
  public init(numero: Swift.String, tipo: Swift.String, moneda: Swift.String, fromDate: Swift.String, toDate: Swift.String)
  public init(model: BPDCoreLibrary.BPDTransactionHistoricalModel)
}
public struct OnboardingContractRequestModel {
  public let name: Swift.String
  public init(name: Swift.String)
}
public protocol ServicePaymentUseCaseDelegate : AnyObject {
  func agreementResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDAgreementCategory]>)
  func agreementSubResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDAgreementSub>)
  func agreementContractResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDContractResponseModel>)
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDPaymentEft>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class ServicePaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ServicePaymentUseCaseDelegate)?
  public init()
  public func agreement()
  public func agreementSub(codCategory: Swift.String)
  public func agreementRechargeSub(codCategory: Swift.String)
  public func agreementContract(model: BPDCoreLibrary.BPDContractData)
  public func preparePayment(_ model: BPDCoreLibrary.ServicePaymentInput)
  public func proceedWithPayment()
  @objc deinit
}
public protocol CreditCardStatusUseCaseDelegate : AnyObject {
  func setCreditCardStatusResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreditCardStatusOutput>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class CreditCardStatusUseCase {
  weak public var creditCardStatusDelegate: (any BPDCoreLibrary.CreditCardStatusUseCaseDelegate)?
  public init()
  public func setCreditCardStatus(model: BPDCoreLibrary.CreditCardStatusInput)
  public func callTokenNotifyCreditCardStatus(token: Swift.String)
  public func callBiometricNotifyCreditCardStatus(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
extension UIKit.UIImage {
  public func qrToString() -> Swift.String
}
public protocol BPDCodigoCashUserCaseDelegate : AnyObject {
  func solicitarOTPSuccess(otp: Swift.String)
  func solicitarOTPResponse(_ result: BPDCoreLibrary.BPDResult)
  func solicitarOTPError(message: Swift.String)
  func cancellOTPSuccess(message: Swift.String)
  func cancellOTPError(message: Swift.String)
  func changeOTPSuccess(response: BPDCoreLibrary.BPDChangeOTPResponseModel)
  func changeOTPError(message: Swift.String)
  func getOTPHistoricalSuccess(response: BPDCoreLibrary.BPDHistoricalOTPResponseModel)
  func getOTPHistoricalError(message: Swift.String)
  func receiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func recieveOTPCodigoCash(id: Swift.String)
  func receiveInvalidUserState()
}
@_hasMissingDesignatedInitializers public class BPDCodigoCashUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDCodigoCashUserCaseDelegate)?
  public init()
  public func requestSolicitarOTP(model: BPDCoreLibrary.BPDCodigoCashRequestModel)
  public func codigoCashForMe(model: BPDCoreLibrary.BPDCodigoCashRequestModel)
  public func cancellOTP(transactionId: Swift.String)
  public func changeOTP(model: BPDCoreLibrary.BPDHistoricoResponseDTO, montoRetiro: Swift.Double, telefono: Swift.String)
  public func getOTPHistorical()
  @objc deinit
}
public protocol BeneficiaryPopularUseCaseDelegate : AnyObject {
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
  func popularBeneficiaryResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.PopularBeneficiary>)
  func getPopularBeneficiariesResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BeneficiariesPopular>)
}
@_hasMissingDesignatedInitializers public class BeneficiaryPopularUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BeneficiaryPopularUseCaseDelegate)?
  public init()
  public func editPopularBeneficiary(_ model: BPDCoreLibrary.PopularBeneficiaryInput)
  public func deletePopularBeneficiary(_ model: BPDCoreLibrary.PopularBeneficiaryInput)
  public func getPopularBeneficiaries()
  public func validateTokenAuthentication(token: Swift.String)
  public func callBiometricNotifyBenefPopular(minutias: BPDCoreLibrary.Minutias)
  public func addPopularBeneficiary(model: BPDCoreLibrary.PopularBeneficiaryInput)
  @objc deinit
}
public enum EndpointType : Swift.String {
  case provincies
  case municipalities
  case municipalDistricts
  case sectors
  case houseType
  case propertyType
  case professionType
  case occupationCategory
  case occupationType
  case incomeType
  case vocationCategory
  case validationPep
  case payStudies
  case sourceIncome
  case afpType
  case noType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BPDResetPasswordResponseModel {
  public let errorDescription: Swift.String
  public let errorCode: Swift.String
}
public protocol BPDSplitTransactionsUserCaseDelegate : AnyObject {
  func updateTransactionsCounter(contactId: Swift.String)
}
public class BPDSplitTransactionsUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDSplitTransactionsUserCaseDelegate)?
  public init()
  public func updateTransactionsCounter(contactId: Swift.String, splitIndetifier: Swift.String)
  @objc deinit
}
public struct BPDUserRecoveryRequestModel {
  public let documentType: BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType
  public let docNumber: Swift.String
  public let minutias: BPDCoreLibrary.Minutias
  public let userAgreed: Swift.Bool
  public init(documentType: BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType, docNumber: Swift.String, minutias: BPDCoreLibrary.Minutias, userAgreed: Swift.Bool)
  public enum DocumentType : Swift.String, Swift.CaseIterable, Swift.Identifiable {
    public var id: BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType {
      get
    }
    case cedula
    case rnc
    case pasaporte
    public init?(rawValue: Swift.String)
    public typealias AllCases = [BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType]
    public typealias ID = BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType
    public typealias RawValue = Swift.String
    public static var allCases: [BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol DebitCardInfoUseCaseDelegate : AnyObject {
  func getDebitCardInfoResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DebitCardInfoOutput>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class DebitCardInfoUseCase {
  weak public var debitCardInfoUseCaseDelegate: (any BPDCoreLibrary.DebitCardInfoUseCaseDelegate)?
  public init()
  public func getDebitCardInfo(model: BPDCoreLibrary.DebitCardInfoInput)
  public func callTokenNotifyDebitCardInfo(token: Swift.String)
  public func callBiometricNotifyDebitCardInfo(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
public struct BPDContractResponseModel {
  public let totalRegistros: Swift.String, resultado: Swift.String, agrupacion: Swift.String, cantDeudas: Swift.String
  public let monedaOrigen: Swift.String, monedaDestino: Swift.String, tasaCambio: Swift.String
  public let encabezado: BPDCoreLibrary.BPDEncabezado
  public let rubros: [BPDCoreLibrary.BPDRubro]
  public let suscripciones: [BPDCoreLibrary.BPDSuscripcione]
  public init()
  public init(totalRegistros: Swift.String, resultado: Swift.String, agrupacion: Swift.String, cantDeudas: Swift.String, monedaOrigen: Swift.String, monedaDestino: Swift.String, tasaCambio: Swift.String, encabezado: BPDCoreLibrary.BPDEncabezado, rubros: [BPDCoreLibrary.BPDRubro], suscripciones: [BPDCoreLibrary.BPDSuscripcione])
}
public struct BPDEncabezado {
  public let idTransaccion: Swift.String, fecha: Swift.String, version: Swift.String
  public init()
  public init(idTransaccion: Swift.String, fecha: Swift.String, version: Swift.String)
}
public struct BPDRubro {
  public let dscRubro: Swift.String, codRubro: Swift.String
  public init()
  public init(dscRubro: Swift.String, codRubro: Swift.String)
}
public struct BPDSuscripcione {
  public let codSuscripcion: Swift.String, codRubro: Swift.String, dscRubro: Swift.String, codConvenio: Swift.String
  public let dscConvenio: Swift.String, codEmpresa: Swift.String, dscEmpresa: Swift.String, numContrato: Swift.String
  public let email: Swift.String, alias: Swift.String, fecha: Swift.String, usuario: Swift.String
  public let numDocumento: Swift.String, fechUltimoPago: Swift.String, montoUltimoPago: Swift.String, estadoSuscripcion: Swift.String
  public let aceptaPagoTarjeta: Swift.String, pagoExacto: Swift.String, aceptaPagoRecurrente: Swift.String, aceptaPagoExpreso: Swift.String
  public let messageQueue: Swift.String, online: Swift.String, internalProduct: Swift.String, tipoBeneficiario: Swift.String
  public let query: Swift.String, classVersion: Swift.String, classQueries: Swift.String, monedaAlias: Swift.String
  public let idCategoria: Swift.String, migrado: Swift.String
  public let deudas: [BPDCoreLibrary.BPDDeuda]
  public let informacionImpuestos: [Swift.AnyObject]
  public init()
  public init(codSuscripcion: Swift.String, codRubro: Swift.String, dscRubro: Swift.String, codConvenio: Swift.String, dscConvenio: Swift.String, codEmpresa: Swift.String, dscEmpresa: Swift.String, numContrato: Swift.String, email: Swift.String, alias: Swift.String, fecha: Swift.String, usuario: Swift.String, numDocumento: Swift.String, fechUltimoPago: Swift.String, montoUltimoPago: Swift.String, estadoSuscripcion: Swift.String, aceptaPagoTarjeta: Swift.String, pagoExacto: Swift.String, aceptaPagoRecurrente: Swift.String, aceptaPagoExpreso: Swift.String, messageQueue: Swift.String, online: Swift.String, internalProduct: Swift.String, tipoBeneficiario: Swift.String, query: Swift.String, classVersion: Swift.String, classQueries: Swift.String, monedaAlias: Swift.String, idCategoria: Swift.String, migrado: Swift.String, deudas: [BPDCoreLibrary.BPDDeuda], informacionImpuestos: [Swift.AnyObject])
}
public struct BPDDeuda {
  public let idServicio: Swift.String, idConvenio: Swift.String, fechaFactura: Swift.String, fechaVencimiento: Swift.String
  public let idCliente: Swift.String, montoSaldoOrigen: Swift.String, montoDescuentoOrigen: Swift.String, montoMultaOrigen: Swift.String
  public let montoVencidOrigen: Swift.String, montoInteresOrigen: Swift.String, montoReajusteOrigen: Swift.String, montoTotalOrigen: Swift.String
  public let montoSaldoDestino: Swift.String, montoDescuentoDestino: Swift.String, montoMultaDestino: Swift.String, montoVencidoDestino: Swift.String
  public let montoInteresDestino: Swift.String, montoReajusteDestino: Swift.String, montoTotalDestino: Swift.String, numeroDocumento: Swift.String
  public let montoFacturado: Swift.String, itbis: Swift.String, estado: Swift.String, codMoneda: Swift.String
  public let idConsulta: Swift.String, codResultado: Swift.String, msgResultado: Swift.String, migrado: Swift.String
  public let balanceImpuesto1: Swift.String, balanceImpuesto2: Swift.String, balanceComisionBeneficiario: Swift.String, balanceComisionUsuario: Swift.String
}
public struct BPDInformacionImpuesto {
  public let Text: Swift.String, Visible: Swift.String, Caption: Swift.String
}
public struct MultiCurrencyResponse {
  public let exchange: Swift.String
  public let amountFrom: Swift.Double
  public let amountTo: Swift.Double
}
public struct InterbankBeneficiaryData : Swift.Codable {
  public let alias: Swift.String, accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String, bankId: Swift.String, docNumber: Swift.String, docType: Swift.String
  public init(alias: Swift.String, accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String, bankId: Swift.String, docNumber: Swift.String, docType: Swift.String)
  public init(accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String, bankId: Swift.String)
  public init(alias: Swift.String, accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String, bankId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebtInquiryFDRRequestModel : Swift.Codable {
  public var number: Swift.String?
  public var currency: Swift.String?
  public init(number: Swift.String?, currency: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CCActivationRequestModel : Swift.Codable {
  public let number: Swift.String
  public let cvv: Swift.String?
  public let expiryDate: Swift.String?
  public init(number: Swift.String, cvv: Swift.String, expiryDate: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthenticateTokenRequestModel {
  public init(id: Swift.String, code: Swift.String)
}
public struct BPDIndividualContractDetail {
  public let idPayee: Swift.String
  public let contractNumber: Swift.String
  public init()
  public init(idPayee: Swift.String, contractNumber: Swift.String)
}
public protocol BPDWithdrawCreditCardUserCaseDelegate : AnyObject {
  func withdrawCreditCardError(message: Swift.String)
  func withdrawCreditCardReceiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func withdrawCreditCardProcessed(result: BPDCoreLibrary.BPDPaymentResponseModel)
  func withdrawCreditCardReceiveTokenSignal(id: Swift.String)
  func withdrawCreditCardInvalidUserState()
  func withdrawCreditCardReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class BPDWithdrawCreditCardUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDWithdrawCreditCardUserCaseDelegate)?
  public init()
  public func creditCardWithdrawal()
  public func prepareWithdrawal(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func proceedWithPayment()
  @objc deinit
}
public struct BPDPaymentQrRequestModel {
  public var accountFromNumber: Swift.String?
  public var accountFromType: Swift.String?
  public var currencyFrom: Swift.String?
  public var accountToNumber: Swift.String?
  public var amountFrom: Swift.Double?
  public var amounTo: Swift.Double?
  public var accountTypeTo: Swift.String?
  public var currencyTo: Swift.String?
  public init()
  public init(accountFromNumber: Swift.String, accountFromType: Swift.String, currencyFrom: Swift.String, accountToNumber: Swift.String, amountFrom: Swift.Double, amounTo: Swift.Double, accountTypeTo: Swift.String, currencyTo: Swift.String)
}
public protocol BPDSplitUserCaseDelegate : AnyObject {
  func contactsStateSync(state: Swift.String)
  func responseContacts(contacts: [BPDCoreLibrary.BPDContactModel])
  func isContactsAuthorizeByUser(_ isAuthorize: Swift.Bool)
  func searchPhoneResponse(model: BPDCoreLibrary.BPDSearchPhoneResponseModel)
  func errorPhoneResponse(message: Swift.String)
  func searchContactSplitResponse(response: [BPDCoreLibrary.BPDContactModel])
  func getFavoriteContacts(favoriteContacts: [BPDCoreLibrary.BPDContactModel])
  func getUserSplit(response: BPDCoreLibrary.BPDSplitUserResponseModel)
  func errorGetUserSplit(message: Swift.String)
  func getFrequentContacts(contacts: [BPDCoreLibrary.BPDContactModel])
  func responseMyContacts(contacts: [BPDCoreLibrary.BPDContactModel])
}
@_hasMissingDesignatedInitializers public class BPDSplitUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDSplitUserCaseDelegate)?
  public init()
  public func updateFavContact(contactId: Swift.String, splitIdentifier: Swift.String)
  public func getFrequentContacts()
  public func getFavoriteContacts()
  public func searchPhone(phone: Swift.String)
  public func getUserSplitByPhone(phone: Swift.String)
  public func searchContactSplit(nameOrNumber: Swift.String)
  public func requestContacts()
  public func requestIfContactsAreAuthorized()
  public func getUserSplit(id: Swift.String, contactId: Swift.String)
  public func getNonSplitContacts()
  @objc deinit
}
public enum ListQuestion : Swift.String {
  case endPoint
  case booleanType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol OtherBanksPaymentUseCaseDelegate : AnyObject {
  func getProductsResponse(result: [BPDCoreLibrary.Product])
  func getBanksResponse(result: [BPDCoreLibrary.Bank])
  func processOtherBanksEventResult(result: BPDCoreLibrary.OtherBanksPaymentEvents)
}
@_hasMissingDesignatedInitializers public class ExpressPaymentOtherBanksUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.OtherBanksPaymentUseCaseDelegate)?
  public init()
  public func getProduct()
  public func proceedWithPaymentPosting()
  public func proceedWithPaymentAfterDuplicatedTransaction()
  public func getBanks()
  public func validateTokenAuthentication(token: Swift.String)
  public func validateBiometricAuthentication(minutias: BPDCoreLibrary.Minutias)
  public func initPaymentWithAnalyze(model: BPDCoreLibrary.OtherBanksPaymentRequestModel, keepBeneficiary: Swift.Bool)
  public func initBeneficiaryPaymentWithAnalyze(model: BPDCoreLibrary.OtherBanksBaneficiaryPaymentRequestModel)
  @objc deinit
}
public protocol SplitUseCaseDelegate : AnyObject {
  func getFrequentContactsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func getFavoriteContactsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func getSplitContactsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func getNonSplitContactsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func searchPhoneResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDSearchPhoneResponseModel>)
  func getSplitUserDetailResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDSplitUserResponseModel>)
  func updateFavoriteContactResponse(_ result: BPDCoreLibrary.BPDResult)
  func searchContactResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func enrollUserResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDSplitEnrollResponseModel>)
  func enrollUserOTPResponse(_ result: BPDCoreLibrary.BPDResult)
  func disenrollUserResponse(_ result: BPDCoreLibrary.BPDResult)
  func isUserAlreadyEnrolledResponse(_ result: BPDCoreLibrary.BPDResult)
  func validateSplitContactsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDContactModel]>)
  func requestContactsAccessResponse(_ result: Swift.Bool)
}
public protocol SplitUserDocDelegate : AnyObject {
  func getUserDocInfoResponse(_ result: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class SplitUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SplitUseCaseDelegate)?
  weak public var userDocEventDelegate: (any BPDCoreLibrary.SplitUserDocDelegate)?
  public init()
  public func getFrequentContacts()
  public func getFavoriteContacts()
  public func searchPhone(phone: Swift.String)
  public func getSplitUserDetail(phone: Swift.String)
  public func updateFavoriteContact(contactId: Swift.String, splitId: Swift.String)
  public func searchContactSplit(nameOrNumber: Swift.String)
  public func getSplitContacts()
  public func getUserSplit(id: Swift.String, contactId: Swift.String)
  public func getNonSplitContacts()
  public func enrollUser(model: BPDCoreLibrary.BPDSplitEnrollRequestModel)
  public func enrollUserOTP(model: Swift.String)
  public func enrollUserOTPSMS(model: BPDCoreLibrary.BPDSplitRequestSMS)
  public func disenrollUser()
  public func isUserAlreadyEnrolled()
  public func requestContactsAccess()
  public func validateSplitContacts()
  public func getUserDocInfo()
  @objc deinit
}
public struct BeneficiariesDebtsRequestModel : Swift.Codable {
  public let itemCode: Swift.String
  public init(itemCode: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateProductRequestModel {
  public let account: Swift.String
  public init(account: Swift.String)
}
public enum InstallmentPlan : Swift.String {
  case threeMonths
  case sixMonths
  case sevenMonths
  case oneYear
  public var value: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PlanInquiry : Swift.Hashable {
  public let institutionId: Swift.String
  public let serno: Swift.String
  public let shortcode: Swift.String
  public let plan: BPDCoreLibrary.InstallmentPlan?
  public let description: Swift.String
  public let descriptionStringId: Swift.String
  public let planPriority: Swift.String
  public let active: Swift.String
  public let instalmentType: Swift.String
  public let currency: Swift.String
  public let minAmount: Swift.String
  public let maxAmount: Swift.String
  public let minRepayment: Swift.String
  public let numInstalments: Swift.String
  public let validFromDate: Swift.String?
  public let validToDate: Swift.String
  public let onus: Swift.String
  public let createIndepInstalment: Swift.String
  public let lastRepaymentDiffers: Swift.String
  public let acquirerInstalmentWins: Swift.String
  public let commissionReductionRate: Swift.String
  public let onePaymentToMerchant: Swift.String
  public let delayPaymentBy: Swift.String
  public let merchantPaymentPeriod: Swift.String
  public let interestRate: Swift.String
  public let interestRateCoefficient: Swift.String
  public let interestRateDays: Swift.String
  public let interestAnchorDateInd: Swift.String
  public let interestFreeCycles: Swift.String
  public let delayFirstTransferBy: Swift.String
  public let delayChargeBy: Swift.String
  public let instalmentPeriod: Swift.String
  public let apr: Swift.String
  public let fixedDueDate: Swift.String
  public let interestCalculationMethod: Swift.String
  public let usedForCampaigns: Swift.String
  public let paymentAllocation: Swift.String
  public let paymentDueOption: Swift.String
  public let minDueOption: Swift.String
  public let interestBaseDate: Swift.String
  public let interestRefundMethodOnAccl: Swift.String
  public let separateTrxns: Swift.String
  public let stickAmrtTrxnToStmtCycle: Swift.String
  public let otbAffectedByPrincipalOnly: Swift.String
  public let accelerateWithSingleRepayment: Swift.String
  public let expiryOnCycle: Swift.String
  public let interestAddToBalance: Swift.Bool
  public let interestAllocation: Swift.String
  public let interestReasonCode: Swift.String
  public let planTypeNameStringId: Swift.String
  public let merchantGroupIndex: Swift.String
  public let instPlanLinkSerno: Swift.String
  public let minimumInstalmentsNumber: Swift.String
  public let maximumInstalmentsNumber: Swift.String
  public let interestCycleDays: Swift.String
  public let overdueIntInSeparateTrxn: Swift.String
  public let chargeInterestOutPaidByDueDate: Swift.String
  public init(institutionId: Swift.String = "", serno: Swift.String = "", shortcode: Swift.String = "", description: Swift.String = "", descriptionStringId: Swift.String = "", planPriority: Swift.String = "", active: Swift.String = "", instalmentType: Swift.String = "", currency: Swift.String = "", minAmount: Swift.String = "", maxAmount: Swift.String = "", minRepayment: Swift.String = "", numInstalments: Swift.String = "", validFromDate: Swift.String? = "", validToDate: Swift.String = "", onus: Swift.String = "", createIndepInstalment: Swift.String = "", lastRepaymentDiffers: Swift.String = "", acquirerInstalmentWins: Swift.String = "", commissionReductionRate: Swift.String = "", onePaymentToMerchant: Swift.String = "", delayPaymentBy: Swift.String = "", merchantPaymentPeriod: Swift.String = "", interestRate: Swift.String = "", interestRateCoefficient: Swift.String = "", interestRateDays: Swift.String = "", interestAnchorDateInd: Swift.String = "", interestFreeCycles: Swift.String = "", delayFirstTransferBy: Swift.String = "", delayChargeBy: Swift.String = "", instalmentPeriod: Swift.String = "", apr: Swift.String = "", fixedDueDate: Swift.String = "", interestCalculationMethod: Swift.String = "", usedForCampaigns: Swift.String = "", paymentAllocation: Swift.String = "", paymentDueOption: Swift.String = "", minDueOption: Swift.String = "", interestBaseDate: Swift.String = "", interestRefundMethodOnAccl: Swift.String = "", separateTrxns: Swift.String = "", stickAmrtTrxnToStmtCycle: Swift.String = "", otbAffectedByPrincipalOnly: Swift.String = "", accelerateWithSingleRepayment: Swift.String = "", expiryOnCycle: Swift.String = "", interestAddToBalance: Swift.Bool = false, interestAllocation: Swift.String = "", interestReasonCode: Swift.String = "", planTypeNameStringId: Swift.String = "", merchantGroupIndex: Swift.String = "", instPlanLinkSerno: Swift.String = "", minimumInstalmentsNumber: Swift.String = "", maximumInstalmentsNumber: Swift.String = "", interestCycleDays: Swift.String = "", overdueIntInSeparateTrxn: Swift.String = "", chargeInterestOutPaidByDueDate: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.PlanInquiry, b: BPDCoreLibrary.PlanInquiry) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol BiometricsUseCaseDelegate : AnyObject {
  func biometricsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BiometricType>)
  func disenrollResponse(_ result: BPDCoreLibrary.BPDResult)
  func isBiometricsRegisteredResponse(_ result: BPDCoreLibrary.BPDResult)
  func isBiometricsEnabledResponse(_ result: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class BiometricsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BiometricsUseCaseDelegate)?
  public init()
  public func enroll()
  public func disenroll()
  public func isBiometricRegistered()
  public func isBiometricsEnabled()
  @objc deinit
}
public struct BPDLoginModel {
  public init()
  public init(user: Swift.String, pass: Swift.String, biokey: Swift.String, saveUser: Swift.Bool)
  public init(user: Swift.String, pass: Swift.String, saveUser: Swift.Bool)
}
public struct BPDDuplicatedTransactionModel {
  public var message: Swift.String
}
public struct GetDebitCardDetailsResponseModel : Swift.Codable {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let response: [BPDCoreLibrary.DebitCardDetailsResponse]?
  public init(errorCode: Swift.String?, errorDescription: Swift.String?, response: [BPDCoreLibrary.DebitCardDetailsResponse]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebitCardDetailsResponse : Swift.Codable {
  public let accountNumber: Swift.String?
  public let accountType: Swift.String?
  public let currency: Swift.String?
  public let maskedNumber: Swift.String?
  public let productCode: Swift.String?
  public init(accountNumber: Swift.String?, accountType: Swift.String?, currency: Swift.String?, maskedNumber: Swift.String?, productCode: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConsultClaimRequestModel {
  public let srNumber: Swift.String
  public init(srNumber: Swift.String)
}
public struct BPDCreditCardInfoRequestModel {
  public let number: Swift.String?
  public let expiryDate: Swift.String?
  public init(number: Swift.String?, expiryDate: Swift.String?)
}
public struct RemittanceListDetailResponseModel : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebitCardStatusInput {
  public let cardNumber: Swift.String
  public let newStatus: BPDCoreLibrary.DebitCardStatusValues
  public init(cardNumber: Swift.String, newStatus: BPDCoreLibrary.DebitCardStatusValues)
}
public enum DebitCardStatusValues : Swift.String, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.DebitCardStatusValues {
    get
  }
  case normal
  case stolen
  case lost
  case fraud
  case expired
  case customerClosed
  case banckCancelled
  case temporalBlock
  case dormant
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.DebitCardStatusValues]
  public typealias ID = BPDCoreLibrary.DebitCardStatusValues
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.DebitCardStatusValues] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ChangePasswordResponse {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
}
public protocol NotifyBiometricUseCaseDelegate : AnyObject {
  func authenticateTokenSuccess(response: BPDCoreLibrary.BPDOtpTransaction)
  func authenticateTokenError(response: BPDCoreLibrary.BPDError)
  func authenticateQuestionarySuccess(response: BPDCoreLibrary.BPDQuestionsTransaction)
  func authenticateQuestionaryError(response: BPDCoreLibrary.BPDError)
  func authenticateTokenResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDOtpTransaction>)
  func authenticateQuestionaryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDQuestionsTransaction>)
}
@_hasMissingDesignatedInitializers public class NotifyBiometricUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.NotifyBiometricUseCaseDelegate)?
  public init()
  public func authenticateBiometric(model: BPDCoreLibrary.BPDAuthenticateBiometricRequestModel)
  @objc deinit
}
public struct CreateClaimRequestModel {
  public let atmNumber: Swift.String
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let amount: Swift.String
  public let transactionDate: Foundation.Date
  public let description: Swift.String
  public let claimType: Swift.String
  public let claimArea: Swift.String
  public let claimSubarea: Swift.String
  public let claimNotes: Swift.String
  public let distributionChannel: Swift.String
  public let channel: Swift.String
  public let expendingDate: Swift.String
  public let errorType: Swift.String
  public init(atmNumber: Swift.String, accountNumber: Swift.String, accountType: Swift.String, amount: Swift.String, transactionDate: Foundation.Date, description: Swift.String, claimType: Swift.String, claimArea: Swift.String, claimNotes: Swift.String, claimSubarea: Swift.String, distributionChannel: Swift.String, channel: Swift.String, expendingDate: Swift.String, errorType: Swift.String)
}
public struct NetworkingError : Swift.Error, Foundation.LocalizedError {
  public var status: BPDCoreLibrary.NetworkingError.Status
  public var code: Swift.Int {
    get
  }
  public var jsonPayload: Swift.String?
  public init(errorCode: Swift.Int)
  public init(errorCode: Swift.Int, description: Swift.String)
  public init(status: BPDCoreLibrary.NetworkingError.Status)
  public init(error: any Swift.Error)
  public var errorDescription: Swift.String {
    get
  }
  public enum Status : Swift.Int {
    case unknown
    case networkUnreachable
    case unableToParseResponse
    case unableToParseRequest
    case libraryExceptionError
    case businessError
    case dataValidationError
    case dataNotInitializedError
    case continueError
    case switchingProtocols
    case processing
    case ok
    case created
    case accepted
    case nonAuthoritativeInformation
    case noContent
    case resetContent
    case partialContent
    case multiStatus
    case alreadyReported
    case IMUsed
    case multipleChoices
    case movedPermanently
    case found
    case seeOther
    case notModified
    case useProxy
    case switchProxy
    case temporaryRedirect
    case permenantRedirect
    case badRequest
    case unauthorized
    case paymentRequired
    case forbidden
    case notFound
    case methodNotAllowed
    case notAcceptable
    case proxyAuthenticationRequired
    case requestTimeout
    case conflict
    case gone
    case lengthRequired
    case preconditionFailed
    case payloadTooLarge
    case uriTooLong
    case unsupportedMediaType
    case rangeNotSatisfiable
    case expectationFailed
    case teapot
    case misdirectedRequest
    case unprocessableEntity
    case locked
    case failedDependency
    case upgradeRequired
    case preconditionRequired
    case tooManyRequests
    case requestHeaderFieldsTooLarge
    case unavailableForLegalReasons
    case noResponse
    case sslCertificateError
    case sslCertificateRequired
    case httpRequestSentToHTTPSPort
    case clientClosedRequest
    case internalServerError
    case notImplemented
    case badGateway
    case serviceUnavailable
    case gatewayTimeout
    case httpVersionNotSupported
    case variantAlsoNegotiates
    case insufficientStorage
    case loopDetected
    case notExtended
    case networkAuthenticationRequired
    case cancelled
    case badURL
    case timedOut
    case unsupportedURL
    case cannotFindHost
    case cannotConnectToHost
    case networkConnectionLost
    case dnsLookupFailed
    case httpTooManyRedirects
    case resourceUnavailable
    case notConnectedToInternet
    case redirectToNonExistentLocation
    case badServerResponse
    case userCancelledAuthentication
    case userAuthenticationRequired
    case zeroByteResource
    case cannotDecodeRawData
    case cannotDecodeContentData
    case cannotParseResponse
    case appTransportSecurityRequiresSecureConnection
    case fileDoesNotExist
    case fileIsDirectory
    case noPermissionsToReadFile
    case dataLengthExceedsMaximum
    case secureConnectionFailed
    case serverCertificateHasBadDate
    case serverCertificateUntrusted
    case serverCertificateHasUnknownRoot
    case serverCertificateNotYetValid
    case clientCertificateRejected
    case CclientCertificateRequired
    case cannotLoadFromNetwork
    case cannotCreateFile
    case cannotOpenFile
    case cannotCloseFile
    case cannotWriteToFile
    case CcannotRemoveFile
    case cannotMoveFile
    case downloadDecodingFailedMidStream
    case downloadDecodingFailedToComplete
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension BPDCoreLibrary.NetworkingError {
  public static var unableToParseResponse: BPDCoreLibrary.NetworkingError {
    get
  }
  public static var unableToParseRequest: BPDCoreLibrary.NetworkingError {
    get
  }
  public static var unknownError: BPDCoreLibrary.NetworkingError {
    get
  }
}
extension Swift.DecodingError {
  public var description: Swift.String? {
    get
  }
}
public struct ViewDataQrResponseModel : Swift.Codable {
  public var decodeQrResponseDTO: BPDCoreLibrary.DecodeUserQrResponseDto?
  public var errorMesage: Swift.String?
  public var errorCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DecodeUserQrResponseDto : Swift.Codable {
  public var merchantName: Swift.String?
  public var merchantAccount: Swift.String?
  public var accountType: Swift.String?
  public var currency: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContactModel {
  public let identifier: Swift.String
  public let givenName: Swift.String
  public let familyName: Swift.String
  public var phoneNumbers: [BPDCoreLibrary.BPDContactNumberModel]
}
public struct TransactionHistoricalResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionHistoricalResponseModelList : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDCashCodeFavUserCaseDelegate : AnyObject {
  func cashCodeFavSuccess(message: Swift.String)
  func cashCodeFavError(message: Swift.String)
  func getAllCashCodeFavSucces(response: [BPDCoreLibrary.BPDCashCodeFavResponseModel])
}
@_hasMissingDesignatedInitializers public class BPDCashCodeFavUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDCashCodeFavUserCaseDelegate)?
  public init()
  public func addCashCodeFav(model: BPDCoreLibrary.BPDCashCodeFavRequestModel)
  public func getAllCashCodeFav()
  public func updateCashCodeFav(model: BPDCoreLibrary.BPDUpdateCashCodeFavRequestModel)
  public func deleteCashCodeFav(id: Swift.String)
  @objc deinit
}
public protocol CreditCardPaymentUseCaseDelegate : AnyObject {
  func creditCardPaymentResponse(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(id: Swift.String)
  func receiveBiometricSignal(id: Swift.String)
}
@_hasMissingDesignatedInitializers public class CreditCardPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CreditCardPaymentUseCaseDelegate)?
  public init()
  public func prepareCreditCardPayment(accountFrom: Swift.String, accountTo: Swift.String, amount: Swift.Double)
  public func proceedWithCreditCardPayment()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Product {
  final public let type: Swift.String
  final public let number: Swift.String
  final public let currency: Swift.String
  final public let currentBalance: Swift.Double
  final public let workingBalance: Swift.Double
  final public let alias: Swift.String
  final public let accountRelation: Swift.String
  final public let hidden: Swift.Bool
  final public let bin: Swift.String
  public var urlSm: Swift.String
  public var urlLg: Swift.String
  public var productName: Swift.String
  public var transactionsAllowed: Swift.Bool?
  public var prodCode: Swift.String?
  public init(type: Swift.String, number: Swift.String, currency: Swift.String, currentBalance: Swift.Double, workingBalance: Swift.Double, alias: Swift.String, accountRelation: Swift.String, hidden: Swift.Bool, bin: Swift.String, urlSm: Swift.String, urlLg: Swift.String, productName: Swift.String, transactionsAllowed: Swift.Bool?, prodCode: Swift.String? = nil)
  @objc deinit
}
public protocol RecoveryAccessUseCaseDelegate : AnyObject {
  func authorizeRecoveryAccessResponse(_ response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class RecoveryAccessUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RecoveryAccessUseCaseDelegate)?
  public init()
  public func authorizeRecoveryAccess(model: BPDCoreLibrary.AuthorizeRecoveryAccess)
  @objc deinit
}
extension BPDCoreLibrary.RecoveryAccessUseCase {
  public func authorizeRecoveryAccessResponse(_ response: BPDCoreLibrary.BPDResult)
}
public protocol BPDLoginUserCaseDelegate : AnyObject {
  func eventSuccess(token: Swift.String)
  func eventError(message: Swift.String)
  func eventReceiveUser(user: Swift.String?)
  func eventReceiveQuestions(id: Swift.String, questions: [BPDCoreLibrary.BPDRiskChallengeDetailToken], accessToken: Swift.String)
  func eventReceiveTokenSignal(id: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDLoginUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDLoginUserCaseDelegate)?
  public init()
  public func loginByCredentials(user: BPDCoreLibrary.BPDLoginModel)
  public func loginByBiometric(user: BPDCoreLibrary.BPDLoginModel)
  public func getUsername()
  @objc deinit
}
public protocol BNPLUseCaseDelegate : AnyObject {
  func getPlanInquiryResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.PlanInquiry]>)
  func getInstallmentActionsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.Installments>)
  func convertTransactionToInstalmentResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ConvertTransactionResponseModel>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveBiometricSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class BNPLUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BNPLUseCaseDelegate)?
  public init()
  public func getPlanInquiry(model: BPDCoreLibrary.PlanInquiryRequestModel)
  public func getInstallmentActions(model: BPDCoreLibrary.InstallmentActionsRequestModel)
  public func convertTransactionToInstallment(model: BPDCoreLibrary.ConvertTransactionRequestModel)
  @objc deinit
}
public protocol DeviceRegistrationUseCaseDelegate : AnyObject {
  func registerDeviceResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DeviceRegistrationStatus>)
  func getSupportedVersionResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SupportedVersionResponseModel>)
}
@_hasMissingDesignatedInitializers public class DeviceRegistrationUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.DeviceRegistrationUseCaseDelegate)?
  @objc deinit
}
public struct DebitCardInfoOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public var cardInfoObject: [BPDCoreLibrary.DebitCardInfoOutputObject]
  public init(errorCode: Swift.String, errorDescription: Swift.String, cardInfoObject: [BPDCoreLibrary.DebitCardInfoOutputObject])
}
public struct DebitCardInfoOutputObject : Swift.Identifiable {
  public let id: Foundation.UUID
  public let expirationDate: Swift.String
  public let status: Swift.String
  public let productCode: Swift.String
  public let debitCardNumber: Swift.String
  public let currency: Swift.String
  public let accountType: Swift.String
  public let accountNumber: Swift.String
  public typealias ID = Foundation.UUID
}
public struct TokenInquiryOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let code: Swift.String
  public let subCode: Swift.String
  public let description: Swift.String
  public var tokenInquiryData: [BPDCoreLibrary.TokenInquiryObject]
  public init(errorCode: Swift.String, errorDescription: Swift.String, code: Swift.String, subCode: Swift.String, description: Swift.String, tokenInquiryData: [BPDCoreLibrary.TokenInquiryObject])
}
public struct TokenInquiryObject : Swift.Hashable {
  public var number: Swift.String
  public var serno: Swift.String
  public var creationDate: Swift.String
  public var lastUpdateDate: Swift.String
  public var status: Swift.String
  public var cardNumber: Swift.String
  public var expiryDate: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.TokenInquiryObject, b: BPDCoreLibrary.TokenInquiryObject) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PendingTransactionsUseCaseDelegate : AnyObject {
  func pendingTransactionsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.PendingTransactionOutput>)
}
@_hasMissingDesignatedInitializers public class PendingTransactionsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.PendingTransactionsUseCaseDelegate)?
  public init()
  public func getPendingTransactions(model: BPDCoreLibrary.PendingTransactionInput)
  @objc deinit
}
public enum BPDStatementInquiry : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.BPDStatementInquiry {
    get
  }
  case afterCutOffDate
  case lastCutOffDate
  case penultimateCutOffDate
  case antePenultimateCutOffDate
  public init(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.BPDStatementInquiry]
  public typealias ID = BPDCoreLibrary.BPDStatementInquiry
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.BPDStatementInquiry] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CategoryOption {
  public let index: Swift.Int
  public let label: Swift.String
  public init(index: Swift.Int, label: Swift.String)
}
public struct SupportedVersionResponseModel : Swift.Codable {
  public var appId: BPDCoreLibrary.AppId?
  public var errorCode: Swift.String?
  public var errorDescription: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppId : Swift.Codable {
  public var ident: Swift.String?
  public var name: Swift.String?
  public var shortName: Swift.String?
  public var operatorName: Swift.String?
  public var android: BPDCoreLibrary.Android?
  public var ios: BPDCoreLibrary.iOS?
  public var rsaKey: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Android : Swift.Codable {
  public var packageName: Swift.String?
  public var encryptionKey: Swift.String?
  public var verificationKey: Swift.String?
  public var uploadCertificateChecksum: Swift.String?
  public var signedCertificateChecksum: Swift.String?
  public var appVersion: Swift.String?
  public var sdkVersion: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct iOS : Swift.Codable {
  public var appId: Swift.String?
  public var appGuid: Swift.String?
  public var appVersion: Swift.String?
  public var sdkVersion: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol DebitCardDetailsUseCaseDelegate : AnyObject {
  func getDebitCardDetailsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDGetDebitCardDetailsResponseModel]>)
}
@_hasMissingDesignatedInitializers public class DebitCardDetailsUseCase {
  weak public var debitCardDetailsUseCaseDelegate: (any BPDCoreLibrary.DebitCardDetailsUseCaseDelegate)?
  public init()
  public func getDebitCardDetails(model: BPDCoreLibrary.BPDGetDebitCardDetailsInput)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BeneficiaryPaymentDetail {
  final public let categoryCode: Swift.String?
  final public let contractNumber: Swift.String?
  final public let subscriptionCode: Swift.String?
  final public let errorCode: Swift.String?
  final public let errorDescription: Swift.String?
  public init(categoryCode: Swift.String? = "", contractNumber: Swift.String? = "", subscriptionCode: Swift.String? = "", errorCode: Swift.String? = "", errorDescription: Swift.String? = "")
  @objc deinit
}
public struct CQVSProductItemsModel : Swift.Decodable {
  public let number: Swift.String?
  public let type: Swift.String?
  public let balance: Swift.Double?
  public let alias: Swift.String?
  public let currency: Swift.String?
  public func toPublicModel() -> BPDCoreLibrary.BPDCQVSProductItemsModel
  public init(from decoder: any Swift.Decoder) throws
}
public struct HideAccount {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
}
public struct AvailableClaims {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public var availableClaimsObject: [BPDCoreLibrary.AvailableClaimResponseObject]
  public init(errorCode: Swift.String, errorDescription: Swift.String, availableClaimsObject: [BPDCoreLibrary.AvailableClaimResponseObject])
}
public struct AvailableClaimResponseObject : Swift.Hashable, Swift.Identifiable {
  public let id: Swift.String
  public let claimName: Swift.String
  public let type: Swift.String
  public let description: Swift.String
  public let textDescription: Swift.String
  public let area: Swift.String
  public let subArea: Swift.String
  public let currency: Swift.String
  public let amount: Swift.Double
  public let productType: [Swift.String]
  public init(id: Swift.String, claimName: Swift.String, type: Swift.String, description: Swift.String, textDescription: Swift.String, area: Swift.String, subArea: Swift.String, currency: Swift.String, amount: Swift.Double, productType: [Swift.String])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.AvailableClaimResponseObject, b: BPDCoreLibrary.AvailableClaimResponseObject) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDRemittanceCategoryListModel : Swift.Hashable {
  public let id: Swift.Int?
  public let name: Swift.String?
  public let label: Swift.String?
  public let description: Swift.String?
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDRemittanceCategoryListModel, b: BPDCoreLibrary.BPDRemittanceCategoryListModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrepareRemittanceOutput {
  public var response: BPDCoreLibrary.PrepareRemittanceResponseOutput
  public var errorCode: Swift.String
  public var errorDescription: Swift.String
}
public struct PrepareRemittanceResponseOutput {
  public var remStatus: Swift.String
  public var remSubStatus: Swift.String
  public var entityErrorCode: Swift.String
  public var entityErrorResponse: Swift.String
}
public struct BPDAgreementSub : Swift.Codable, Swift.Hashable {
  public let agreements: [BPDCoreLibrary.BPDAgreementsSub]
  public let totalRegisters: Swift.String
  public let result: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDAgreementSub, b: BPDCoreLibrary.BPDAgreementSub) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAgreementsSub : Swift.Codable, Swift.Hashable {
  public let detail: BPDCoreLibrary.BPDAgreementSubDetail
  public let company: BPDCoreLibrary.BPDAgreementSubCompanyDetail
  public init()
  public init(detail: BPDCoreLibrary.BPDAgreementSubDetail, company: BPDCoreLibrary.BPDAgreementSubCompanyDetail)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDAgreementsSub, b: BPDCoreLibrary.BPDAgreementsSub) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAgreementSubDetail : Swift.Codable, Swift.Hashable {
  public let codCategory: Swift.String
  public let dscCategory: Swift.String
  public let fecAddAgreement: Swift.String
  public let dscAgreement: Swift.String
  public let cntAgreement: Swift.String
  public let acceptPaymentExpress: Swift.String
  public let codAgreement: Swift.String
  public let migrate: Swift.String
  public let fecFinAgreement: Swift.String
  public let codCurrency: Swift.String
  public let codStatusConv: Swift.String
  public let fecIniAgreement: Swift.String
  public let fecUpdAgreement: Swift.String
  public init()
  public init(codCategory: Swift.String, dscCategory: Swift.String, fecAddAgreement: Swift.String, dscAgreement: Swift.String, cntAgreement: Swift.String, acceptPaymentExpress: Swift.String, codAgreement: Swift.String, migrate: Swift.String, fecFinAgreement: Swift.String, codCurrency: Swift.String, codStatusConv: Swift.String, fecIniAgreement: Swift.String, fecUpdAgreement: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDAgreementSubDetail, b: BPDCoreLibrary.BPDAgreementSubDetail) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAgreementSubCompanyDetail : Swift.Codable, Swift.Hashable {
  public let nameSocialCompany: Swift.String
  public let codCompany: Swift.String
  public let codStateComp: Swift.String
  public let nameCompany: Swift.String
  public let docCompany: Swift.String
  public init()
  public init(nameSocialCompany: Swift.String, codCompany: Swift.String, codStateComp: Swift.String, nameCompany: Swift.String, docCompany: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDAgreementSubCompanyDetail, b: BPDCoreLibrary.BPDAgreementSubCompanyDetail) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDMulticurrencyTransactionResponseModel : Swift.Decodable {
  public let exchange: Swift.String
  public let amountFrom: Swift.Double
  public let amountTo: Swift.Double
  public init(exchange: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct CProductRequestModel {
}
public enum ProgressOnBoarding : Swift.String {
  case LOGIN
  case PEP
  case OFAC
  case ADDRESS
  case EMPLOY
  case MEMBERSHIP
  case OTP
  case TERMS
  case CREATE_USER
  case CREATE_PRODUCT
  case CREATE_LOAN
  case CREATE_CREDENTIALS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PollerError : Swift.Error {
  case decoding
  case network
  case url
  case noResponse
  case unhandledStatusCode
  public static func == (a: BPDCoreLibrary.PollerError, b: BPDCoreLibrary.PollerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Toggle : Swift.Codable {
  public let name: Swift.String
  public let enabled: Swift.Bool
  public let variant: BPDCoreLibrary.Variant?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Variant : Swift.Codable {
  public let name: Swift.String
  public let enabled: Swift.Bool
  public let payload: BPDCoreLibrary.Payload?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Payload : Swift.Codable {
  public let type: Swift.String
  public let value: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardStatusOutput : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DebitTokenOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let operationId: Swift.String
  public let status: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String, operationId: Swift.String, status: Swift.String)
}
public struct DebitTokenInput : Swift.Codable {
  public init(reason: Swift.String, cardId: Swift.String = "", reasonCode: BPDCoreLibrary.DebitTokenReasonCode)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDUpdateCashCodeFavRequestModel {
  public let id: Swift.String
  public let document: Swift.String
  public let alias: Swift.String
  public init(id: Swift.String, document: Swift.String, alias: Swift.String)
}
public struct UnleashContext {
}
public struct BPDChangeOTPResponseModel : Swift.Decodable {
  public let otp: Swift.String
  public init(estado: Swift.String, otp: Swift.String, transactionId: Swift.String)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RemittanceClaimUseCaseDelegate : AnyObject {
  func setRemittanceClaimResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.RemittanceClaimResponseModel>)
}
@_hasMissingDesignatedInitializers public class RemittanceClaimUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RemittanceClaimUseCaseDelegate)?
  public init()
  public func setRemittanceClaim(model: BPDCoreLibrary.RemittanceClaimInput)
  @objc deinit
}
public struct BPDAuthenticateResponseModel : Swift.Decodable {
  public let response: BPDCoreLibrary.BPDAuthenticateResponse?
  public let errorDescription: Swift.String?
  public let errorCode: Swift.String?
  public init(errorCode: Swift.String, errorDescription: Swift.String, response: BPDCoreLibrary.BPDAuthenticateResponse)
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAuthenticateResponse : Swift.Decodable {
  public let riskResult: BPDCoreLibrary.BPDAuthenticateResponse.BPDRiskResult
  public let deviceTokenCookie: Swift.String
  public let deviceTokenFSO: Swift.String
  public struct BPDRiskResult : Swift.Codable {
    public let sessionInfo: BPDCoreLibrary.BPDAuthenticateResponse.BPDRiskResult.BPDSessionInfo
    public let userVerification: BPDCoreLibrary.BPDAuthenticateResponse.BPDRiskResult.BPDUserVerification
    public struct BPDSessionInfo : Swift.Codable {
      public let sessionID: Swift.String, transactionID: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BPDUserVerification : Swift.Codable {
      public let userState: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CCTransactions : Swift.Hashable, Swift.Identifiable {
  public let id: Swift.String
  public let amount: Swift.Double
  public let date: Swift.String
  public let description: Swift.String
  public let mcc: Swift.String
  public let trxnGroupId: Swift.Int
  public let totalRebates: Swift.Double
  public let reasonCode: Swift.String
  public let validToInstallment: Swift.Bool
  public let transactionSerno: Swift.String
  public let cardNumber: Swift.String
  public let mccDescription: Swift.String
  public let authCode: Swift.String
  public init(amount: Swift.Double? = 0.0, date: Swift.String? = "", description: Swift.String? = "", mcc: Swift.String? = "", trxnGroupId: Swift.Int? = 0, totalRebates: Swift.Double? = 0, reasonCode: Swift.String? = "", validToInstallment: Swift.Bool? = true, transactionSerno: Swift.String? = "", cardNumber: Swift.String? = "", mccDescription: Swift.String? = "", authCode: Swift.String? = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.CCTransactions, b: BPDCoreLibrary.CCTransactions) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct ProductImage {
  public let bines: [BPDCoreLibrary.ProductImageList]
  public init(bines: [BPDCoreLibrary.ProductImageList])
}
public struct ProductImageList : Swift.Decodable {
  public let bin: Swift.String?
  public let urlSm: Swift.String?
  public let urlLg: Swift.String?
  public let productName: Swift.String?
  public init(bin: Swift.String?, urlSm: Swift.String?, urlLg: Swift.String?, productName: Swift.String?)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardInfoResponseModel : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardInfoObject : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDMamRequestModel : Swift.Codable {
  public let dato: Swift.String
  public let body: Swift.String
  public init(dato: Swift.String, body: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDBiometricUserCaseDelegate : AnyObject {
  func receiveType(_ value: BPDCoreLibrary.BiometricType)
  func biometricResponse(_ result: BPDCoreLibrary.BPDResult, status: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDBiometricUserCase {
  weak public var delegate: (any BPDCoreLibrary.BPDBiometricUserCaseDelegate)?
  public init()
  public func isBiometricEnabled()
  public func getBiometricType()
  public func biometricRegister()
  @objc deinit
}
public struct SiebelNewProductStatusInput {
  public let requestId: Swift.String
  public init(requestId: Swift.String = "")
}
public struct SiebelNewProductStatusDataInput {
  public let requestId: Swift.String
  public init(requestId: Swift.String)
}
public struct AnswerQuestion {
  public var idQuestion: Swift.Int
  public var response: BPDCoreLibrary.AnswerType
  public init()
  public init(idQuestion: Swift.Int)
  public init(idQuestion: Swift.Int, response: BPDCoreLibrary.AnswerType)
}
public enum AnalyzeChallenge {
  case tokenChallenge
  case biometricChallenge
  public static func == (a: BPDCoreLibrary.AnalyzeChallenge, b: BPDCoreLibrary.AnalyzeChallenge) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias MetadataCallback = (() throws -> Foundation.Data?)
public protocol ExpressPaymentUseCaseDelegate : AnyObject {
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveBiometricSignal(transactionId: Swift.String)
  func receiveMultiCurrencyData(result: BPDCoreLibrary.MultiCurrencyResponse)
}
public protocol ProductOwnerDelegate : AnyObject {
  func productOwnerResponse(result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDAccountDetailsOwner>)
}
@_hasMissingDesignatedInitializers public class ExpressPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ExpressPaymentUseCaseDelegate)?
  weak public var eventDelegateForProductOwner: (any BPDCoreLibrary.ProductOwnerDelegate)?
  public init()
  public func proceedWithPayment()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amount: Swift.Double)
  public func prepareBeneficiaryPayment(accountFrom: Swift.String, beneficiary: BPDCoreLibrary.BeneficiaryPopularOutputObject, amount: Swift.Double)
  public func proceedWithBeneficiaryPayment()
  public func validateBiometricAuthentication(minutias: BPDCoreLibrary.Minutias, id: Swift.String)
  public func validateTokenAuthentication(token: Swift.String, id: Swift.String)
  @objc deinit
}
public struct BeneficiaryPaymentCategory : Swift.Hashable {
  public let id: Swift.Int
  public let category: Swift.String
  public let item: Swift.String
  public init(id: Swift.Int = 0, category: Swift.String? = "", item: Swift.String? = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiaryPaymentCategory, b: BPDCoreLibrary.BeneficiaryPaymentCategory) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDPaymentEftDetail {
  public let debtPay: Swift.String
  public let paymentAmount: Swift.String
  public let expirationDate: Swift.String
  public let accountNumber: Swift.String
  public let paymentMedia: Swift.String
  public let currencyAccount: Swift.String
}
public struct HideAccountRequestModel : Swift.Codable {
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public init(accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol QuickBalanceUseCaseDelegate : AnyObject {
  func saveQuickBalanceConfigResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
  func deleteQuickBalanceConfigResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
  func getQuickBalanceResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDBalanceQuickViewResponseModel>)
  func getQuickBalanceTokenResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
}
public protocol QuickBalanceAuthenticateUseCaseDelegate : AnyObject {
  func getQuickBalanceByAuthenticateResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDBalanceQuickViewResponseModel>)
}
@_hasMissingDesignatedInitializers public class QuickBalanceUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.QuickBalanceUseCaseDelegate)?
  weak public var eventDelegateQuickBalance: (any BPDCoreLibrary.QuickBalanceAuthenticateUseCaseDelegate)?
  public init()
  public func saveQuickBalanceConfig(model: [BPDCoreLibrary.ConfigQuickViewSaveRequestModel])
  public func deleteQuickBalanceConfig()
  public func getQuickBalance()
  public func getQuickBalanceByAuthenticate()
  @objc deinit
}
public struct OnboardingGenerateTokenV2RequestModel : Swift.Codable {
  public let email: Swift.String
  public let phone: Swift.String
  public init(email: Swift.String, phone: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RemittancePaymentUseCaseDelegate : AnyObject {
  func preparePaymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.RemittancePrepareResponseModel>)
  func paymentResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDRemittancePaymentResponseModel>)
  func getRemittanceResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.RemittanceGetResponseModel>)
  func getCategoryListResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDRemittanceCategoryListModel]>)
  func getCategoryListDetailResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDRemittanceDetailListModel]>)
  func remittancePrepareResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.PrepareRemittanceOutput>)
  func receiveInvalidUserState()
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class RemittancePaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RemittancePaymentUseCaseDelegate)?
  public init()
  public func preparePayment(model: BPDCoreLibrary.RemittancePrepareRequestModel)
  public func remittancePrepare(model: BPDCoreLibrary.RemittancePrepareRequestModel)
  public func getRemittance(model: BPDCoreLibrary.RemittanceGetRequestModel)
  public func getCategoryList()
  public func getCategoryListDetail(model: BPDCoreLibrary.RemittanceListDetailRequestModel)
  public func payment(model: BPDCoreLibrary.BPDRemittancePaymentRequestModel, amount: Swift.Double, currencyFrom: Swift.String)
  public func proceedWithPayment()
  @objc deinit
}
public protocol BPDAuthenticateBiometricUserCaseDelegate : AnyObject {
  func authenticateBiometricSuccess(response: BPDCoreLibrary.BPDBiometricTransaction)
  func authenticateBiometricError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDAuthenticateBiometricUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDAuthenticateBiometricUserCaseDelegate)?
  public init()
  public func validateBiometricAuthentication(model: BPDCoreLibrary.BPDAuthenticateBiometricRequestModel)
  @objc deinit
}
public struct OperationAcceptRequestModel {
}
public enum AnswerType {
  case int(Swift.Int)
  case string(Swift.String)
  case date(Foundation.Date)
  case selected(BPDCoreLibrary.CategoryOption)
}
public struct BPDRemittanceDetailListModel {
  public let id: Swift.Int?
  public let idList: Swift.Int?
  public let name: Swift.String?
  public let label: Swift.String?
  public let description: Swift.String?
}
@frozen public enum BPDResults<T> {
  case success(T)
  case error(BPDCoreLibrary.BPDError)
}
@frozen public enum BPDResult {
  case success
  case error(BPDCoreLibrary.BPDError)
}
public protocol BPDSplitEnrollUserCaseDelegate : AnyObject {
  func isUserAlreadySplitInEnrollResponse(_ response: Swift.Bool)
  func isUserAlreadySplitInEnrollError(_ error: Swift.String)
  func dashboardAccountsResponse(_ response: [BPDCoreLibrary.BPDDashboardAccountList])
  func splitEnrollSuccess(response: BPDCoreLibrary.BPDSplitEnrollResponseModel)
  func splitEnrollError(message: Swift.String)
  func splitEnrollOTPResponse(_ result: BPDCoreLibrary.BPDResult)
  func splitUnenrollResponse(_ result: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class BPDSplitEnrollUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDSplitEnrollUserCaseDelegate)?
  public init()
  public func isUserAlreadySplitInEnroll()
  public func getDashboardAccounts()
  public func requestEnroll(model: BPDCoreLibrary.BPDSplitEnrollRequestModel)
  public func requestEnrollOTP(model: Swift.String)
  public func requestEnrollOTPSMS(model: BPDCoreLibrary.BPDSplitRequestSMS)
  public func requestUnenrollSplit()
  @objc deinit
}
public struct TermsAndConditions {
  public let name: Swift.String
  public let body: Swift.String
  public let devicePrint: Swift.String
  public let ip: Swift.String
  public let deviceId: Swift.String
  public let documentType: Swift.String
  public let documentNumber: Swift.String
  public let creationDate: Swift.String
  public let acceptedDate: Swift.String
  public var htmlContent: Swift.String {
    get
  }
  public init(name: Swift.String, body: Swift.String, devicePrint: Swift.String, ip: Swift.String, deviceId: Swift.String, documentType: Swift.String, documentNumber: Swift.String, creationDate: Swift.String, acceptedDate: Swift.String)
  public init()
}
public struct CreateQrRequestModel : Swift.Codable {
  public var accountType: Swift.String
  public var accountNumber: Swift.String
  public var accountCurrency: Swift.String
  public var description: Swift.String
  public init()
  public init(accountType: Swift.String, accountNumber: Swift.String, accountCurrency: Swift.String, description: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class UnleashSwiftEvenBus {
  open class func post(_ name: Swift.String, sender: Any? = nil)
  open class func post(_ name: Swift.String, sender: ObjectiveC.NSObject?)
  open class func post(_ name: Swift.String, sender: Any? = nil, userInfo: [Swift.AnyHashable : Any]?)
  open class func postToMainThread(_ name: Swift.String, sender: Any? = nil)
  open class func postToMainThread(_ name: Swift.String, sender: ObjectiveC.NSObject?)
  open class func postToMainThread(_ name: Swift.String, sender: Any? = nil, userInfo: [Swift.AnyHashable : Any]?)
  @discardableResult
  open class func on(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, queue: Foundation.OperationQueue?, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  @discardableResult
  open class func onMainThread(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  @discardableResult
  open class func onBackgroundThread(_ target: Swift.AnyObject, name: Swift.String, sender: Any? = nil, handler: @escaping ((Foundation.Notification?) -> Swift.Void)) -> any ObjectiveC.NSObjectProtocol
  open class func unregister(_ target: Swift.AnyObject)
  open class func unregister(_ target: Swift.AnyObject, name: Swift.String)
  @objc deinit
}
public struct BPDPaymentEftDebts {
  public let paymentDetail: BPDCoreLibrary.BPDPaymentEftDetail
  public let detail: [BPDCoreLibrary.BPDDebtsEftDetail]
}
public struct CancelAccountDynamicFormOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let requestId: Swift.String
  public let message: Swift.String
  public let status: Swift.String
  public let url: Swift.String
  public let messageId: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", requestId: Swift.String = "", message: Swift.String = "", status: Swift.String = "", url: Swift.String = "", messageId: Swift.String = "")
}
public protocol BPDConfigQuickViewUserCaseDelegate : AnyObject {
  func configViewSaveSuccess()
  func configViewSaveError(message: Swift.String)
  func configViewDeleteSuccess()
  func configViewDeleteError(message: Swift.String)
  func obtainBalanceQuickViewSucces(response: BPDCoreLibrary.BPDBalanceQuickViewResponseModel)
  func obtainBalanceQuickViewSuccesError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDConfigQuickViewUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDConfigQuickViewUserCaseDelegate)?
  public var showView: Swift.Bool
  public init()
  public func requestConfigQuickViewSave(model: [BPDCoreLibrary.BPDConfigQuickViewSaveRequestModel])
  public func requestConfigQuickViewDelete()
  public func obtainBalanceView(fromLogin: Swift.Bool)
  @objc deinit
}
public struct ViewDataQrRequestModel {
  public var payload: Swift.String
  public init()
  public init(payload: Swift.String)
}
public struct Bank : Swift.Hashable, Swift.Identifiable {
  public var id: Swift.String
  public let name: Swift.String
  public let interBank: Swift.String
  public init(id: Swift.String = "", name: Swift.String = "", interBank: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.Bank, b: BPDCoreLibrary.Bank) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConsultClaimResponseModel : Swift.Codable {
  public let errorDescription: Swift.String, errorCode: Swift.String
  public let listOfserviceRequest: BPDCoreLibrary.ListOfserviceRequest
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ListOfserviceRequest : Swift.Codable {
  public let serviceRequest: [BPDCoreLibrary.ServiceRequest]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServiceRequest : Swift.Codable, Swift.Identifiable {
  public var id: Foundation.UUID
  public let parentesco: Swift.String, centroCostos: Swift.String, seguro: Swift.String, servicio: Swift.String
  public let tarjetaBloqueada: Swift.String, bpdTipo: Swift.String, tipoReclamacion: Swift.String, tipoError: Swift.String
  public let monto: Swift.String, canalDistribucion: Swift.String, estado: Swift.String, fechaFinalizacionPrevista: Swift.String
  public let slaUnidadTiempo: Swift.String, slaTiempoTotal: Swift.String, tipoTransaccion: Swift.String, ubicacionCajero: Swift.String
  public let cartaAnexa: Swift.String, electricidad: Swift.String, zonaCajero: Swift.String, fechaCierre: Swift.String
  public let moneda: Swift.String, canal: Swift.String, celularAfiliado: Swift.String, sRNumber: Swift.String
  public let tipo: Swift.String, area: Swift.String, subarea: Swift.String, descripcion: Swift.String
  public let numMovilCliente: Swift.String, telNoAfiliadoUbicacionCajero: Swift.String, telefonica: Swift.String, origenTx: Swift.String
  public let numCuenta: Swift.String, universidad: Swift.String, tarjetaAtachada: Swift.String, fechaApertura: Swift.String
  public let marcaTarjeta: Swift.String, nomTarjetahabiente: Swift.String, numeroCajero: Swift.String, bPDNumerodeIdentificacion: Swift.String
  public let listOfAuditTrail: BPDCoreLibrary.ListOfAuditTrail
  public let listOfserviceRequestNotes: BPDCoreLibrary.ListOfserviceRequestNotes
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ListOfAuditTrail : Swift.Codable {
  public let auditTrail: [BPDCoreLibrary.AuditTrail]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuditTrail : Swift.Codable {
  public let campo: Swift.String, nuevoValor: Swift.String, valorAnterior: Swift.String, fecha: Swift.String
  public let loginEmpleado: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ListOfserviceRequestNotes : Swift.Codable {
  public let serviceRequestNotes: [BPDCoreLibrary.ServiceRequestNote]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServiceRequestNote : Swift.Codable {
  public let nota: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDTransactionBetweenOwnAccountUserCaseDelegate : AnyObject {
  func transactionError(message: Swift.String)
  func multyCurrencyTransactionSuccess(response: BPDCoreLibrary.BPDMulticurrencyTransactionResponseModel)
  func multyCurrencyTransactionError(message: Swift.String)
  func receiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func receiveInvalidUserState()
  func tokenOTPTransactionBetweenAccount(id: Swift.String)
  func transactionProcessed(result: BPDCoreLibrary.BPDPaymentResponseModel)
  func transferReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class BPDTransactionBetweenOwnAccountUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDTransactionBetweenOwnAccountUserCaseDelegate)?
  public init()
  public func preparePayment(accountFrom: BPDCoreLibrary.BPDDashboardAccountModel, accountTo: BPDCoreLibrary.BPDDashboardAccountModel, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func processTransference(amount: Swift.Double)
  public func proceedWithPayment()
  @objc deinit
}
public struct BPDCProductRequestModel {
  public let account: Swift.String
  public init(account: Swift.String)
}
public struct BPDDebtInquiryFDRResponseModel : Swift.Hashable {
  public let dueDate: Swift.String?
  public let cutOffDate: Swift.String?
  public let currentBalance: Swift.String?
  public let cutOffBalance: Swift.String?
  public let debt: Swift.String?
  public let minPayment: Swift.String?
  public let number: Swift.String?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDDebtInquiryFDRResponseModel, b: BPDCoreLibrary.BPDDebtInquiryFDRResponseModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class OnboardingQuestions : Swift.Identifiable {
  final public let id: Foundation.UUID
  public var identification: Swift.String
  final public let _id: Swift.String
  final public let appName: Swift.String
  final public let description: Swift.String
  public var address: [BPDCoreLibrary.DetailQuestion]
  public var employment: [BPDCoreLibrary.DetailQuestion]
  public var membership: [BPDCoreLibrary.DetailQuestion]
  public var oFAC: [BPDCoreLibrary.DetailQuestion]
  public var pEP: [BPDCoreLibrary.DetailQuestion]
  final public let type: Swift.String
  public init()
  public init(id: Swift.String, identification: Swift.String, appName: Swift.String, description: Swift.String, address: [BPDCoreLibrary.DetailQuestion], employment: [BPDCoreLibrary.DetailQuestion], membership: [BPDCoreLibrary.DetailQuestion], oFAC: [BPDCoreLibrary.DetailQuestion], pEP: [BPDCoreLibrary.DetailQuestion], type: Swift.String)
  public typealias ID = Foundation.UUID
  @objc deinit
}
public enum ContractType : Swift.String {
  case scontainer
  case gnial
  case micropyme
  case remesas
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ChangeOTPRequestModel {
  public init(transactionId: Swift.String, montoRetiro: Swift.Double, rsaTransactionId: Swift.String, telefono: Swift.String)
}
public protocol BPDRSATokenUserCaseDelegate : AnyObject {
  func rsaTokenSuccess(seed: Swift.String)
  func rsaTokenError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDRSATokenUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDRSATokenUserCaseDelegate)?
  public init()
  public func requestRSAToken(model: BPDCoreLibrary.BPDRSATokenRequestModel)
  @objc deinit
}
public struct SplitUserRequestModel {
}
@_hasMissingDesignatedInitializers public class VersionUtils {
  public static func checkIfSdkVersionIsUpdated() -> Swift.Bool
  public static func checkIfAppVersionIsUpdated() -> Swift.Bool
  @objc deinit
}
public struct RemittanceHistoryRequestModel : Swift.Codable {
  public let dateFrom: Swift.String
  public let dateTo: Swift.String
  public let mtype: Swift.String?
  public let creditAccountNumber: Swift.String?
  public let entity: Swift.String?
  public init(dateFrom: Foundation.Date, dateTo: Foundation.Date, mtype: Swift.String? = "", creditAccountNumber: Swift.String? = "", entity: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BeneficiaryDebt : Swift.Codable, Swift.Hashable {
  public let dueDate: Swift.String
  public let serviceId: Swift.String
  public let totalAmountOrigin: Swift.Double
  public let totalAmountDestiny: Swift.Double
  public let status: Swift.String
  public let currency: Swift.String
  public let resultCode: Swift.String
  public let resultMessage: Swift.String
  public let migrated: Swift.Bool
  public init(dueDate: Swift.String = "", serviceId: Swift.String = "", totalAmountOrigin: Swift.Double = 0.0, totalAmountDestiny: Swift.Double = 0.0, status: Swift.String = "", currency: Swift.String = "", resultCode: Swift.String = "", resultMessage: Swift.String = "", migrated: Swift.Bool = false)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiaryDebt, b: BPDCoreLibrary.BeneficiaryDebt) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LoginDataUserOnBoarding {
  public let identification: Swift.String
  public let email: Swift.String
  public var phoneNumber: Swift.String
  public let indexFinger: Swift.String
  public let middleFinger: Swift.String
  public let ringFinger: Swift.String
  public let littleFinger: Swift.String
  public let instanceBiometric: Swift.String
  public init(identification: Swift.String, email: Swift.String, phoneNumber: Swift.String, indexFinger: Swift.String? = nil, middleFinger: Swift.String? = nil, ringFinger: Swift.String? = nil, littleFinger: Swift.String? = nil, instanceBiometric: Swift.String? = nil)
}
public struct DropDownModel : Swift.Identifiable, Swift.Equatable {
  public let id: Swift.Int
  public let label: Swift.String
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init(id: Swift.Int, label: Swift.String)
  public static func == (a: BPDCoreLibrary.DropDownModel, b: BPDCoreLibrary.DropDownModel) -> Swift.Bool
  public typealias ID = Swift.Int
}
public struct DebitCardStatusOutput : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataTypes : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let fixedLine: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let generalDesc: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let mobile: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let pager: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let personalNumber: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let premiumRate: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let sharedCost: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let tollFree: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let voicemail: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let voip: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let uan: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let numberFormats: [BPDCoreLibrary.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPhoneNumberDesc : Swift.Decodable {
  public let exampleNumber: Swift.String?
  public let nationalNumberPattern: Swift.String?
  public let possibleNumberPattern: Swift.String?
  public let possibleLengths: BPDCoreLibrary.MetadataPossibleLengths?
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPossibleLengths : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct MetadataPhoneNumberFormat : Swift.Decodable {
  public let pattern: Swift.String?
  public let format: Swift.String?
  public let intlFormat: Swift.String?
  public let leadingDigitsPatterns: [Swift.String]?
  public var nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixOptionalWhenFormatting: Swift.Bool?
  public let domesticCarrierCodeFormattingRule: Swift.String?
}
public struct MetadataTerritory : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let fixedLine: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let generalDesc: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let mobile: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let pager: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let personalNumber: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let premiumRate: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let sharedCost: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let tollFree: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let voicemail: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let voip: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let uan: BPDCoreLibrary.MetadataPhoneNumberDesc?
  public let numberFormats: [BPDCoreLibrary.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
}
public struct PendingTransactionInput {
  public var dateFrom: Foundation.Date
  public var dateTo: Foundation.Date
  public var number: Swift.String
  public init(number: Swift.String, dateFrom: Foundation.Date, dateTo: Foundation.Date)
}
@_hasMissingDesignatedInitializers public class JSONSerializer {
  public enum JSONSerializerError : Swift.Error {
    case jsonIsNotDictionary
    case jsonIsNotArray
    case jsonIsNotValid
    public static func == (a: BPDCoreLibrary.JSONSerializer.JSONSerializerError, b: BPDCoreLibrary.JSONSerializer.JSONSerializerError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func toDictionary(_ jsonString: Swift.String) throws -> Foundation.NSDictionary
  public static func toArray(_ jsonString: Swift.String) throws -> Foundation.NSArray
  public static func toJson(_ object: Any, prettify: Swift.Bool = false) -> Swift.String
  @objc deinit
}
public struct CreateCredentialsRequestModel {
  public let user: Swift.String
  public let password: Swift.String
  public init(user: Swift.String, password: Swift.String)
  public init(password: Swift.String)
}
public struct BPDObCreateResponseModel {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let response: BPDCoreLibrary.BPDObCreateTokenResponse
}
public struct BPDObCreateTokenResponse {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let seed: Swift.String
}
public protocol CreditCardUseCaseDelegate : AnyObject {
  func activateResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CCActivation>)
  func ccInfoResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CCInfo>)
  func entityInquiryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreditCardDetails>)
  func statementInquiryResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.CCTransactions]>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveBiometricSignal(transactionId: Swift.String)
  func increaseLimitResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.IncreaseLimitResponse>)
}
@_hasMissingDesignatedInitializers public class CreditCardUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CreditCardUseCaseDelegate)?
  public init()
  public func activate(model: BPDCoreLibrary.CCActivationRequestModel)
  public func getEntityInquiry(model: BPDCoreLibrary.CreditCardDetailsRequestModel)
  public func getStatementEnquiry(model: BPDCoreLibrary.CCTransactionsRequestModel)
  public func getCreditCardInfo(model: BPDCoreLibrary.CCInfoRequestModel)
  public func increaseLimit(model: BPDCoreLibrary.IncreaseLimitRequestModel)
  @objc deinit
}
extension BPDCoreLibrary.CreditCardUseCase {
  public func activateResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CCActivation>)
  public func entityInquiryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreditCardDetails>)
  public func statementInquiryResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.CCTransactions]>)
}
public struct CeduladoRequestModel : Swift.Codable {
  public let beneficiaryDocNumber: Swift.String
  public init(beneficiaryDocNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CCredentialsRequestModel {
}
public struct BPDPayQrResponseModel {
  public let pagarQRResponseDTO: BPDCoreLibrary.QRPaymentResponse?
  public let errorCode: Swift.String?, errorMessage: Swift.String?
  public static let defaultValue: BPDCoreLibrary.BPDPayQrResponseModel
}
public struct QRPaymentResponse : Swift.Decodable {
  public let transactionID: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDRiskChallengeDetail : Swift.Codable, Swift.Identifiable {
  public var id: Foundation.UUID
  public var tokens: [BPDCoreLibrary.BPDRiskChallengeDetailToken]
  public init(tokens: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDRiskChallengeDetailToken : Swift.Codable, Swift.Identifiable, Swift.Equatable {
  public static func == (lhs: BPDCoreLibrary.BPDRiskChallengeDetailToken, rhs: BPDCoreLibrary.BPDRiskChallengeDetailToken) -> Swift.Bool
  public var id: Foundation.UUID
  public var token: [BPDCoreLibrary.BPDRiskQuestionToken]
  public init(token: [BPDCoreLibrary.BPDRiskQuestionToken])
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDRiskAnswerToken : Swift.Codable {
  public let tokenID: Swift.String, tokenValue: Swift.String
  public init(tokenID: Swift.String, tokenValue: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDRiskQuestionToken : Swift.Codable, Swift.Identifiable {
  public let id: Foundation.UUID
  public var tokenID: Swift.String, tokenValue: Swift.String
  public var answerValue: Swift.String
  public init(tokenID: Swift.String, tokenValue: Swift.String)
  public init(tokenID: Swift.String, tokenValue: Swift.String, answerValue: Swift.String)
  public typealias ID = Foundation.UUID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ExtraCreditOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let requestId: Swift.String
  public let message: Swift.String
  public let status: Swift.String
  public let url: Swift.String
  public let messageId: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", requestId: Swift.String = "", message: Swift.String = "", status: Swift.String = "", url: Swift.String = "", messageId: Swift.String = "")
}
public struct ConfigQuickViewSaveRequestModel : Swift.Codable {
  public let number: Swift.String
  public let type: Swift.String
  public let currency: Swift.String
  public init(number: Swift.String, type: Swift.String, currency: Swift.String)
  public init(model: BPDCoreLibrary.BPDConfigQuickViewSaveRequestModel)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RequestOTPResult {
  public let OTP: Swift.String
}
public struct PinCreditInput {
  public var pin: Swift.String
  public let number: Swift.String
  public let expirationDate: Swift.String
  public init(pin: Swift.String, number: Swift.String, expirationDate: Swift.String)
}
public struct RemittanceClaimResponseModel : Swift.Codable {
  public var errorCode: Swift.String
  public var errorDescription: Swift.String
  public var transaction: Swift.String?
  public init(errorCode: Swift.String = "", errorDescription: Swift.String? = "", transaction: Swift.String = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDDeviceUserCaseDelegate : AnyObject {
  func deviceAttestResponse(_ result: BPDCoreLibrary.BPDResult, state: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDDeviceUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDDeviceUserCaseDelegate)?
  public init()
  public func deviceAttestation()
  @objc deinit
}
public struct BPDConvenioSubResponseModel : Swift.Codable {
  public var result: Swift.String, totalregistros: Swift.String
  public var convenios: BPDCoreLibrary.BPDConveniosSub
  public init()
  public init(result: Swift.String, totalregistros: Swift.String, convenios: BPDCoreLibrary.BPDConveniosSub)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDConveniosSub : Swift.Codable {
  public var convenio: [BPDCoreLibrary.BPDConvenioSub]
  public init()
  public init(convenio: [BPDCoreLibrary.BPDConvenioSub])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDConvenioSub : Swift.Codable, Swift.Hashable {
  public var detail: BPDCoreLibrary.BPDDetail
  public var empresa: BPDCoreLibrary.BPDEmpresa
  public init()
  public init(detail: BPDCoreLibrary.BPDDetail, empresa: BPDCoreLibrary.BPDEmpresa)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDConvenioSub, b: BPDCoreLibrary.BPDConvenioSub) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDDetail : Swift.Codable, Swift.Hashable {
  public let codConvenio: Swift.String, dscConvenio: Swift.String, cntConvenio: Swift.String, fecIniConvenio: Swift.String
  public let fecFinConvenio: Swift.String, fecAddConvenio: Swift.String, fecUpdConvenio: Swift.String, migrado: Swift.String
  public let aceptaPagoExpreso: Swift.String, dscRubro: Swift.String, codRubro: Swift.String
  public let codMoneda: Swift.String
  public let codEstadoconv: Swift.String
  public init()
  public init(codConvenio: Swift.String, dscConvenio: Swift.String, cntConvenio: Swift.String, fecIniConvenio: Swift.String, fecFinConvenio: Swift.String, fecAddConvenio: Swift.String, fecUpdConvenio: Swift.String, migrado: Swift.String, aceptaPagoExpreso: Swift.String, dscRubro: Swift.String, codRubro: Swift.String, codMoneda: Swift.String, codEstadoconv: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDDetail, b: BPDCoreLibrary.BPDDetail) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDEmpresa : Swift.Codable, Swift.Hashable {
  public let codEstadoEmp: Swift.String, codEmpresa: Swift.String, docEmpresa: Swift.String, nombreEmpresa: Swift.String
  public let razonSocialEmpresa: Swift.String
  public init()
  public init(codEstadoEmp: Swift.String, codEmpresa: Swift.String, docEmpresa: Swift.String, nombreEmpresa: Swift.String, razonSocialEmpresa: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDEmpresa, b: BPDCoreLibrary.BPDEmpresa) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RemittanceHistory : Swift.Identifiable {
  final public let errorCode: Swift.String
  final public let errorDescription: Swift.String
  final public let remittanceTrxDate: Swift.String
  final public let mainInfo: BPDCoreLibrary.RemittanceHistoryMainInfo
  final public let otherInfo: BPDCoreLibrary.RemittanceHistoryOtherInfo
  final public let trxInfo: BPDCoreLibrary.RemittanceTRXInfo
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
public struct RemittanceHistoryMainInfo {
  public let amount: Swift.Double
  public let cambiodivisa: Swift.String
  public let currency: Swift.String
  public let remittanceDate: Swift.String
  public let monedapago: Swift.String
  public let montoapagar: Swift.Double
  public let montopago: Swift.Double
  public let ordenante: Swift.String
  public let errordescription: Swift.String
  public let trxType: Swift.String
  public let paymentChannel: Swift.String
  public let accredited: Swift.String
}
public struct RemittanceHistoryOtherInfo {
  public let remesabpd: Swift.String
  public let responseCode: Swift.String
  public let subtransactiontype: Swift.String
  public let tasa: Swift.Double
  public let tasapago: Swift.Double
  public let transactiontype: Swift.String
  public let channel: Swift.String
  public let errorcode: Swift.String
  public let creditAccountNumber: Swift.String
  public let creditAccountCurrency: Swift.String
  public let claimRemittance: Swift.String
  public let accountDepositAccepted: Swift.String
}
public struct RemittanceTRXInfo {
  public let trxDate: Swift.String
  public let entity: Swift.String
  public let remittance: Swift.String
  public let trxStatusValidation: Swift.String
  public let mType: Swift.String
}
public struct Sector {
  public let districtCode: Swift.String
  public let sectorCode: Swift.String
  public let name: Swift.String
  public init(districtCode: Swift.String, sectorCode: Swift.String, name: Swift.String)
}
public enum CategoryQuestion : Swift.String {
  case pEP
  case oFAC
  case address
  case employment
  case membership
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol BPDTransactionsUserCaseDelegate : AnyObject {
  func eventSuccessTransactions(response: [BPDCoreLibrary.BPDTransactionHistoricalResponseModel])
  func eventErrorTransactions(message: Swift.String)
  func eventSuccessTransactionDetail(response: BPDCoreLibrary.BPDTransactionHistoricalResponseModel)
  func eventErrorTransactionDetail(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDTransactionsUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDTransactionsUserCaseDelegate)?
  public init()
  public func requestTransactions(model: BPDCoreLibrary.BPDTransactionHistoricalModel)
  public func requestTransactionDetail(transactionModel: BPDCoreLibrary.BPDTransactionHistoricalResponseModel)
  @objc deinit
}
public struct SharesCertificates : Swift.Hashable {
  public let shareholderNumber: Swift.String?
  public let shareholderName: Swift.String?
  public let certificateNumber: Swift.String?
  public let sharesNumber: Swift.String?
  public let certificateOpeningDate: Swift.String?
  public let certificateDeliveredDate: Swift.String?
  public let certificateCancelledDate: Swift.String?
  public let certificateState: Swift.String?
  public init(shareholderName: Swift.String = "", shareholderNumber: Swift.String = "", certificateNumber: Swift.String = "", sharesNumber: Swift.String = "", certificateOpeningDate: Swift.String = "", certificateDeliveredDate: Swift.String = "", certificateCancelledDate: Swift.String = "", certificateState: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.SharesCertificates, b: BPDCoreLibrary.SharesCertificates) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct AssociateCertificateRequestModel : Swift.Codable {
  public var period: Swift.String
  public var alias: Swift.String
  public var idProduct: Swift.String
  public var product: Swift.String
  public var amount: Swift.String
  public var rate: Swift.String
  public var destinationAccount: Swift.String
  public var accountType: Swift.String
  public var accountFrom: Swift.String
  public var accountTypeFrom: Swift.String
  public var moneyFrom: Swift.String
  public init(period: Swift.String, alias: Swift.String, idProduct: Swift.String, product: Swift.String, amount: Swift.String, rate: Swift.String, destinyAccount: Swift.String, accountType: Swift.String, accountFrom: Swift.String, accountTypeFrom: Swift.String, moneyFrom: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDRemittancePaymentRequestModel {
  public var remittanceNumber: Swift.String?
  public var accountType: Swift.String?
  public var correlID: Swift.String?
  public var accountNumber: Swift.String?
  public var currencyAccount: BPDCoreLibrary.Currency?
  public var entity: Swift.String?
  public var operatorName: Swift.String?
  public var cambioDivisa: Swift.Bool?
  public var otherInfo: BPDCoreLibrary.BPDRemittancePaymentOtherInfoRequestModel?
  public init()
  public init(remittanceNumber: Swift.String, accountType: Swift.String, correlID: Swift.String, accountNumber: Swift.String, entity: Swift.String, operatorName: Swift.String, otherInfo: BPDCoreLibrary.BPDRemittancePaymentOtherInfoRequestModel? = nil, cambioDivisa: Swift.Bool, currencyAccount: BPDCoreLibrary.Currency)
}
public struct BPDRemittancePaymentOtherInfoRequestModel {
  public var receiverOccupation: Swift.String
  public var receivePurposeTrx: Swift.String
  public var relationShipToSender: Swift.String
  public var receiverIntended: Swift.String
  public init()
  public init(receiverOccupation: Swift.String, receivePurposeTrx: Swift.String, relationShipToSender: Swift.String, receiverIntended: Swift.String)
}
public struct MunicipalityDistricts {
  public let municipalityCode: Swift.String
  public let districtCode: Swift.String
  public let name: Swift.String
  public init(municipalityCode: Swift.String, districtCode: Swift.String, name: Swift.String)
}
public struct LoanPaymentInput : Swift.Codable {
  public init(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDPayLoanUserCaseDelegate : AnyObject {
  func payLoanError(message: Swift.String)
  func payLoanReceiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func payLoanProcessed(result: BPDCoreLibrary.BPDPaymentResponseModel)
  func payLoanReceiveTokenSignal(id: Swift.String)
  func payLoanInvalidUserState()
  func payLoanReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class BPDPayLoanUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDPayLoanUserCaseDelegate)?
  public init()
  public func loanPayment()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func proceedWithPayment()
  @objc deinit
}
public struct CreditCardDetailsRequestModel : Swift.Codable {
  public let number: Swift.String
  public let currency: Swift.String
  public init(number: Swift.String, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PinCreditObject {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
}
public protocol CreditCardWithdrawalUseCaseDelegate : AnyObject {
  func creditCardWithdrawalResponse(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TransactionPaymentResult>)
  func receiveTokenSignal(id: Swift.String)
  func receiveBiometricSignal(id: Swift.String)
}
@_hasMissingDesignatedInitializers public class CreditCardWithdrawalUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CreditCardWithdrawalUseCaseDelegate)?
  public init()
  public func prepareCreditCardWithdrawal(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func proceedWithCreditCardWithdrawal()
  @objc deinit
}
public struct BPDStatementInquiryRequestModel {
  public var number: Swift.String?
  public var currency: Swift.String?
  public var statement: BPDCoreLibrary.BPDStatementInquiry?
  public init(number: Swift.String? = nil, currency: Swift.String? = nil, statement: BPDCoreLibrary.BPDStatementInquiry? = nil)
}
public struct BalanceQuickViewResponseModel : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDTransactionResponseAction {
  public let action: BPDCoreLibrary.BPDTransactionActionCode
  public let id: Swift.String
  public init(action: BPDCoreLibrary.BPDTransactionActionCode, id: Swift.String = "")
}
@frozen public enum BPDTransactionActionCode {
  case challenge
  case deny
  case allow
  case question
  case email
  case error
  case paymentProcessed
  case cashCodeProcessed
  case multiCurrency(result: BPDCoreLibrary.BPDMulticurrencyTransactionResponseModel)
}
public enum TransactionType : Swift.String {
  case payExpress
  case biometricPayExpress
  case transfer, betweenBPDAccounts
  case loanPay
  case login
  case loanWithDraw
  case creditCard
  case creditCardProcessWithDraw
  case servicePayment
  case thirdPartyAccounts
  case thirdPartyPayment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AnalizeTransactionType {
  case payExpress
  case biometricPayExpress
  case betweenBPDAccounts
  case cashCode
  case login
  case loan
  case contractPayment
  case checking
  case creditCard
  case none
  public var rawValue: Swift.String {
    get
  }
  public static func == (a: BPDCoreLibrary.AnalizeTransactionType, b: BPDCoreLibrary.AnalizeTransactionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AnalyzeTypeTransaction {
  case transfer
  case expressPayment
  case biometricExpressPayment
  case loanPayment
  case loanWithDraw
  case creditCardProcessPayment
  case creditCardProcessWithDraw
  case servicePayment
  case none
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public static func == (a: BPDCoreLibrary.AnalyzeTypeTransaction, b: BPDCoreLibrary.AnalyzeTypeTransaction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum BPDOtpTransaction {
  case success(BPDCoreLibrary.BPDTransactionFlowType)
  case again
  case deny
}
@frozen public enum BPDQuestionsTransaction {
  case success(BPDCoreLibrary.BPDTransactionFlowType)
  case again
  case deny
}
@frozen public enum BPDBiometricTransaction {
  case success(BPDCoreLibrary.BPDTransactionFlowType)
  case again
  case deny
}
@frozen public enum BPDTransactionFlowType {
  case resultPayments(BPDCoreLibrary.BPDPaymentResponseModel)
  case servicePayment(BPDCoreLibrary.BPDContractPaymentResponseModel)
  case remittanceProcess(BPDCoreLibrary.BPDRemittancePaymentResponseModel)
  case payQr(BPDCoreLibrary.BPDPayQrResponseModel)
  case login(BPDCoreLibrary.BPDAuthenticateResponseModel)
  case cashCode(BPDCoreLibrary.BPDCashCodeResponseModel)
  case changeCashCode(BPDCoreLibrary.BPDChangeOTPResponseModel)
  case beneficiaryServiceCrud(BPDCoreLibrary.BeneficiaryPaymentDetail)
  case addInterbankBeneficiary
  case creditCardActivaction(BPDCoreLibrary.BPDCreditCardActivactionResponse)
  case creditCardActivactionMod(BPDCoreLibrary.CCActivation)
  case hideAccount(BPDCoreLibrary.HideAccount)
  case changeAliasAccount(BPDCoreLibrary.ChangeAlias)
  case changePassword(BPDCoreLibrary.ChangePasswordResponse)
  case ccInfo(BPDCoreLibrary.BPDCreditCardInfoResponseModel)
  case increaseLimit(BPDCoreLibrary.IncreaseLimitResponse)
  case orchestratorPaymentResult(BPDCoreLibrary.TransactionPaymentResult)
  case servicePaymentEFT(BPDCoreLibrary.BPDPaymentEft)
  case popularBeneficiaryCrud
}
public struct CreditCardFDRTransactionsHistoricalRequestModel : Swift.Codable {
  public let number: Swift.String?
  public let currency: Swift.String?
  public let action: Swift.String?
  public init(number: Swift.String?, currency: Swift.String?, action: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TokenLisOptions : Swift.String, Swift.Codable, Swift.CaseIterable {
  case active
  case all
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.TokenLisOptions]
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.TokenLisOptions] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct DetailQuestion : Swift.Identifiable, Swift.Equatable {
  public static func == (lhs: BPDCoreLibrary.DetailQuestion, rhs: BPDCoreLibrary.DetailQuestion) -> Swift.Bool
  public let id: Foundation.UUID
  public let _id: Swift.Int
  public let label: Swift.String
  public let responseType: Swift.String
  public let responseList: Swift.String
  public let questionSource: Swift.Int
  public let questionSourceResponse: Swift.Int
  public let surveyType: Swift.String
  public let questionCode: Swift.Int
  public let dataType: Swift.String
  public let questionRefCode: Swift.Int
  public let required: Swift.Bool
  public let defaultValue: Swift.String
  public let order: Swift.Int
  public let urlEndpointList: Swift.String
  public let category: BPDCoreLibrary.CategoryQuestion
  public var answerQuestion: BPDCoreLibrary.AnswerQuestion
  public var questionValue: Swift.String
  public var questionDate: Foundation.Date
  public var type: BPDCoreLibrary.TypeQuestion {
    get
  }
  public init(_id: Swift.Int, label: Swift.String, responseType: Swift.String, responseList: Swift.String, questionSource: Swift.Int, questionSourceResponse: Swift.Int, surveyType: Swift.String, questionCode: Swift.Int, dataType: Swift.String, questionRefCode: Swift.Int, required: Swift.Bool, defaultValue: Swift.String, order: Swift.Int, urlEndpointList: Swift.String, category: BPDCoreLibrary.CategoryQuestion, answerQuestion: BPDCoreLibrary.AnswerQuestion, questionValue: Swift.String, questionDate: Foundation.Date)
  public typealias ID = Foundation.UUID
}
public struct GenerateEmailTokenRequestModel {
  public let email: Swift.String
  public init(email: Swift.String)
}
public struct BPDDashboardAccountList : Swift.Identifiable {
  public let id: Foundation.UUID
  public let number: Swift.String
  public let type: Swift.String
  public let currency: Swift.String
  public let alias: Swift.String
  public typealias ID = Foundation.UUID
}
public struct BPDDashboardAccountModel : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let type: Swift.String
  public let number: Swift.String
  public let currency: Swift.String
  public let currentBalance: Swift.Double
  public let workingBalance: Swift.Double
  public let alias: Swift.String
  public let accountRelation: Swift.String
  public let hidden: Swift.Bool
  public let bin: Swift.String
  public var urlSm: Swift.String
  public var urlLg: Swift.String
  public var productName: Swift.String
  public let transactionsAllowed: Swift.Bool?
  public let prodCode: Swift.String?
  public init()
  public init(type: Swift.String, number: Swift.String, currency: Swift.String, currentBalance: Swift.Double, workingBalance: Swift.Double, alias: Swift.String, accountRelation: Swift.String, hidden: Swift.Bool, bin: Swift.String, urlSm: Swift.String, urlLg: Swift.String, productName: Swift.String, transactionsAllowed: Swift.Bool?, prodCode: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDDashboardAccountModel, b: BPDCoreLibrary.BPDDashboardAccountModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct SectorFilterOutput : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let generalCode: Swift.String
  public let province: Swift.String
  public let municipality: Swift.String
  public let district: Swift.String
  public let sector: Swift.String
  public init(generalCode: Swift.String, province: Swift.String, municipality: Swift.String, district: Swift.String, sector: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.SectorFilterOutput, b: BPDCoreLibrary.SectorFilterOutput) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct RemittanceGetResponseModel : Swift.Codable {
  public var payment: BPDCoreLibrary.Payment?
  public var error: BPDCoreLibrary.ErrorRemittancePrepareDTO?
  public var transaction: BPDCoreLibrary.Transaction?
  public var correlId: Swift.String?
  public var remittanceNumber: Swift.String?
  public var accountType: Swift.String?
  public var aliasAccount: Swift.String?
  public var accountNumber: Swift.String?
  public var entity: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateComplaintResponseModel : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let reclaimNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDGoalsUserCaseDelegate : AnyObject {
  func eventSuccess(response: [BPDCoreLibrary.BPDGoalsModel])
  func eventError(message: Swift.String)
  func saveSuccess(message: Swift.String)
  func saveError(message: Swift.String)
  func deleteSuccess(message: Swift.String)
  func deleteError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDGoalsUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDGoalsUserCaseDelegate)?
  public init()
  public func requestGoals()
  public func saveGoal(name: Swift.String, amount: Swift.Double, executionDay: Swift.Int, term: Swift.Int, account: BPDCoreLibrary.BPDDashboardAccountModel)
  public func deleteGoals(goalId: Swift.Int, accountNumber: Swift.String)
  @objc deinit
}
public struct BeneficiaryPaymentObject : Swift.Decodable {
  public let id: Swift.String?
  public let subscriptionCode: Swift.String?, itemCode: Swift.String?, itemDescription: Swift.String?, categoryCode: Swift.String?
  public let categoryDescription: Swift.String?, companyCode: Swift.String?, companyDescription: Swift.String?, contractNumber: Swift.String?
  public let email: Swift.String?, alias: Swift.String?, date: Swift.String?, lastPaymentDate: Swift.String?
  public let lastBalancePayment: Swift.String?
  public let acceptCardPayment: Swift.String?, exactPayment: Swift.String?, acceptExpressPayment: Swift.String?
  public let migrated: Swift.String?
  public init(id: Swift.String?, subscriptionCode: Swift.String?, itemCode: Swift.String?, itemDescription: Swift.String?, categoryCode: Swift.String?, categoryDescription: Swift.String?, companyCode: Swift.String?, companyDescription: Swift.String?, contractNumber: Swift.String?, email: Swift.String?, alias: Swift.String?, date: Swift.String?, lastPaymentDate: Swift.String?, lastBalancePayment: Swift.String?, acceptCardPayment: Swift.String?, exactPayment: Swift.String?, acceptExpressPayment: Swift.String?, migrated: Swift.String?)
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChangeAliasRequestModel : Swift.Codable {
  public let alias: Swift.String
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public init(alias: Swift.String, accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ServicePaymentInput : Swift.Codable {
  public init(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDOfficeLocationsOutput : Swift.Codable {
  public let errorCode: Swift.String, errorDescription: Swift.String
  public let response: [BPDCoreLibrary.BPDOfficeLocationsResponseOutput]
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", response: [BPDCoreLibrary.BPDOfficeLocationsResponseOutput] = [])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDOfficeLocationsResponseOutput : Swift.Codable, Swift.Hashable {
  public let pdsPdi: Swift.String?, tipoX002DPDSPDI: Swift.String?, espacioF: Swift.String?
  public let cantCarriles: Swift.String?, motocaja: Swift.String?, mcCantCarriles: Swift.String?
  public let cantTrnsCte: Swift.String?, cantMXBilletes: Swift.String?, mmPagoCk: Swift.String?, mmRetCta: Swift.String?
  public let depositos: Swift.String?, tipoDpst: Swift.String?, denBilletes: Swift.String?
  public let codAUC: Swift.String?, autocaja: Swift.String?, cajerosX0020Automaticos: Swift.String?, depositorio: Swift.String?
  public let arCaja: Swift.String?, arNegs: Swift.String?, arPlat: Swift.String?, facilidadesBOCmovil: Swift.String?
  public let limitacionesBOCmovil: Swift.String?, telCen: Swift.String?, hl24HLX002DJ: Swift.String?, hl24HV: Swift.String?
  public let hl24HS: Swift.String?, hl24HD: Swift.String?, hlAPIs: Swift.String?, dirFis: Swift.String?
  public let referencia: Swift.String?, sector: Swift.String?, municipio: Swift.String?, provincia: Swift.String?
  public let siglasProv: Swift.String?, region: Swift.String?, oneProvKm2: Swift.String?
  public let xLon: Swift.Double?, yLat: Swift.Double?
  public let dirFisCns: Swift.String?, wifi: Swift.String?, abiertoCovid: Swift.String?, accesibilidad: Swift.String?
  public let itemX0020Type1: Swift.String?, path1: Swift.String?, itemX0020Type2: Swift.String?, path2: Swift.String?
  public let id: Swift.Int?
  public let modified: Swift.String?, created: Swift.String?
  public let authorID: Swift.Int?, editorID: Swift.Int?
  public let oDataUIVersionString: Swift.String?
  public let attachments: Swift.Bool?
  public let guid: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDOfficeLocationsResponseOutput, b: BPDCoreLibrary.BPDOfficeLocationsResponseOutput) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SiebelNewProductStatusResponseModel : Swift.Codable {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let response: BPDCoreLibrary.responseSiebel?
  public init(errorCode: Swift.String? = "", errorDescription: Swift.String? = "", response: BPDCoreLibrary.responseSiebel? = responseSiebel())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct responseSiebel : Swift.Codable {
  public let bpdOpportunityGc: [BPDCoreLibrary.BpdOpportunityGc]?
  public let cardList: [BPDCoreLibrary.CardList]?
  public init(bpdOpportunityGc: [BPDCoreLibrary.BpdOpportunityGc]? = [BpdOpportunityGc()], cardList: [BPDCoreLibrary.CardList]? = [CardList()])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BpdOpportunityGc : Swift.Codable {
  public let requestId: Swift.String?
  public let channel: Swift.String?
  public let createdByName: Swift.String?
  public let creationDate: Swift.String?
  public let name: Swift.String?
  public let preapprovedLimitDOP: Swift.String?
  public let requestStatus: Swift.String?
  public let aprovedDeferredLimit: Swift.String?
  public let bpdRequestId: Swift.String?
  public let preapprovedLimitUSD: Swift.String?
  public let preapprovedFee: Swift.String?
  public let preapprovedStatus: Swift.String?
  public let preapprovedAmount: Swift.String?
  public let foreseenClosingDate: Swift.String?
  public let createdByService: Swift.Bool?
  public let analystDecisionReason: Swift.String?
  public let automaticEvalDecisionReason: Swift.String?
  public init(requestId: Swift.String? = "", channel: Swift.String? = "", createdByName: Swift.String? = "", creationDate: Swift.String? = "", name: Swift.String? = "", preapprovedLimitDOP: Swift.String? = "", requestStatus: Swift.String? = "", aprovedDeferredLimit: Swift.String? = "", bpdRequestId: Swift.String? = "", preapprovedLimitUSD: Swift.String? = "", preapprovedFee: Swift.String? = "", preapprovedStatus: Swift.String? = "", preapprovedAmount: Swift.String? = "", foreseenClosingDate: Swift.String? = "", createdByService: Swift.Bool = false, analystDecisionReason: Swift.String? = "", automaticEvalDecisionReason: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardList : Swift.Codable {
  public let productId: Swift.String?
  public let previousProductId: Swift.String?
  public let productName: Swift.String?
  public let benefit1: Swift.String?
  public let benefit2: Swift.String?
  public let benefit3: Swift.String?
  public let brand: Swift.String?
  public let cardType: Swift.String?
  public init(productId: Swift.String? = "", previousProductId: Swift.String? = "", productName: Swift.String? = "", benefit1: Swift.String? = "", benefit2: Swift.String? = "", benefit3: Swift.String? = "", brand: Swift.String? = "", cardType: Swift.String? = "")
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Municipality : Swift.Hashable {
  public var provinceCode: Swift.String
  public var municipalityCode: Swift.String
  public var name: Swift.String
  public init(provinceCode: Swift.String, municipalityCode: Swift.String, name: Swift.String)
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.Municipality, b: BPDCoreLibrary.Municipality) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct RegisterFirebaseTokenRequestModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol DynamicFormOnboardingUseCaseDelegate : AnyObject {
  func sendLoanDynamicFormResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.LoanDynamicFormOutput>)
  func sendExtraCreditResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ExtraCreditOutput>)
  func sendCreditCardResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreditCardDynamicFormOutput>)
}
@_hasMissingDesignatedInitializers public class DynamicFormOnboardingUseCase {
  weak public var dynamicFormOBDelegate: (any BPDCoreLibrary.DynamicFormOnboardingUseCaseDelegate)?
  public init()
  public func sendLoanDynamicFormRequest(model: BPDCoreLibrary.LoanDynamicFormInput)
  public func sendExtraCreditRequest(model: BPDCoreLibrary.ExtraCreditInput)
  public func sendCreditCardRequest(model: BPDCoreLibrary.CreditCardDynamicFormInput)
  @objc deinit
}
public struct BPDCashCodeFavRequestModel {
  public init(document: Swift.String, alias: Swift.String)
}
public struct BPDObCreateResponseDetail {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let response: Swift.String
}
public struct BeneficiariesDebts : Swift.Hashable {
  public let subscriptionCode: Swift.String
  public let itemCode: Swift.String
  public let itemDesc: Swift.String
  public let agreementCode: Swift.String
  public let agreementDesc: Swift.String
  public let companyCode: Swift.String
  public let contractNumber: Swift.String
  public let alias: Swift.String
  public let date: Swift.String
  public let acceptCreditCardPayment: Swift.Bool
  public let exactPayment: Swift.Bool
  public let acceptRecurrentPayment: Swift.Bool
  public let acceptExpressPayment: Swift.Bool
  public let migrated: Swift.Bool
  public let debts: [BPDCoreLibrary.BeneficiaryDebt]
  public init(subscriptionCode: Swift.String? = "", itemCode: Swift.String? = "", itemDesc: Swift.String? = "", agreementCode: Swift.String? = "", agreementDesc: Swift.String? = "", companyCode: Swift.String? = "", contractNumber: Swift.String? = "", alias: Swift.String? = "", date: Swift.String? = "", acceptCreditCardPayment: Swift.Bool? = true, exactPayment: Swift.Bool? = true, acceptRecurrentPayment: Swift.Bool? = true, acceptExpressPayment: Swift.Bool? = true, migrated: Swift.Bool? = true, debts: [BPDCoreLibrary.BeneficiaryDebt] = [])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiariesDebts, b: BPDCoreLibrary.BeneficiariesDebts) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDError : Swift.Error, Foundation.LocalizedError {
  public var code: Swift.Int {
    get
  }
  public var errorCode: Swift.String
  public var status: BPDCoreLibrary.BPDError.Status
  public var debugDescription: Swift.String?
  public enum Status : Swift.Int {
    case unknown
    case networkUnreachable
    case unauthorize
    case empty
    case notFound
    case incompatibleResponse
    case unavailable
    case invalidUserState
    case duplicatedTransaction
    case invalidSession
    case invalidOTPTokenFormat
    case splitEnrollOTPError
    case splitEnrollError
    case onBoardingUnauthorize
    case onBoardingUnableToGetQuestions
    case onBoardingAlreadyCalled
    case onBoardingUnabletoSendOTP
    case badRequest
    case forbidden
    case onBoardingUnabletoSaveQuestions
    case onBoardingUnableToGetContract
    case onBoardingUnableToAcceptContract
    case onBoardingUnableToCreateClient
    case onBoardingUnableToCreateProduct
    case onBoardingUnableToCreateCredentials
    case onBoardingUnableToCreateToken
    case onBoardingUnableToGetEndpoint
    case sslCertificateError
    case internalServerError
    case serviceUnavailable
    case unableToParseCedula
    case badGateway
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol QrPaymentUseCaseDelegate : AnyObject {
  func createQrSuccess(model: BPDCoreLibrary.BPDCreateQrResponseModel)
  func createQrError(message: Swift.String)
  func viewDataQrSuccess(model: BPDCoreLibrary.ViewDataQrResponseModel)
  func viewDataQrError(message: Swift.String)
  func paymentQrSuccess(model: BPDCoreLibrary.BPDPayQrResponseModel)
  func paymentQrError(message: Swift.String)
  func receiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func receiveInvalidUserState()
  func tokenOTPQrPayment(id: Swift.String)
  func resultQrImage(image: UIKit.UIImage?)
  func paymentQrReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
  func decodedDataQrUrlResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ViewDataQrResponseModel>, _ amount: Swift.Double?)
}
@_hasMissingDesignatedInitializers public class QrPaymentUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.QrPaymentUseCaseDelegate)?
  public init()
  public func createQr(model: BPDCoreLibrary.CreateQrRequestModel)
  public func viewDataQr(model: BPDCoreLibrary.ViewDataQrRequestModel)
  public func paymentQr(model: BPDCoreLibrary.BPDPaymentQrRequestModel)
  public func getQrPayloads(nameImage: Swift.String)
  public func readQRImageFromGallery(qrImage: UIKit.UIImage) -> Swift.String?
  public func proceedWithPayment()
  public func getQrUrl(_ amount: Swift.Double? = nil) -> Swift.String?
  public func decodeQrUrl(_ qrUrl: Swift.String)
  @objc deinit
}
public protocol BPDAccountDetailsCaseDelegate : AnyObject {
  func eventSuccessAccountDetail(response: BPDCoreLibrary.BPDAccountDetailsResponseModel)
  func eventErrorAccountDetail(message: Swift.String)
  func eventSuccessAccountOwnerDetail(response: BPDCoreLibrary.BPDAccountDetailsOwner)
  func eventErrorAccountOwnerDetail(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDAccountDetailsUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDAccountDetailsCaseDelegate)?
  public init()
  public func requestAccountDetails(model: BPDCoreLibrary.BPDAccountDetailsModel)
  public func requestAccountOwnerDetails(accountNumber: Swift.String)
  @objc deinit
}
public protocol UserInfoUseCaseDelegate : AnyObject {
  func getUserInfoResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.UserInfoResponseModel>)
  func getUserInfoFromPreferencesResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.UserInfoCacheModel>)
}
public protocol UserRecoveryUseCaseEventDelegate : AnyObject {
  func recoverUserResponse(_ result: Swift.Result<BPDCoreLibrary.BPDUserRecoveryResponseModel, BPDCoreLibrary.BPDError>)
}
@_hasMissingDesignatedInitializers public class UserInfoUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.UserInfoUseCaseDelegate)?
  weak public var userRecoveryUseCaseEventDelegate: (any BPDCoreLibrary.UserRecoveryUseCaseEventDelegate)?
  public init()
  public func getUserInfo()
  public func getUserInfoFromPreferences()
  public func recoverUser(requestModel: BPDCoreLibrary.BPDUserRecoveryRequestModel)
  @objc deinit
}
public struct DetailsCreditCardFDR {
  public let dueDate: Swift.String
  public let cutOffDate: Swift.String
  public let currentBalance: Swift.String
  public let cutOffBalance: Swift.String
  public let debt: Swift.String
  public let minPayment: Swift.String
  public let number: Swift.String
}
public struct SaveGoalRequestModel {
  public init(name: Swift.String, account: BPDCoreLibrary.BPDDashboardAccountModel, amount: Swift.Double, executionDay: Swift.Int, term: Swift.Int)
}
@objc public protocol BPDCoreSdkEventDelegate {
  @objc func eventStatus(status: BPDCoreLibrary.BPDStatus)
  @objc func infoRSAMobile(info: Swift.String)
  @objc func appVersionOutdated(minimumRequiredVersion: Swift.String)
  @objc func sdkVersionOutdated(minimumRequiredVersion: Swift.String)
}
@objc public protocol DeviceAttestationEventDelegate {
  @objc func deviceAttestResponse(isSuccess: Swift.Bool)
}
@objc @frozen public enum BPDStatus : Swift.Int {
  case noInitializated = 0
  case initialized = 1
  case unAuthorized = 2
  case withActiveSession = 3
  case sessionExpired = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class BPDCoreSdk : ObjectiveC.NSObject {
  public static let shared: BPDCoreLibrary.BPDCoreSdk
  public var eventDelegate: (any BPDCoreLibrary.BPDCoreSdkEventDelegate)?
  public var deviceAttestationEventDelegate: (any BPDCoreLibrary.DeviceAttestationEventDelegate)?
  public func enableMock()
  public func disableMock()
  public static func initialize(apiKey: Swift.String, apikeyV10: Swift.String? = nil, baseURLV10: Swift.String? = nil, baseURL: Swift.String, redirectUri: Swift.String, beaconUrl: Swift.String, applicationID: Swift.String, publicKeys: [Swift.String], publickKeysV10: [Swift.String]? = nil, isModularized: Swift.Bool = false, isCoreLibEnabled: Swift.Bool = true, unleashToken: Swift.String? = nil, enableUnleash isUnleashEnabled: Swift.Bool = false)
  public func checkStatus()
  public func checkUser(user: Swift.Bool, sessionUser: Swift.String)
  public func logout()
  public func getRSAMobileSDKInfo()
  public func initDynatrace()
  public func getFirstTime() -> Swift.Bool
  public func setFirstTime(isFirstTime: Swift.Bool)
  public func getBiometricEnabled() -> Swift.Bool
  public func setBiometricEnabled(enabled: Swift.Bool)
  public func trackSession(_ value: Swift.Bool = true)
  public func unrollment()
  @objc override dynamic public init()
  @objc deinit
}
extension BPDCoreLibrary.BPDCoreSdk {
  public func identifyDynatraceUser(userID: Swift.String)
  public func identifyDynatraceUser(onbUserID: Swift.String)
  public func shutdownDynatrace()
}
extension BPDCoreLibrary.BPDCoreSdk : BPDCoreLibrary.BPDDeviceUserCaseDelegate {
  public func deviceAttestResponse(_ result: BPDCoreLibrary.BPDResult, state: Swift.String)
}
extension BPDCoreLibrary.BPDCoreSdk : BPDCoreLibrary.SupportedVersionUserCaseDelegate {
  public func getSupportedVersionResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SupportedVersionResponseModel>)
}
extension BPDCoreLibrary.BPDCoreSdk : BPDCoreLibrary.DeviceRegistrationUseCaseDelegate {
  public func registerDeviceResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DeviceRegistrationStatus>)
  public func getSupportedVersionResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SupportedVersionResponseModel>)
}
public struct DetailsCreditCardFDRRequestModel : Swift.Codable {
  public var number: Swift.String?
  public var currency: Swift.String?
  public init(number: Swift.String?, currency: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ApplePayOauthUseCaseDelegate : AnyObject {
  func tokenInquiryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TokenInquiryOutput>)
  func changeStatusResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TokenMaintenanceOutput>)
  func debitTokenResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DebitTokenOutput>)
}
@_hasMissingDesignatedInitializers public class ApplePayOauthUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ApplePayOauthUseCaseDelegate)?
  public init()
  public func getTokenInquiry(model: BPDCoreLibrary.TokenInquiryInput)
  public func changeStatus(model: BPDCoreLibrary.TokenMaintenanceInput)
  public func getDebitToken(model: BPDCoreLibrary.DebitTokenInput)
  @objc deinit
}
public struct BPDOfficeLocationsInput : Swift.Codable {
  public init(municipality: Swift.String, province: Swift.String, branchType: BPDCoreLibrary.BranchTypeValues)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class DateUtils {
  public static func dateToISO8601(_ date: Foundation.Date) -> Swift.String
  @objc deinit
}
public enum RSAEventType : Swift.String {
  case addBeneficiaryPayment
  case editBeneficiaryPayment
  case deleteBeneficiaryPayment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol RiskManagementUseCaseDelegate : AnyObject {
  func authenticateTokenSuccess(response: BPDCoreLibrary.BPDOtpTransaction)
  func authenticateTokenError(response: BPDCoreLibrary.BPDError)
  func authenticateQuestionarySuccess(response: BPDCoreLibrary.BPDQuestionsTransaction)
  func authenticateQuestionaryError(response: BPDCoreLibrary.BPDError)
  func authenticateTokenResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDOtpTransaction>)
  func authenticateQuestionaryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDQuestionsTransaction>)
}
@_hasMissingDesignatedInitializers public class RiskManagementUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RiskManagementUseCaseDelegate)?
  public init()
  public func autenticateTokenNotify(model: BPDCoreLibrary.AuthenticateTokenRequestModel)
  public func autenticateQuestionary(id: Swift.String, model: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  @objc deinit
}
public struct BPDPaymentResponseModel {
  public let transRes: BPDCoreLibrary.BPDTransRes?
  public let errorCode: Swift.String?, errorDesc: Swift.String?
  public static let defaultValue: BPDCoreLibrary.BPDPaymentResponseModel
}
public struct BPDOrquestadorPagosRes : Swift.Decodable {
  public let transRes: BPDCoreLibrary.BPDTransRes?
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDTransRes : Swift.Decodable {
  public let transactionType: Swift.String?
  public let reference: Swift.String?
  public let result: Swift.String?
  public let date: Swift.String?
  public let code: Swift.String?
  public let description: Swift.String?
  public let backendAuthNumber: Swift.String?
  public let ccAuthNumber: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDConventionSubRequestModel {
  public let codRubro: Swift.String
  public let codRecaudador: Swift.String
  public let codConvenio: Swift.String
  public let docEmpresa: Swift.String
  public let nomEmpresa: Swift.String
  public let codProducto: Swift.String
  public let codEstado: Swift.String
  public let codCanal: Swift.String
  public let numPagina: Swift.String
  public let canRegistro: Swift.String
  public init()
  public init(codRecaudador: Swift.String, codConvenio: Swift.String, docEmpresa: Swift.String, nomEmpresa: Swift.String, codProducto: Swift.String, codEstado: Swift.String, codCanal: Swift.String, numPagina: Swift.String, canRegistro: Swift.String, codRubro: Swift.String)
}
public struct BPDAccountDetailsResponseModel {
  public let appId: Swift.String?
  public let number: Swift.String?
  public let type: Swift.String?
  public let currency: Swift.String?
  public let name: Swift.String?
  public let docType: Swift.String?
  public let custCIF: Swift.String?
  public let acctOpeningDay: Swift.String?
  public let actualBalance: Swift.Double?
  public let availableBalance: Swift.Double?
  public let transitBalance: Swift.Double?
  public let initialBalance: Swift.Double?
  public let liquidationbalanceLast12Months: Swift.Double?
  public let averageBalanceLast12Months: Swift.Double?
  public let actualMonthAverageBalance: Swift.Double?
  public let lastSettlementBalance: Swift.Double?
  public let blocks: Swift.Double?
  public let checkCreditAccount: Swift.String?
  public let overdraftDays: Swift.Int?
  public let onlineBooking: Swift.Double?
  public let annualRedeemedMiles: Swift.Int?
  public let custSeg: Swift.String?
  public let acctToProvide: Swift.String?
  public let acctToProvideType: Swift.String?
  public let status: Swift.String?
  public let milesDate: Swift.String?
  public let nextSettlementDate: Swift.String?
  public let lastSettlementDate: Swift.String?
  public let expirationDateACA: Swift.String?
  public let indCheckCreditAccount: Swift.String?
  public let earnedUnpaidInterest: Swift.Double?
  public let lineLimitReservation: Swift.Double?
  public let remainingLimit: Swift.Double?
  public let annualMilesGained: Swift.Int?
  public let annualExpirationMiles: Swift.Int?
  public let lineBalanceACA: Swift.Double?
  public let pledgedAmount: Swift.Double?
  public let overdraftAmountTOD: Swift.Double?
  public let productName: Swift.String?
  public let acctOfficer: Swift.String?
  public let ownsVisaDebit: Swift.Bool?
  public let regionalAcct: Swift.String?
  public let relation: Swift.String?
  public let regionalAcctStatus: Swift.String?
  public let interestRate: Swift.Double?
  public let lineRateACA: Swift.Double?
  public let overdraftRateTOD: Swift.Double?
  public let totalAccumulatedMiles: Swift.Int?
  public let transitDay1_TRANSIT_DAY_1: Swift.Double?
  public let transitDay2: Swift.Double?
  public let transitDay3: Swift.Double?
  public let transitDay4: Swift.Double?
  public let transitDay5: Swift.Double?
  public let transitDay6: Swift.Double?
  public let useACA: Swift.String?
  public let monthlyFee: Swift.Double?
  public let nextPaymentDate: Swift.String?
  public let linkedAccount: Swift.String?
  public let productNumber: Swift.String?
  public let nextInterestPaymentDate: Swift.String?
  public let expirationDate: Swift.String?
  public init(appId: Swift.String, number: Swift.String, type: Swift.String, currency: Swift.String, name: Swift.String, docType: Swift.String, custCIF: Swift.String, acctOpeningDay: Swift.String, actualBalance: Swift.Double, availableBalance: Swift.Double, transitBalance: Swift.Double, initialBalance: Swift.Double, liquidationbalanceLast12Months: Swift.Double, averageBalanceLast12Months: Swift.Double, actualMonthAverageBalance: Swift.Double, lastSettlementBalance: Swift.Double, blocks: Swift.Double, checkCreditAccount: Swift.String?, overdraftDays: Swift.Int, onlineBooking: Swift.Double, custSeg: Swift.String, acctToProvide: Swift.String, acctToProvideType: Swift.String, status: Swift.String, milesDate: Swift.String, nextSettlementDate: Swift.String, lastSettlementDate: Swift.String, expirationDateACA: Swift.String, indCheckCreditAccount: Swift.String, earnedUnpaidInterest: Swift.Double, lineLimitReservation: Swift.Double, remainingLimit: Swift.Double, annualMilesGained: Swift.Int, annualRedeemedMiles: Swift.Int, annualExpirationMiles: Swift.Int, lineBalanceACA: Swift.Double, pledgedAmount: Swift.Double, overdraftAmountTOD: Swift.Double, productName: Swift.String, acctOfficer: Swift.String, ownsVisaDebit: Swift.Bool, regionalAcct: Swift.String, relation: Swift.String, regionalAcctStatus: Swift.String, interestRate: Swift.Double, lineRateACA: Swift.Double, overdraftRateTOD: Swift.Double, totalAccumulatedMiles: Swift.Int, transitDay1_TRANSIT_DAY_1: Swift.Double, transitDay2: Swift.Double, transitDay3: Swift.Double, transitDay4: Swift.Double, transitDay5: Swift.Double, transitDay6: Swift.Double, useACA: Swift.String, monthlyFee: Swift.Double, nextPaymentDate: Swift.String, linkedAccount: Swift.String, productNumber: Swift.String, nextInterestPaymentDate: Swift.String, expirationDate: Swift.String)
  public init(type: Swift.String, currency: Swift.String, name: Swift.String)
}
public struct BPDAccountOwnDetailsResponseModel {
  public let type: Swift.String
  public let currency: Swift.String
  public let name: Swift.String
  public init(type: Swift.String, currency: Swift.String, name: Swift.String)
}
public protocol FirebaseTokenManagerUserCaseDelegate : AnyObject {
  func registerFirebaseTokenResult(result: Swift.Result<BPDCoreLibrary.RegisterFirebaseTokenResponseModel, BPDCoreLibrary.BPDError>)
}
@_hasMissingDesignatedInitializers public class FirebaseTokenManagerUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.FirebaseTokenManagerUserCaseDelegate)?
  public init()
  public func registerFirebaseToken(firebaseToken: Swift.String)
  @objc deinit
}
public struct BPDCustomerInfoResponseModel : Swift.Decodable {
  public let name: Swift.String?
  public let lastName: Swift.String?
  public let segment: Swift.String?
  public let birthdate: Swift.String?
  public let sex: Swift.String?
  public let documentType: Swift.String?
  public let docNumber: Swift.String?
  public let occupationCategory: Swift.String?
  public let civilStatus: Swift.String?
  public let rnc: Swift.String?
  public let cif: Swift.String?
  public let phones: [BPDCoreLibrary.BPDCustomerPhones]?
  public let emails: [BPDCoreLibrary.BPDCustomerEmails]?
  public init(name: Swift.String?, lastName: Swift.String?, segment: Swift.String?, birthdate: Swift.String?, sex: Swift.String?, documentType: Swift.String?, docNumber: Swift.String?, occupationCategory: Swift.String?, civilStatus: Swift.String?, rnc: Swift.String?, cif: Swift.String?, phones: [BPDCoreLibrary.BPDCustomerPhones]?, emails: [BPDCoreLibrary.BPDCustomerEmails]?)
  public init(name: Swift.String?, lastName: Swift.String?)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDCustomerPhones : Swift.Decodable {
  public let id: Swift.Int?
  public let type: Swift.String?
  public let phone: Swift.String?
  public init(id: Swift.Int?, type: Swift.String?, phone: Swift.String?)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDCustomerEmails : Swift.Decodable {
  public let id: Swift.Int?
  public let type: Swift.String?
  public let email: Swift.String?
  public init(id: Swift.Int?, type: Swift.String?, email: Swift.String?)
  public init()
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDFDRCCHistoricalTransactionsResponseModel {
  public let response: BPDCoreLibrary.BPDFDRResponseObject?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
}
public struct BPDFDRResponseObject {
  public let creditCardResponse: BPDCoreLibrary.BPDCreditCardFDRResponse?
  public let transactions: BPDCoreLibrary.BPDTransactionFDRObject?
}
public struct BPDFDRResult {
  public let bpdCreditCardFDRResponse: BPDCoreLibrary.BPDCreditCardFDRResponse?
  public let bpdTransactionsFDR: [BPDCoreLibrary.BPDTransactionFDR]?
  public init(bpdCreditCardFDRResponse: BPDCoreLibrary.BPDCreditCardFDRResponse?, bpdTransactionsFDR: [BPDCoreLibrary.BPDTransactionFDR]?)
  public init()
}
public struct BPDTransactionFDRObject {
  public let transaction: [BPDCoreLibrary.BPDTransactionFDR]?
}
public struct BPDTransactionFDR : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.String?
  public let postDate: Swift.String?
  public let reference: Swift.String?
  public let description: Swift.String?
  public let amount: Swift.String?
  public let fee: Swift.String?
  public let amountOfFees: Swift.String?
  public let deadlines: Swift.String?
  public let isFee: Swift.String?
  public let inTransit: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDTransactionFDR, b: BPDCoreLibrary.BPDTransactionFDR) -> Swift.Bool
  public typealias ID = Swift.String?
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDCreditCardFDRResponse {
  public let number: Swift.String?
  public let balance: Swift.String?
  public let creditLimit: Swift.String?
  public let creditAvailable: Swift.String?
  public let cutOffDate: Swift.String?
  public let dueDateCc: Swift.String?
  public let dueFees: Swift.String?
  public let minPayment: Swift.String?
  public let monthlyPayment: Swift.String?
  public let cutOffBalance: Swift.String?
  public let paymentDate: Swift.String?
  public let dueAmount: Swift.String?
  public let previousBalance: Swift.String?
  public init(number: Swift.String?, balance: Swift.String?, creditLimit: Swift.String?, creditAvailable: Swift.String?, cutOffDate: Swift.String?, dueDateCc: Swift.String?, dueFees: Swift.String?, minPayment: Swift.String?, monthlyPayment: Swift.String?, cutOffBalance: Swift.String?, paymentDate: Swift.String?, dueAmount: Swift.String?, previousBalance: Swift.String?)
  public init()
}
public protocol DetailsCreditCardUserCaseDelegate : AnyObject {
  func statementInquiryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDStatementInquiryResponseModel>, errorCode: Swift.String, errorDescription: Swift.String)
  func entityInquiryResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDEntityInquiryResponseModel>)
  func creditCardActivationResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDCreditCardActivactionResponse>)
  func creditCardInfoResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDCreditCardInfoResponseModel>)
  func receiveTokenSignal(id: Swift.String)
  func invalidUserState()
}
@_hasMissingDesignatedInitializers public class DetailsCreditCardUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.DetailsCreditCardUserCaseDelegate)?
  public init()
  public func statementInquiry(model: BPDCoreLibrary.BPDStatementInquiryRequestModel)
  public func entityInquiry(model: BPDCoreLibrary.BPDEntityInquiryRequestModel)
  public func creditCardActivation(model: BPDCoreLibrary.BPDCreditCardActivationRequestModel)
  public func creditCardInfo(model: BPDCoreLibrary.BPDCreditCardInfoRequestModel)
  @objc deinit
}
public struct CreateQrResponseModel : Swift.Codable {
  public var createUserQrResponse: BPDCoreLibrary.CreateUserQrResponse?
  public var errorMessage: Swift.String?
  public var errorCode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateUserQrResponse : Swift.Codable {
  public var qrPayload: Swift.String?
  public var url: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDCustomerInfoCaseDelegte : AnyObject {
  func infoResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDCustomerInfoResponseModel>)
}
public class BPDCustomerInfoUserCase {
  weak public var eventInfoDelegate: (any BPDCoreLibrary.BPDCustomerInfoCaseDelegte)?
  public init()
  public func infoRequest()
  @objc deinit
}
public protocol BPDAuthenticateTokenOTPUserCaseDelegate : AnyObject {
  func authenticateTokenOTPSuccess(response: BPDCoreLibrary.BPDOtpTransaction)
  func authenticateTokenOTPError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDAuthenticateTokenOTPUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDAuthenticateTokenOTPUserCaseDelegate)?
  public init()
  public func validateTokenAuthentication(model: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestModel)
  @objc deinit
}
public struct PopularBeneficiaryInput : Swift.Codable {
  public var alias: Swift.String
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public let transactionId: Swift.String
  public init(alias: Swift.String, accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String)
  public init(accountNumber: Swift.String, accountType: Swift.String, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAnalyzeRequestModel {
}
public struct BPDGoalsList : Swift.Identifiable {
  public let id: Foundation.UUID
  public let goalID: Swift.Int
  public let accountNumber: Swift.String
  public typealias ID = Foundation.UUID
}
public struct BPDGoalsModel : Swift.Identifiable, Swift.Hashable {
  public let id: Foundation.UUID
  public let goalAmount: Swift.Double
  public let goalID: Swift.Int
  public let currentTerm: Swift.Int
  public let docNumber: Swift.String
  public let currency: Swift.String
  public let dayOfExecution: Swift.Int
  public let goalName: Swift.String
  public let currentAmount: Swift.Double
  public let term: Swift.Int
  public let accountNumber: Swift.String
  public let holdID: Swift.String
  public let status: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDGoalsModel, b: BPDCoreLibrary.BPDGoalsModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct CreateCreditCardInput {
  public let idSolicitud: Swift.String
  public let colorTarjeta: Swift.String
  public let canalRecepcion: Swift.String
  public let nombreTitularTarjeta: Swift.String
  public let entregaPlastico: Swift.String
  public let facilidad: Swift.String
  public let direccionEntrega: Swift.String
  public let virtual: Swift.String
  public let printDigitalCard: Swift.String
  public let emailRecepcion: Swift.String
  public let sucursalEntrega: Swift.String
  public init(idSolicitud: Swift.String, colorTarjeta: Swift.String, canalRecepcion: Swift.String, nombreTitularTarjeta: Swift.String, entregaPlastico: Swift.String, facilidad: Swift.String, direccionEntrega: Swift.String, virtual: Swift.String, printDigitalCard: Swift.String, emailRecepcion: Swift.String, sucursalEntrega: Swift.String)
}
public protocol CeduladosUseCaseDelegate : AnyObject {
  func getCeduladosResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.Cedulado>)
}
@_hasMissingDesignatedInitializers public class CeduladosUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CeduladosUseCaseDelegate)?
  public init()
  public func getCedulados(model: BPDCoreLibrary.CeduladoRequestModel)
  @objc deinit
}
public struct ProductDetailsRequestModel : Swift.Codable {
  public init(numeroCuenta: Swift.String, tipoCuenta: Swift.String, moneda: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol OnBoardingUseCaseDelegate : AnyObject {
  func eventQuestionResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnboardingQuestions>)
  func eventError(error: BPDCoreLibrary.BPDError)
  func eventSurveyOccupationResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SurveyInfo>)
  func eventProvincesResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.Provinces]>)
  func eventMunicipalitiesResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.Municipality]>)
  func eventMunicipalitiesDistrictResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.MunicipalityDistricts]>)
  func eventSectorResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.Sector]>)
  func eventSectorFilterResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.SectorFilterOutput]>)
  func eventCategoryByEndpointTypeResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CategoryInfo>)
  func eventProgressResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnBoardingProgress>)
  func eventUpdateProgressResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnBoardingProgress>)
  func saveQuestionResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
  func addAnswerByCategoryResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
  func eventTermsAndConditionsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TermsAndConditions>)
  func eventPostQuestionResponse(_ response: BPDCoreLibrary.BPDResults<Swift.Void>)
}
@_hasMissingDesignatedInitializers public class OnBoardingUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.OnBoardingUseCaseDelegate)?
  public init()
  public func getCategoryByEndpointType(endpointType: Swift.String)
  public func getQuestions(questionType: BPDCoreLibrary.QuestionType)
  public func saveQuestions(categoryQuestion: BPDCoreLibrary.CategoryQuestion, detailsQuestion: [BPDCoreLibrary.DetailQuestion])
  public func getQuestionsAnswer(questionType: BPDCoreLibrary.QuestionType)
  public func getProvinces()
  public func getMunicipalities(idProvince: Swift.String)
  public func getMunicipalitiesDistrict(idProvinceMun: Swift.String)
  public func getSectors(idProvinceDistrict: Swift.String)
  public func getSectorsFilter(model: BPDCoreLibrary.SectorFilterInput)
  public func getSurveyOccupation(occupation: Swift.String)
  public func addAnswerByCategory(answer: BPDCoreLibrary.OnboardingAnswer)
  public func getTermsAndConditions(name: BPDCoreLibrary.ContractType)
  public func postQuestions(otp: Swift.String)
  public func postQuestionsV2()
  public func getProgress()
  public func updateProgress(progress: BPDCoreLibrary.ProgressOnBoarding)
  @objc deinit
}
extension BPDCoreLibrary.OnBoardingUseCase {
  public func questionsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnboardingQuestions>)
  public func error(error: BPDCoreLibrary.BPDError)
  public func termsAndConditionsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.TermsAndConditions>)
  public func saveQuestionResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
  public func addAnswerByCategoryResponse(_ result: BPDCoreLibrary.BPDResults<Swift.Bool>)
}
public struct CreateComplaintRequestModel {
  public let srNumber: Swift.String
  public let notes: Swift.String
  public let status: Swift.String
  public init(srNumber: Swift.String, notes: Swift.String, status: Swift.String)
}
public struct ExtraCreditInput {
  public let statusId: Swift.String, statusDescription: Swift.String, configFormId: Swift.String, categoryTypeId: Swift.String
  public let creditScoringId: Swift.String
  public let opportunityId: Swift.String, accountNumber: Swift.String, approvedLimit: Swift.String, referredBy: Swift.String
  public let fixedTermRate: Swift.String
  public let debtorInsurance: Swift.String, approvedintratev: Swift.String, approvedamtv: Swift.String, approvedmonthV: Swift.String
  public let opportunityAmtV: Swift.String
  public init(statusId: Swift.String, statusDescription: Swift.String, configFormId: Swift.String, categoryTypeId: Swift.String, creditScoringId: Swift.String, opportunityId: Swift.String, accountNumber: Swift.String, approvedLimit: Swift.String, referredBy: Swift.String, fixedTermRate: Swift.String, debtorInsurance: Swift.String, approvedintratev: Swift.String, approvedamtv: Swift.String, approvedmonthV: Swift.String, opportunityAmtV: Swift.String)
}
public struct BPDAgreementCategory : Swift.Codable, Swift.Hashable {
  public var id: Swift.String, category: Swift.String, rubro: Swift.String
  public init()
  public init(id: Swift.String, category: Swift.String, rubro: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDAgreementCategory, b: BPDCoreLibrary.BPDAgreementCategory) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OnBoardingProgress {
  public var identification: Swift.String
  public var progress: BPDCoreLibrary.ProgressOnBoarding?
  public init(identification: Swift.String, progress: BPDCoreLibrary.ProgressOnBoarding?)
}
@_hasMissingDesignatedInitializers public class NetworkReporterDynatraceManager {
  public static let shared: BPDCoreLibrary.NetworkReporterDynatraceManager
  public func setDTXAction(name: Swift.String)
  public func leaveDTXAction()
  public func setBeaconHeaders(headers: [Swift.String : Swift.String]?)
  public func getRequestTagValue(url: Foundation.URL?) -> Swift.String
  public func getRequestTagHeader() -> Swift.String
  public func startWebRequestTiming(url: Foundation.URL?)
  public func stopWebRequestTiming(statusCode: Swift.String)
  public func shutdownDynatrace()
  public func reportValue(withName: Swift.String, stringValue: Swift.String)
  @objc deinit
}
public protocol BPDAuthenticateCaseDelegate : AnyObject {
  func eventSuccess(response: BPDCoreLibrary.BPDQuestionsTransaction)
  func eventError(message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDAuthenticateUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDAuthenticateCaseDelegate)?
  public init()
  public func validateAutenticate(id: Swift.String, model: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  @objc deinit
}
public struct BPDCreditCardInfoResponseModel {
  public let cvv: Swift.String?
  public let name: Swift.String?
  public let expDate: Swift.String?
  public let cardNumber: Swift.String?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public init(cvv: Swift.String? = "", name: Swift.String? = "", expiryDate: Swift.String? = "", cardNumber: Swift.String? = "", errorCode: Swift.String? = "", errorDescription: Swift.String? = "")
}
public struct CreateClaimResponseModel {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let reclaimNumber: Swift.String
}
public protocol OnboardingCompletionUseCaseDelegate : AnyObject {
  func createResponse(response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnBoardingCreateResponseType>)
  func clearCacheResponse(response: BPDCoreLibrary.BPDResult)
  func sendContractResponse(response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class OnboardingCompletionUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.OnboardingCompletionUseCaseDelegate)?
  public init()
  public func createProduct(model: BPDCoreLibrary.CreateProductRequestModel)
  public func createProductV2(model: BPDCoreLibrary.CreateProductRequestModel, enableSendContract: Swift.Bool = true)
  public func createCredentials(model: BPDCoreLibrary.CreateCredentialsRequestModel)
  public func createCredentialsV2(model: BPDCoreLibrary.CreateCredentialsRequestModel)
  public func createUser()
  public func createUserV2()
  public func createToken()
  public func createTokenV2()
  public func sendContractV2()
  public func createLoan(model: BPDCoreLibrary.CreateLoanInput, enableSendContract: Swift.Bool = true)
  public func createCreditCardProduct(model: BPDCoreLibrary.CreateCreditCardInput, enableSendContract: Swift.Bool = true)
  public func clearCache()
  @objc deinit
}
extension BPDCoreLibrary.OnboardingCompletionUseCase {
  public func createResponse(response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnBoardingCreateResponseType>)
}
public struct RemittanceRetryOutput : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let transaction: BPDCoreLibrary.RemittanceTransactionOutput?
  public init(errorCode: Swift.String, errorDescription: Swift.String, transaction: BPDCoreLibrary.RemittanceTransactionOutput)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittanceTransactionOutput : Swift.Codable {
  public init(convertedAmount: Swift.Double, convertedCurrency: Swift.String, correlId: Swift.String, date: Swift.String, exchangeRate: Swift.Int, referenceNumber: Swift.String, remittanceAmount: Swift.Int, remittanceCurrency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RemittanceRetryUseCaseDelegate : AnyObject {
  func retryRemittanceResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.RemittanceRetryOutput>)
  func receiveChallengeSignal(type: BPDCoreLibrary.AnalyzeChallenge)
}
@_hasMissingDesignatedInitializers public class RemittanceRetryUseCase {
  weak public var remittanceRetryDelegate: (any BPDCoreLibrary.RemittanceRetryUseCaseDelegate)?
  public init()
  public func retryRemittance(model: BPDCoreLibrary.RemittanceRetryInput, transactionData: BPDCoreLibrary.RemittanceTransactionDataInput)
  public func callTokenNotifyRemittanceRetry(token: Swift.String)
  public func callBiometricNotifyRemittanceRetry(minutias: BPDCoreLibrary.Minutias)
  @objc deinit
}
public struct SiebelCreateProductOutput : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let response: BPDCoreLibrary.ResponseCreateProductOutput?
  public init(errorCode: Swift.String, errorDescription: Swift.String, response: BPDCoreLibrary.ResponseCreateProductOutput)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ResponseCreateProductOutput : Swift.Codable {
  public let creaOptyOutput: BPDCoreLibrary.CreaOptyOutput
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreaOptyOutput : Swift.Codable {
  public let errorSpcCode: Swift.String?, errorSpcMessage: Swift.String?, requestId: Swift.String?, optyNumber: Swift.String?, requestNumber: Swift.String?, optyID: Swift.String?, instalment: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContactNumberModel {
  public var identifier: Swift.String
  public var phoneNumber: Swift.String
  public var splitIdentifier: Swift.String
  public var phoneIdentifier: Swift.String
  public var isFavorite: Swift.Bool
  public var transactionCounter: Swift.Int
}
public struct BPDSplitRequestSMS {
  public init(phone: Swift.String, type: Swift.String)
}
public struct PendingTransactionOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public var transactionObject: [BPDCoreLibrary.PendingTranObject]
  public init(errorCode: Swift.String, errorDescription: Swift.String, transactionObject: [BPDCoreLibrary.PendingTranObject])
}
public struct PendingTranObject : Swift.Identifiable {
  public var id: Foundation.UUID
  public let amount: Swift.Double
  public let date: Swift.String
  public let authStatus: Swift.String
  public let description: Swift.String
  public typealias ID = Foundation.UUID
}
public protocol CashCodeUseCaseDelegate : AnyObject {
  func requestOTPResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.RequestOTPResult>)
  func receiveTokenSignal(transactionId: Swift.String)
  func receiveBiometricSignal(transactionId: Swift.String)
  func cancelOTPResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CancelOTPResult>)
  func getHistoricalOTPResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDHistoricalOTPResponseModel>)
  func changeOTPResult(_ response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDChangeOTPResponseModel>)
  func getAllCashCodeFavoritesResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDCashCodeFavResponseModel]>)
  func cashCodeResult(_ response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class CashCodeUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CashCodeUseCaseDelegate)?
  public init()
  public func requestOTP(model: BPDCoreLibrary.BPDCodigoCashRequestModel)
  public func cancelOTP(transactionId: Swift.String)
  public func changeOTP(model: BPDCoreLibrary.BPDHistoricoResponseDTO, montoRetiro: Swift.Double, telefono: Swift.String)
  public func getHistoricalOTP()
  public func getAllCashCodeFavorites()
  public func addCashCodeFavorite(model: BPDCoreLibrary.BPDCashCodeFavRequestModel)
  public func updateCashCodeFavorite(model: BPDCoreLibrary.BPDUpdateCashCodeFavRequestModel)
  public func deleteCashCodeFavorite(id: Swift.String)
  public func requestOTPForMe(model: BPDCoreLibrary.CashCodeForMeRequestModel)
  @objc deinit
}
public struct BPDTransactionHistoricalModel {
  public init()
  public init(numero: Swift.String, tipo: Swift.String, moneda: Swift.String, fromDate: Foundation.Date, toDate: Foundation.Date)
}
public struct OnBoardingFormModel : Swift.Identifiable {
  public let realmId: Foundation.UUID
  public let label: Swift.String
  public let responseType: Swift.String
  public let responseList: Swift.String
  public let questionSource: Swift.Int
  public let questionSourceResponse: Swift.Int
  public let surveyType: Swift.String
  public let questionCode: Swift.Int
  public let dataType: Swift.String
  public let questionRefCode: Swift.Int
  public let required: Swift.Bool
  public let defaultValue: Swift.String
  public let order: Swift.Int
  public let urlEndpointList: Swift.String
  public let id: Swift.Int
  public let section: Swift.String
  public var dropDownList: [BPDCoreLibrary.DropDownModel]
  public var dropDownSelected: BPDCoreLibrary.DropDownModel
  public var questionValue: Swift.String
  public var questionDate: Foundation.Date
  public var type: BPDCoreLibrary.OnBoardingFormEnum {
    get
  }
  public init(realmId: Foundation.UUID, label: Swift.String, responseType: Swift.String, responseList: Swift.String, questionSource: Swift.Int, questionSourceResponse: Swift.Int, surveyType: Swift.String, questionCode: Swift.Int, dataType: Swift.String, questionRefCode: Swift.Int, required: Swift.Bool, defaultValue: Swift.String, order: Swift.Int, urlEndpointList: Swift.String, id: Swift.Int, section: Swift.String, dropDownList: [BPDCoreLibrary.DropDownModel], dropDownSelected: BPDCoreLibrary.DropDownModel, questionValue: Swift.String, questionDate: Foundation.Date)
  public typealias ID = Swift.Int
}
public enum OnBoardingFormEnum {
  case textField
  case list
  case boolList
  case endpointList
  case checkBox
  case dateTime
  case error
  public static func == (a: BPDCoreLibrary.OnBoardingFormEnum, b: BPDCoreLibrary.OnBoardingFormEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AuthenticationLoginUseCaseDelegate : AnyObject {
  func analyzeResponse(_ response: BPDCoreLibrary.BPDResults<Swift.String>)
  func receiveTokenSignal(code: Swift.String)
  func receiveTokenQuestions(id: Swift.String, questions: [BPDCoreLibrary.BPDRiskChallengeDetailToken], accessToken: Swift.String)
  func rememberUserResponse(_ response: BPDCoreLibrary.BPDResults<Swift.Bool>)
  func userResponse(_ response: BPDCoreLibrary.BPDResults<Swift.String>)
  func logoutResponse(_ response: BPDCoreLibrary.BPDResult)
  func unrollResponse(_ response: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class AuthenticationLoginUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.AuthenticationLoginUseCaseDelegate)?
  public init()
  public func loginByCredentials(user: BPDCoreLibrary.BPDLoginModel)
  public func loginByBiometrics(user: BPDCoreLibrary.BPDLoginModel)
  public func logout()
  public func unrollment()
  public func rememberUser(name: Swift.String)
  public func getUser()
  @objc deinit
}
public struct AvailableClaimsRequestModel {
  public let description: Swift.String
  public let currency: Swift.String
  public let amount: Swift.String
  public let productType: Swift.String
  public init(description: Swift.String, currency: Swift.String, amount: Swift.String, productType: Swift.String)
}
public struct BPDGetDebitCardDetailsResponseModel : Swift.Identifiable {
  public let id: Foundation.UUID
  public let accountNumber: Swift.String?
  public let accountType: Swift.String?
  public let currency: Swift.String?
  public let maskedNumber: Swift.String?
  public let productCode: Swift.String?
  public typealias ID = Foundation.UUID
}
public struct OnboardingImgDocRequestModel {
}
public struct ChangeAlias {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String, errorDescription: Swift.String)
}
public struct OnboardingValidateUserResponseModel : Swift.Decodable {
  public let errorDescription: Swift.String?
  public let errorCode: Swift.String?
  public let response: BPDCoreLibrary.OnboardingValidateUserResponse?
  public init(errorDescription: Swift.String?, errorCode: Swift.String?, response: BPDCoreLibrary.OnboardingValidateUserResponse?)
  public init(from decoder: any Swift.Decoder) throws
}
public struct OnboardingValidateUserResponse : Swift.Codable {
  public let nombres: Swift.String?
  public let calle: Swift.String?
  public let casa: Swift.String?
  public let lastname1: Swift.String?
  public let lastname2: Swift.String?
  public init(nombres: Swift.String?, calle: Swift.String?, casa: Swift.String?, lastname1: Swift.String?, lastname2: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol BPDAgreementQueryUserCaseDelegate : AnyObject {
  func convenioServiceSuccess(response: BPDCoreLibrary.BPDConvenioResponseModel)
  func convenioServiceError(message: Swift.String)
  func convenioSubSuccess(response: BPDCoreLibrary.BPDConvenioSubResponseModel)
  func convenioSubError(message: Swift.String)
  func contratoServiceSuccess(response: BPDCoreLibrary.BPDContractResponseModel)
  func contratoServiceError(message: Swift.String)
  func receiveInvalidUserState()
  func tokenOTPContractPayment(id: Swift.String)
  func receiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func transactionProcessed(result: BPDCoreLibrary.BPDContractPaymentResponseModel)
  func transactionError(message: Swift.String)
  func transactionEventSuccess(result: (BPDCoreLibrary.BPDTransactionResponseAction, BPDCoreLibrary.BPDContractPaymentResponseModel?))
  func transactionEventError(message: Swift.String)
  func payContractReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class BPDAgreementQueryUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDAgreementQueryUserCaseDelegate)?
  public init()
  public func convenioService()
  public func convenioSub(model: BPDCoreLibrary.BPDConventionSubRequestModel)
  public func convenioSubByRecharge(model: BPDCoreLibrary.BPDConventionSubRequestModel)
  public func contratoService(model: BPDCoreLibrary.BPDContractRequestModel)
  public func contractPayment(model: BPDCoreLibrary.BPDContractPaymentModel)
  public func proceedWithPayment()
  @objc deinit
}
public struct AuthenticateTokenOTPRequestModel : Swift.Codable {
  public init(model: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestModel)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAuthenticateTokenOTPRequestModel {
  public init(id: Swift.String, codigo: Swift.String)
}
public struct ThalesCards : Swift.Codable, Swift.Hashable {
  public var cardUid: Swift.String?
  public var state: Swift.String?
  public var cardType: Swift.String?
  public var terminal: Swift.String?
  public let exp: Swift.String?
  public let title: Swift.String?
  public let bin: Swift.String?
  public let bimage: Swift.String?
  public init(cardUid: Swift.String, state: Swift.String, cardType: Swift.String, terminal: Swift.String, exp: Swift.String?, title: Swift.String?, bin: Swift.String?, bimage: Swift.String?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.ThalesCards, b: BPDCoreLibrary.ThalesCards) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReduceThalesCards : Swift.Codable, Swift.Hashable {
  public init(cardUid: Swift.String?, state: Swift.String?, cardType: Swift.String?, terminal: Swift.String?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.ReduceThalesCards, b: BPDCoreLibrary.ReduceThalesCards) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAccountDetailsModel {
  public let numeroCuenta: Swift.String
  public let tipoCuenta: Swift.String
  public let moneda: Swift.String
  public init(numeroCuenta: Swift.String, tipoCuenta: Swift.String, moneda: Swift.String)
}
public protocol BPDPayExpressUserCaseDelegate : AnyObject {
  func payExpressError(message: Swift.String)
  func payExpressReceiveQuestion(id: Swift.String, questionIdentifier: Swift.String, question: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func payExpressProcessed(result: BPDCoreLibrary.BPDPaymentResponseModel)
  func payExpressReceiveTokenSignal(id: Swift.String)
  func payExpressReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
  func payExpressInvalidUserState()
  func payExpressReceiveMultiCurrencyData(result: BPDCoreLibrary.BPDMulticurrencyTransactionResponseModel)
  func payExpressReceiveBiometric(id: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDPayExpressUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDPayExpressUserCaseDelegate)?
  public init()
  public func expressPayment()
  public func preparePayment(accountFrom: Swift.String, accountTo: Swift.String, amountFrom: Swift.Double, amountTo: Swift.Double)
  public func proceedWithPayment()
  public func proceedWithBiometricPayment()
  public func prepareBiometricPayment(accountFrom: Swift.String, accountTo: Swift.String, amount: Swift.Double)
  @objc deinit
}
public enum MaskNumber : Swift.String, Swift.Codable, Swift.CaseIterable {
  case withNumber
  case withoutNumber
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.MaskNumber]
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.MaskNumber] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol ChangeAliasUseCaseDelegate : AnyObject {
  func changeAliasAccountResult(response: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ChangeAlias>)
  func receiveTokenSignal(transactionId: Swift.String)
}
@_hasMissingDesignatedInitializers public class ChangeAliasUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ChangeAliasUseCaseDelegate)?
  public init()
  public func changeAliasAccount(model: BPDCoreLibrary.ChangeAliasRequestModel)
  @objc deinit
}
public struct BPDAuthenticateTokenOTPRequestResponseModel : Swift.Decodable {
  public let response: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestResponse?
  public let errorDescription: Swift.String?
  public let errorCode: Swift.String?
  public init(errorCode: Swift.String, errorDescription: Swift.String, response: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestResponse)
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAuthenticateTokenOTPRequestResponse : Swift.Codable {
  public let response: BPDCoreLibrary.BPDAuthenticateTokenOTPRequestResponse.Response
  public let errorDescription: Swift.String, errorCode: Swift.String
  public struct Response : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DeviceRequest : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DeviceIdentifier : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RiskResult : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ChallengeDetail : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ChallengeDetailToken : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct TokenToken : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct UserVerification : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct SessionInfo : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDTransactionRequestModel {
  public init(originAccount: Swift.String, originCurrency: Swift.String, originType: Swift.String, destinyAccount: Swift.String, destinyCurrency: Swift.String, destinyType: Swift.String, beneficiaryName: Swift.String, desc: Swift.String, amount: Swift.Double)
  public init()
}
public protocol MamServiceCaseDelegate : AnyObject {
  func mamResponse(_ result: BPDCoreLibrary.BPDResults<Swift.String>)
}
public class MamServiceUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.MamServiceCaseDelegate)?
  public init()
  public func postMAM(model: BPDCoreLibrary.BPDMamRequestModel)
  public func postMAMObjective(model: BPDCoreLibrary.BPDMamRequestModel) -> Swift.String
  @objc deinit
}
public struct BPDCodigoCashRequestModel {
  public init(telefono: Swift.String, monto: Swift.Double, cuenta: Swift.String, tipoCuenta: Swift.String, expiracion: Swift.String, moneda: Swift.String, montoCambioDivisa: Swift.Double, monedaDestino: Swift.String, montoRetiro: Swift.Double, centroCosto: Swift.String, nombreCliente: Swift.String, isFavorite: Swift.Bool, alias: Swift.String)
}
public struct BPDEntityInquiryResponseModel : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public let creditLimit: Swift.Double?
  public let currentBalance: Swift.Double?
  public let overdraftBalance: Swift.Double?
  public let cutOffDate: Swift.String?
  public let closingBalance: Swift.Double?
  public let minDue: Swift.Double?
  public let dueDate: Swift.String?
  public let maskNumber: Swift.String?
  public let expDate: Swift.String?
  public let status: Swift.String?
  public let isVirtual: Swift.Bool?
  public let generalStatus: Swift.String?
  public let primary: Swift.Bool?
  public let aditionalCards: [BPDCoreLibrary.BPDEntityInquiryResponseModel.BPDAditionalCards]?
  public let embossingName: Swift.String?
  public let lastRenewDate: Swift.String?
  public let isPrintableCard: Swift.Bool?
  public let nextStatementDate: Swift.String?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public struct BPDAditionalCards : Swift.Hashable, Swift.Identifiable {
    public let id: Foundation.UUID
    public let maskNumber: Swift.String?
    public let expDate: Swift.String?
    public let status: Swift.String?
    public let isVirtual: Swift.Bool?
    public let generalStatus: Swift.String?
    public let primary: Swift.Bool?
    public let embossingName: Swift.String?
    public let lastRenewDate: Swift.String?
    public let isPrintableCard: Swift.Bool?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: BPDCoreLibrary.BPDEntityInquiryResponseModel.BPDAditionalCards, b: BPDCoreLibrary.BPDEntityInquiryResponseModel.BPDAditionalCards) -> Swift.Bool
    public typealias ID = Foundation.UUID
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public init(creditLimit: Swift.Double?, currentBalance: Swift.Double?, overdraftBalance: Swift.Double?, cutOffDate: Swift.String?, closingBalance: Swift.Double?, expDate: Swift.String?, minDue: Swift.Double?, dueDate: Swift.String?, maskNumber: Swift.String?, status: Swift.String?, isVirtual: Swift.Bool?, generalStatus: Swift.String?, primary: Swift.Bool?, aditionalCards: [BPDCoreLibrary.BPDEntityInquiryResponseModel.BPDAditionalCards]?, embossingName: Swift.String?, lastRenewDate: Swift.String?, isPrintableCard: Swift.Bool?, nextStatementDate: Swift.String?, errorCode: Swift.String?, errorDescription: Swift.String?)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDEntityInquiryResponseModel, b: BPDCoreLibrary.BPDEntityInquiryResponseModel) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct BPDSearchPhoneResponseModel {
  public let phoneId: Swift.String
  public let userId: Swift.String
  public init(phoneId: Swift.String, userId: Swift.String)
}
public protocol OnboardingMemoryManagerProtocol {
  var questions: BPDCoreLibrary.Questions? { get set }
  var answers: [BPDCoreLibrary.SaveQuestionRequestModelAnswer]? { get set }
  func clean()
  func saveAnswers(id: Swift.Int, response: Swift.String, category: Swift.String)
  func putQuestion(detail: BPDCoreLibrary.QuestionDetail, response: Swift.String, category: Swift.String)
}
public enum QuestionType : Swift.String {
  case digital
  case simplified
  case simplifiedOB
  case digitalJO
  case digitalJOOrigin
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ThalesUseCaseDelegate : AnyObject {
  func thalesResult(_ result: BPDCoreLibrary.BPDResults<Swift.String>)
  func thalesCardsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.ThalesCards]>)
  func getJWTResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ThalesJWTResponse>)
  func getTokenizableCCResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ThalesGetTokenizableResponse>)
  func registerCCResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ThalesRegisterCCResponse>)
  func validateRegisterWithAppleResult(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.ThalesValidateRegisterCCResponse>)
}
@_hasMissingDesignatedInitializers public class ThalesUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ThalesUseCaseDelegate)?
  public init()
  public func getJWT()
  public func getTokenizableCC()
  public func registerCC(_ cardId: Swift.String)
  public func validateRegisterWithApple(_ cardId: Swift.String)
  @objc deinit
}
public struct CCInfoRequestModel : Swift.Codable {
  public let number: Swift.String
  public let expDate: Swift.String
  public init(number: Swift.String, expiryDate: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThalesToken : Swift.Codable {
  public let token: Swift.String?
  public let state: Swift.String?
  public let cardId: Swift.String?
  public init(token: Swift.String?, expiresIn: Swift.String?, state: Swift.String?, cardId: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThalesJWTResponse : Swift.Codable {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let response: BPDCoreLibrary.ThalesToken?
  public let cards: [BPDCoreLibrary.ReduceThalesCards]?
  public let userId: Swift.String?
  public init(status: Swift.String, errorCode: Swift.String?, errorDescription: Swift.String?, response: BPDCoreLibrary.ThalesToken?, cards: [BPDCoreLibrary.ReduceThalesCards]?, userId: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardActivationResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthenticateBiometricRequestModel : Swift.Codable {
  public init(id: Swift.String, minutia: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDAuthenticateBiometricRequestModel {
  public init(id: Swift.String, indexFinger: Swift.String, middleFinger: Swift.String, ringFinger: Swift.String, littleFinger: Swift.String)
}
public struct RegisterFirebaseTokenResponseModel : Swift.Codable {
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let response: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CancelOTPResult {
  public let message: Swift.String
}
@_hasMissingDesignatedInitializers public class AnalyzeHelperQuestion {
  @objc deinit
}
public struct BPDSplitEnrollRequestModel {
  public init(accountNumber: Swift.String, accountType: Swift.String, accountCurrency: Swift.String, emailAddress: Swift.String, phoneNumber: Swift.String, otpToken: Swift.String, countryCode: Swift.String)
}
public protocol RemittanceHistoricalUseCaseDelegate : AnyObject {
  func getRemittanceHistoricalResult(_ response: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.RemittanceHistory]>)
}
@_hasMissingDesignatedInitializers public class RemittanceHistoricalUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RemittanceHistoricalUseCaseDelegate)?
  public init()
  public func getRemittanceHistorical(model: BPDCoreLibrary.RemittanceHistoryRequestModel)
  @objc deinit
}
public struct AnswerRequestModel : Swift.Encodable {
  public var category: Swift.String
  public var answers: [BPDCoreLibrary.AnswerQuestionRequestModel]
  public init()
  public init(category: Swift.String, answers: [BPDCoreLibrary.AnswerQuestionRequestModel])
  public init(model: BPDCoreLibrary.OnboardingAnswer)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RemittanceListCatResponseModel : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct FDRCCHistoricalTransactionsResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDBiometricModel {
  public init()
  public init(device: Swift.String, cert: Swift.String, assertion: Swift.String)
  public init(device: Swift.String, assertion: Swift.String)
}
@_hasMissingDesignatedInitializers public class BPDObQuestionResponseModel {
  final public let realmId: Foundation.UUID
  final public let label: Swift.String
  final public let responseType: Swift.String
  final public let responseList: Swift.String
  final public let questionSource: Swift.Int
  final public let questionSourceResponse: Swift.Int
  final public let surveyType: Swift.String
  final public let questionCode: Swift.Int
  final public let dataType: Swift.String
  final public let questionRefCode: Swift.Int
  final public let required: Swift.Bool
  final public let defaultValue: Swift.String
  final public let order: Swift.Int
  final public let urlEndpointList: Swift.String
  final public let id: Swift.Int
  final public let section: Swift.String
  public var list: [BPDCoreLibrary.BPDObCategoryResponseModel]
  @objc deinit
}
public struct BPDObCategoryResponseModel {
  public let index: Swift.Int
  public let label: Swift.String
}
public enum OBQuestionaryType : Swift.String {
  case digital
  case simplified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol OnboardingTermsUseCaseDelegate : AnyObject {
  func acceptedContractResponse(result: BPDCoreLibrary.BPDResult)
  func contractResponse(result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.OnboardingContract>)
  func envelopeIdRegistrationResponse(result: BPDCoreLibrary.BPDResult)
  func getEnvelopeId(result: BPDCoreLibrary.BPDResults<Swift.String>)
  func imgDocRegistrationReponse(result: BPDCoreLibrary.BPDResult)
}
@_hasMissingDesignatedInitializers public class OnboardingTermsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.OnboardingTermsUseCaseDelegate)?
  public init()
  public func acceptContractV2(model: BPDCoreLibrary.OnboardingContractRequestModel)
  public func readContract(model: BPDCoreLibrary.OnboardingContractRequestModel)
  public func registerEnvelopeId(envelopedId: Swift.String)
  public func getEnvelopeId()
  public func imgDocRegistration(imgDoc: Swift.String)
  @objc deinit
}
public struct BeneficiaryOB : Swift.Hashable {
  public var alias: Swift.String
  public let accountNumber: Swift.String
  public let accountType: Swift.String
  public let currency: Swift.String
  public let bankName: Swift.String
  public let bankId: Swift.String
  public init(alias: Swift.String = "", accountNumber: Swift.String = "", accountType: Swift.String = "", currency: Swift.String = "", bankName: Swift.String = "", bankId: Swift.String = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiaryOB, b: BPDCoreLibrary.BeneficiaryOB) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PasswordSettingsUseCaseDelegate : AnyObject {
  func changePasswordResponse(_ response: BPDCoreLibrary.BPDResult)
  func receiveTokenSignal(transactionId: Swift.String)
}
public protocol ResetPasswordEventDelegate : AnyObject {
  func resetPasswordResponse(_ response: Swift.Result<BPDCoreLibrary.BPDResetPasswordResponseModel, BPDCoreLibrary.BPDError>)
}
@_hasMissingDesignatedInitializers public class PasswordSettingsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.PasswordSettingsUseCaseDelegate)?
  weak public var resetPasswordEventDelegate: (any BPDCoreLibrary.ResetPasswordEventDelegate)?
  public init()
  public func changePassword(_ model: BPDCoreLibrary.ChangePasswordRequestModel)
  public func resetPassword(requestModel: BPDCoreLibrary.BPDResetPasswordRequestModel)
  @objc deinit
}
public struct UserInfoResponseModel : Swift.Codable {
  public let name: Swift.String?
  public let lastName: Swift.String?
  public let segment: Swift.String?
  public let birthdate: Swift.String?
  public let sex: Swift.String?
  public let documentType: Swift.String?
  public let docNumber: Swift.String?
  public let occupationCategory: Swift.String?
  public let civilStatus: Swift.String?
  public let rnc: Swift.String?
  public let cif: Swift.String?
  public let phones: [BPDCoreLibrary.UserInforPhones]?
  public let emails: [BPDCoreLibrary.UserInfoEmails]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserInforPhones : Swift.Codable {
  public let type: Swift.String?
  public let phone: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserInfoEmails : Swift.Codable {
  public let type: Swift.String?
  public let email: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionPaymentResult {
  public let transactionType: Swift.String
  public let reference: Swift.String
  public let result: Swift.String
  public let date: Swift.String
  public let code: Swift.String
  public let description: Swift.String
  public let backendAuthNumber: Swift.String
  public let ccAuthNumber: Swift.String
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public static let defaultValue: BPDCoreLibrary.TransactionPaymentResult
}
public protocol CreditCardFDRUseCaseDelegate : AnyObject {
  func detailsCreditCardFDRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.DetailsCreditCardFDR>)
  func getCreditCardTransactionHistoricalFDRResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.CreditCardTransactionHistoricalFDR>)
}
@_hasMissingDesignatedInitializers public class CreditCardFDRUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.CreditCardFDRUseCaseDelegate)?
  public init()
  public func getDetailsCreditCardFDR(number: Swift.String, currency: Swift.String)
  public func getCreditCardTransactionHistoricalFDR(number: Swift.String, currency: Swift.String, action: Swift.String)
  @objc deinit
}
public struct PlanInquiryRequestModel : Swift.Codable {
  public let transactionType: Swift.String
  public let currency: Swift.String
  public let cardNumber: Swift.String
  public let numberOfPlans: Swift.String
  public init(transactionType: Swift.String, currency: Swift.String, cardNumber: Swift.String, numberOfPlans: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TokenMaintenanceOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let result: BPDCoreLibrary.TokenMaintenanceResultObject
}
public struct TokenMaintenanceResultObject : Swift.Codable {
  public let code: Swift.String
  public let subCode: Swift.String
  public let description: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDStatementInquiryResponseModel {
  public let transactionList: [BPDCoreLibrary.TransactionList]
  public let cashBackTransactionList: [BPDCoreLibrary.TransactionList]
  public let totalCashBack: Swift.Double
}
public struct TransactionList : Swift.Hashable, Swift.Identifiable {
  public let id: Foundation.UUID
  public let amount: Swift.Double?
  public let date: Swift.String?
  public let description: Swift.String?
  public let mcc: Swift.String?
  public let trxnGroupId: Swift.Int?
  public let totalRebates: Swift.Double?
  public let reasonCode: Swift.String?
  public let validToInstallment: Swift.Bool
  public let transactionSerno: Swift.String?
  public let cardNumber: Swift.String?
  public let mccDescription: Swift.String?
  public let authCode: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.TransactionList, b: BPDCoreLibrary.TransactionList) -> Swift.Bool
  public typealias ID = Foundation.UUID
  public var hashValue: Swift.Int {
    get
  }
}
public struct RemittancePaymentResponseModel : Swift.Codable {
  public var errorCode: Swift.String?
  public var errorDescription: Swift.String?
  public var transaction: BPDCoreLibrary.TransactionPayment?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransactionPayment : Swift.Codable {
  public var convertedAmount: Swift.Double?
  public var convertedCurrency: Swift.String?
  public var correlId: Swift.String?
  public var date: Swift.String?
  public var exchangeRate: Swift.Double?
  public var referenceNumber: Swift.String?
  public var remittanceAmount: Swift.Double?
  public var remittanceCurrency: Swift.String?
  public var currencyAccount: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorRemittancePaymentDTO : Swift.Codable {
  public var code: Swift.String?
  public var description: Swift.String?
  public var remittanceErrorResponse: BPDCoreLibrary.RemittancePaymentResponseError?
  public init()
  public init(code: Swift.String, description: Swift.String)
  public init(code: Swift.String, description: Swift.String, remittanceErrorResponse: BPDCoreLibrary.RemittancePaymentResponseError)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittancePaymentResponseError : Swift.Error, Swift.Codable {
  public var errorCode: Swift.String?
  public var errorDescription: Swift.String?
  public var transaction: BPDCoreLibrary.TransactionPayment?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct IncreaseLimitResponse : Swift.Decodable {
  public let errorDescription: Swift.String
  public let errorCode: Swift.String
  public let response: BPDCoreLibrary.IncreaseLimitData?
  public init(from decoder: any Swift.Decoder) throws
}
public struct IncreaseLimitData : Swift.Decodable {
  public let limiteSolicitadoRD: Swift.String
  public let limiteSolicitadoUSD: Swift.String
  public let numSolicitud: Swift.String
  public let errorCode: Swift.String
  public let errorMessage: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
extension BPDCoreLibrary.IncreaseLimitData {
  public init()
}
public struct BPDContractDebts : Swift.Codable {
  public init(detail: [BPDCoreLibrary.BPDContractDebtDetail])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractDebtDetail : Swift.Codable {
  public init(codConvenio: Swift.String?, idServicio: Swift.String?, idConsulta: Swift.String?, montoPagar: Swift.String?, fechaVencimiento: Swift.String?, tipoPago: Swift.String?, codMoneda: Swift.String?, numFactura: Swift.String?, payeeName: Swift.String?, messageQueue: Swift.String?, idCategoria: Swift.String?, subtotalTo: Swift.String?, tax1To: Swift.String?, tax2To: Swift.String?, montoDesde: Swift.String?, numeroContrato: Swift.String?, intertrade: Swift.String?, rate: Swift.String?, migrado: Swift.String?, idTrasaccion: Swift.String?, itbis: Swift.String?, montoDescuentoOrigen: Swift.String?, montoInteresOrigen: Swift.String?, montoMultaOrigen: Swift.String?, montoReajusteOrigen: Swift.String?, montoSaldoDestino: Swift.String?, montoVencidoOrigen: Swift.String?, montoTotalOrigen: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPayments : Swift.Codable {
  public init(detallePago: BPDCoreLibrary.BPDContractDetailPayment)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractDetailPayment : Swift.Codable {
  public init(medioPago: Swift.String?, numeroCuenta: Swift.String?, monedaCuenta: Swift.String?, numeroContrato: Swift.String?, montoPago: Swift.Double?, fechaExpiracion: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDContractPaymentModel : Swift.Codable {
  public init(idTransaccionOrigen: Swift.String?, agrupacion: Swift.String?, deudas: BPDCoreLibrary.BPDContractDebts?, pagos: BPDCoreLibrary.BPDContractPayments?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol RemittanceUseCaseDelegate : AnyObject {
  func getSuccess(model: BPDCoreLibrary.RemittanceGetResponseModel)
  func getError(message: Swift.String)
  func prepareSuccess(model: BPDCoreLibrary.RemittancePrepareResponseModel)
  func prepareError(message: BPDCoreLibrary.ErrorRemittancePrepareDTO)
  func paymentSuccess(model: BPDCoreLibrary.BPDRemittancePaymentResponseModel)
  func paymentError(message: BPDCoreLibrary.ErrorRemittancePaymentDTO)
  func remittanceCategoryListSuccess(model: [BPDCoreLibrary.BPDRemittanceCategoryListModel])
  func remittanceCategoryListDetailSuccess(model: [BPDCoreLibrary.BPDRemittanceDetailListModel])
  func remittanceCategoryListError(error: Swift.String)
  func remittanceCategoryListDetailError(error: Swift.String)
  func remittancePrepareResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.PrepareRemittanceOutput>)
  func receiveQuestions(id: Swift.String, questionIdentifier: Swift.String, questions: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
  func receiveTokenOTPRemittance(id: Swift.String)
  func receiveInvalidUserState()
  func payRemittanceReceiveDuplicatedTransaction(result: BPDCoreLibrary.BPDDuplicatedTransactionModel)
}
@_hasMissingDesignatedInitializers public class RemittanceUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.RemittanceUseCaseDelegate)?
  public init()
  public func get(model: BPDCoreLibrary.RemittanceGetRequestModel)
  public func prepare(model: BPDCoreLibrary.RemittancePrepareRequestModel)
  public func remittancePrepare(model: BPDCoreLibrary.RemittancePrepareRequestModel)
  public func payment(model: BPDCoreLibrary.BPDRemittancePaymentRequestModel, amount: Swift.Double, currencyFrom: Swift.String)
  public func categoryList()
  public func categoryListDetail(model: BPDCoreLibrary.RemittanceListDetailRequestModel)
  public func proceedWithPayment()
  @objc deinit
}
extension BPDCoreLibrary.RemittanceUseCase {
  public func receiveTokenOTPRemittance(id: Swift.String)
  public func receiveInvalidUserState()
  public func getSuccess(model: BPDCoreLibrary.RemittanceGetResponseModel)
  public func getError(message: Swift.String)
  public func prepareSuccess(model: BPDCoreLibrary.RemittancePrepareResponseModel)
  public func prepareError(message: BPDCoreLibrary.ErrorRemittancePrepareDTO)
  public func paymentSuccess(model: BPDCoreLibrary.BPDRemittancePaymentResponseModel)
  public func paymentError(message: BPDCoreLibrary.ErrorRemittancePaymentDTO)
}
public struct Constants {
}
public struct ConvertTransactionResponseModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ConvertTransactionResult : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TypeQuestion : Swift.String {
  case list
  case textField
  case boolList
  case endpointList
  case checkBox
  case dateTime
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BeneficiarySubCategoryPaymentRequestModel : Swift.Codable {
  public let itemCode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PopularBeneficiary {
  public var errorCode: Swift.String
  public var errorDescription: Swift.String
}
public struct BPDCreateQrResponseModel {
  public var createUserQrResponse: BPDCoreLibrary.BPDCreateUserQrResponse?
  public var image: UIKit.UIImage?
  public var errorMessage: Swift.String?
  public var errorCode: Swift.String?
}
public struct BPDCreateUserQrResponse : Swift.Codable {
  public var qrPayload: Swift.String?
  public var url: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CCTransactionsRequestModel : Swift.Codable {
  public let number: Swift.String
  public let currency: Swift.String
  public let statement: BPDCoreLibrary.BPDStatementInquiry
  public init(number: Swift.String, currency: Swift.String, statement: BPDCoreLibrary.BPDStatementInquiry)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SiebelProductUseCaseDelegate : AnyObject {
  func createProductResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SiebelCreateProductOutput>)
}
@_hasMissingDesignatedInitializers public class SiebelProductUseCase {
  weak public var siebelProductDelegate: (any BPDCoreLibrary.SiebelProductUseCaseDelegate)?
  public init()
  public func createProduct(model: BPDCoreLibrary.SiebelCreateProductInput)
  @objc deinit
}
public struct BPDRemittancePaymentResponseModel {
  public var transaction: BPDCoreLibrary.BPDTransactionPayment?
  public var errorCode: Swift.String?
  public var errorDescription: Swift.String?
  public static let defaultValue: BPDCoreLibrary.BPDRemittancePaymentResponseModel
}
public struct BPDTransactionPayment : Swift.Decodable {
  public var convertedAmount: Swift.Double?
  public var convertedCurrency: Swift.String?
  public var correlId: Swift.String?
  public var date: Swift.String?
  public var exchangeRate: Swift.Double?
  public var referenceNumber: Swift.String?
  public var remittanceAmount: Swift.Double?
  public var remittanceCurrency: Swift.String?
  public var currencyAccount: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemittanceListDetailRequestModel {
  public var idList: Swift.String?
  public init(idList: Swift.String)
  public init()
}
public enum BranchTypeValues : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Identifiable {
  public var id: BPDCoreLibrary.BranchTypeValues {
    get
  }
  case OFFICE
  case ATM
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.BranchTypeValues]
  public typealias ID = BPDCoreLibrary.BranchTypeValues
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.BranchTypeValues] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct BeneficiariesCategories : Swift.Hashable {
  public let itemDesc: Swift.String
  public let itemCode: Swift.String
  public init(itemDesc: Swift.String? = "", itemCode: Swift.String? = "")
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BeneficiariesCategories, b: BPDCoreLibrary.BeneficiariesCategories) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CreateCertificateRequestModel : Swift.Codable {
  public var period: Swift.String
  public var alias: Swift.String
  public var idProduct: Swift.String
  public var product: Swift.String
  public var amount: Swift.String
  public var rate: Swift.String
  public var accountFrom: Swift.String
  public var accountTypeFrom: Swift.String
  public var moneyFrom: Swift.String
  public init(period: Swift.String, alias: Swift.String, idProduct: Swift.String, product: Swift.String, amount: Swift.String, rate: Swift.String, accountFrom: Swift.String, accountTypeFrom: Swift.String, moneyFrom: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CertificatesAlias : Swift.String {
  public var id: BPDCoreLibrary.CertificatesAlias {
    get
  }
  case first
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.CertificatesAlias]
  public typealias ID = BPDCoreLibrary.CertificatesAlias
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.CertificatesAlias] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CertificatesIdProducts : Swift.String {
  public var id: BPDCoreLibrary.CertificatesIdProducts {
    get
  }
  case first
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.CertificatesIdProducts]
  public typealias ID = BPDCoreLibrary.CertificatesIdProducts
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.CertificatesIdProducts] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum CertificatesProducts : Swift.String {
  public var id: BPDCoreLibrary.CertificatesProducts {
    get
  }
  case first
  public init?(rawValue: Swift.String)
  public typealias AllCases = [BPDCoreLibrary.CertificatesProducts]
  public typealias ID = BPDCoreLibrary.CertificatesProducts
  public typealias RawValue = Swift.String
  public static var allCases: [BPDCoreLibrary.CertificatesProducts] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ThalesValidateRegisterCCResponse : Swift.Codable {
  public let response: BPDCoreLibrary.ThalesStateValidateRegister
  public init(status: Swift.String, errorDescription: Swift.String, errorCode: Swift.String, response: BPDCoreLibrary.ThalesStateValidateRegister)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThalesStateValidateRegister : Swift.Codable, Swift.Hashable {
  public let state: Swift.String
  public let carId: Swift.String
  public let token: Swift.String
  public let expires_in: Swift.String
  public init(state: Swift.String, carId: Swift.String, token: Swift.String, expires_in: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.ThalesStateValidateRegister, b: BPDCoreLibrary.ThalesStateValidateRegister) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Installments {
  final public let installmentAmount: Swift.Double
  final public let numberOfPlans: Swift.Int
  final public let principalAmount: Swift.Double
  final public let interestAmount: Swift.Double
  final public let totalAmount: Swift.Double
  final public let interestPercentage: Swift.Double
  final public let firstPaymentDate: Foundation.Date
  final public let lastPaymentDate: Foundation.Date
  @objc deinit
}
public protocol SupportedVersionUserCaseDelegate : AnyObject {
  func getSupportedVersionResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SupportedVersionResponseModel>)
}
public class SupportedVersionUserCase {
  weak public var eventDelegate: (any BPDCoreLibrary.SupportedVersionUserCaseDelegate)?
  public init()
  public func getSupportedVersion()
  @objc deinit
}
public struct ChangePasswordRequestModel : Swift.Codable {
  public let newPassword: Swift.String
  public init(newPassword: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDDebtsEftDetail : Swift.Codable {
  public let group: Swift.String
  public let idReferenceHub: Swift.String
  public let amountReadjust: Swift.String
  public let msgResult: Swift.String
  public let expiredDate: Swift.String
  public let expiredAmount: Swift.String
  public let amountFine: Swift.String
  public let numBill: Swift.String
  public let totalAmountBalance: Swift.String
  public let amountDiscount: Swift.String
  public let amountBalance: Swift.String
  public let idConsult: Swift.String
  public let amountInterest: Swift.String
  public let idReferenceSef: Swift.String
  public let codAgreement: Swift.String
  public let idReferenceEmp: Swift.String
  public let migrate: Swift.String
  public let amountFrom: Swift.String
  public let codCurrency: Swift.String
  public let idService: Swift.String
  public let totalAmountDebt: Swift.String
  public let idReference: Swift.String
  public let codResult: Swift.String
  public let totalAmount: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CCActivation {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public init(errorCode: Swift.String? = "", errorDescription: Swift.String? = "")
}
public struct BPDRSATokenRequestModel {
  public init(minutia1: Swift.String, minutia2: Swift.String, minutia3: Swift.String, minutia4: Swift.String)
}
public enum DeviceRegistrationStatus {
}
@_hasMissingDesignatedInitializers public class UserInfoCacheModel {
  final public let username: Swift.String
  final public let cif: Swift.String
  final public let name: Swift.String
  final public let lastName: Swift.String
  @objc deinit
}
public struct BeneficiaryPaymentDetailInput : Swift.Codable {
  public init(email: Swift.String, alias: Swift.String, contractNumber: Swift.String, subscriptionCode: Swift.String? = "", model: BPDCoreLibrary.BeneficiaryPaymentSubCategory)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThalesGetTokenizableResponse : Swift.Codable {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let cards: [BPDCoreLibrary.ThalesCards]?
  public init(errorCode: Swift.String, errorDescription: Swift.String, cards: [BPDCoreLibrary.ThalesCards]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreditCardDetails {
  public let creditLimit: Swift.Double
  public let currentBalance: Swift.Double
  public let overdraftBalance: Swift.Double
  public let cutOffDate: Swift.String
  public let closingBalance: Swift.Double
  public let minDue: Swift.Double
  public let dueDate: Swift.String
  public let maskNumber: Swift.String
  public let expDate: Swift.String
  public let status: Swift.String
  public let isVirtual: Swift.Bool
  public let generalStatus: Swift.String
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let primary: Swift.Bool
  public let nextStatementDate: Swift.String
  public let embossingName: Swift.String
  public let lastRenewDate: Swift.String
  public let isPrintableCard: Swift.Bool
  public var bnplAble: Swift.Bool
  public var aditionalCards: [BPDCoreLibrary.CreditCardDetails.BPDAditionalCardsObj]
  public struct BPDAditionalCardsObj : Swift.Identifiable {
    public let id: Foundation.UUID
    public let maskNumber: Swift.String
    public let expDate: Swift.String
    public let status: Swift.String
    public let isVirtual: Swift.Bool
    public let generalStatus: Swift.String
    public let primary: Swift.Bool
    public let embossingName: Swift.String?
    public let lastRenewDate: Swift.String?
    public let isPrintableCard: Swift.Bool?
    public var bnplAble: Swift.Bool
    public typealias ID = Foundation.UUID
  }
  public init(creditLimit: Swift.Double? = 0.0, currentBalance: Swift.Double? = 0.0, overdraftBalance: Swift.Double? = 0.0, cutOffDate: Swift.String? = "", closingBalance: Swift.Double? = 0.0, minDue: Swift.Double? = 0.0, dueDate: Swift.String? = "", number: Swift.String? = "", expDate: Swift.String? = "", status: Swift.String? = "", isVirtual: Swift.Bool? = false, generalStatus: Swift.String? = "", primary: Swift.Bool? = false, aditionalCards: [BPDCoreLibrary.CreditCardDetails.BPDAditionalCardsObj]? = [], errorCode: Swift.String? = "", errorDescription: Swift.String? = "", bnplAble: Swift.Bool = false, embossingName: Swift.String? = "", lastRenewDate: Swift.String? = "", isPrintableCard: Swift.Bool? = false, nextStatementDate: Swift.String? = "")
}
public struct BPDConvenioResponseModel : Swift.Codable {
  public var convenios: BPDCoreLibrary.BPDConvenios
  public init()
  public init(convenios: BPDCoreLibrary.BPDConvenios)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDConvenios : Swift.Codable {
  public var convenio: [BPDCoreLibrary.BPDConvenio]
  public init()
  public init(convenio: [BPDCoreLibrary.BPDConvenio])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BPDConvenio : Swift.Codable, Swift.Hashable {
  public var id: Swift.String, categoria: Swift.String, rubro: Swift.String
  public init()
  public init(id: Swift.String, categoria: Swift.String, rubro: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: BPDCoreLibrary.BPDConvenio, b: BPDCoreLibrary.BPDConvenio) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct OtherBanksPaymentValidationResponse {
  public let commission: Swift.String
  public let commissionCurrency: Swift.String
  public let totalAmountToDebit: Swift.String
  public let transactionType: Swift.String
  public let errorAction: Swift.String
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
}
public struct OtherBanksPaymentPostingResponse {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
}
public protocol BPDOfficeLocationsUseCaseDelegate : AnyObject {
  func getBPDOfficeLocationsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDOfficeLocationsOutput>)
}
@_hasMissingDesignatedInitializers public class BPDOfficeLocationsUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.BPDOfficeLocationsUseCaseDelegate)?
  public init()
  public func requestBPDOfficeLocations(model: BPDCoreLibrary.BPDOfficeLocationsInput)
  @objc deinit
}
public struct LoanDynamicFormOutput {
  public let errorCode: Swift.String
  public let errorDescription: Swift.String
  public let requestId: Swift.String
  public let message: Swift.String
  public let status: Swift.String
  public let url: Swift.String
  public let messageId: Swift.String
  public init(errorCode: Swift.String = "", errorDescription: Swift.String = "", requestId: Swift.String = "", message: Swift.String = "", status: Swift.String = "", url: Swift.String = "", messageId: Swift.String = "")
}
public struct DeleteGoalsRequestModel {
  public init(goalId: Swift.Int, accountNumber: Swift.String)
}
public struct DiffieHellmanKeyExchange {
  public func genPrivKey() throws -> Security.SecKey
  public func genPubKey(from privKey: Security.SecKey) -> Security.SecKey
  public func exchangePubResult(data sharedData: Security.SecKey)
  public func testingKeys() throws
}
public struct SiebelLoanCreationInput {
  public init(requestType: Swift.String, destination: Swift.String, facility: Swift.String, paymentType: Swift.String, term: Swift.String, parentProduct: Swift.String, rate: Swift.String, requestedAmount: Swift.String, frequency: Swift.String)
}
public protocol ExternalBeneficiariesUseCaseDelegate : AnyObject {
  func getBanksResult(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.Bank]>)
  func getBeneficiariesOBResult(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryOB]>)
  func addInterbankBeneficiaryResponse(_ result: BPDCoreLibrary.BPDResult)
  func receiveTokenSignal(transactionId: Swift.String)
  func interbankBeneficiaryResponse(_ result: BPDCoreLibrary.BPDResult)
  func receiveNewTokenSignal(result: BPDCoreLibrary.BPDResult)
  func receiveBiometricSignal(result: BPDCoreLibrary.BPDResult)
  func receiveQuestionSignal(id: Swift.String, questions: [BPDCoreLibrary.BPDRiskChallengeDetailToken])
}
public protocol InterbankBeneficiaryPaymentUseCaseDelegate : AnyObject {
  func getBeneficiariesOBResult(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BeneficiaryOB]>)
}
@_hasMissingDesignatedInitializers public class ExternalBeneficiariesUseCase {
  weak public var eventDelegate: (any BPDCoreLibrary.ExternalBeneficiariesUseCaseDelegate)?
  weak public var beneficiaryPaymentEventDelegate: (any BPDCoreLibrary.InterbankBeneficiaryPaymentUseCaseDelegate)?
  public init()
  public func getBanks()
  public func getBeneficiariesOB()
  public func addInterbankBeneficiary(_ model: BPDCoreLibrary.InterbankBeneficiaryData)
  public func validateTokenAuthentication(token: Swift.String)
  public func validateBiometricAuthentication(minutias: BPDCoreLibrary.Minutias)
  public func editInterbankBeneficiary(_ model: BPDCoreLibrary.InterbankBeneficiaryData)
  public func deleteInterbankBeneficiary(_ model: BPDCoreLibrary.InterbankBeneficiaryData)
  @objc deinit
}
public struct InstallmentActionsRequestModel : Swift.Codable {
  public let number: Swift.String
  public let instalmentCode: Swift.String
  public let amount: Swift.String
  public let currency: Swift.String
  public init(number: Swift.String, instalmentCode: Swift.String, amount: Swift.String, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol SiebelLoanUseCaseDelegate : AnyObject {
  func createLoanResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.SiebelLoanCreationOutput>)
}
@_hasMissingDesignatedInitializers public class SiebelLoanUseCase {
  weak public var siebelLoanDelegate: (any BPDCoreLibrary.SiebelLoanUseCaseDelegate)?
  public init()
  public func loanCreation(model: BPDCoreLibrary.SiebelLoanCreationInput)
  @objc deinit
}
public struct BPDCreditCardDetails {
  public var cardNumber: Swift.String?
  public var expiryDate: Swift.String?
  public init(cardNumber: Swift.String?, expiryDate: Swift.String?)
}
public struct CashCodeFavRequestModel {
  public init(clientName: Swift.String, document: Swift.String, alias: Swift.String)
}
public protocol BPDObAuthCaseDelegate : AnyObject {
  func obAuthorizationResponse(_ result: BPDCoreLibrary.BPDResult)
}
public protocol BPDObUserCaseDelegate : AnyObject {
  func obQuestionsResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDObQuestionResponseModel]>)
  func obQuestionsSurveyResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDObQuestionResponseModel]>)
  func obEndpintResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.BPDObCategoryResponseModel]>, questionId: Swift.Int)
  func requestEmailOtpResponse(_ result: BPDCoreLibrary.BPDResult)
  func previousOnboardingResponse(_ result: BPDCoreLibrary.BPDResults<[BPDCoreLibrary.OnBoardingFormModel]>, lastCompleted: Swift.String)
}
public protocol BPDObTermsCaseDelegate : AnyObject {
  func obGetTermsResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDOnboardingTermsAndConditions>)
  func obSaveQuestionsResponse(_ result: BPDCoreLibrary.BPDResult)
}
public protocol BPDObCreateCaseDelegate : AnyObject {
  func obCreateResponse(_ result: BPDCoreLibrary.BPDResults<BPDCoreLibrary.BPDObCreateResponseDetail>, endpoint: Swift.String)
}
public class BPDObUserCase {
  weak public var eventAuthDelegate: (any BPDCoreLibrary.BPDObAuthCaseDelegate)?
  weak public var eventDelegate: (any BPDCoreLibrary.BPDObUserCaseDelegate)?
  weak public var eventTermsDelegate: (any BPDCoreLibrary.BPDObTermsCaseDelegate)?
  weak public var eventCreateDelegate: (any BPDCoreLibrary.BPDObCreateCaseDelegate)?
  public init()
  public func authorize(documentNo: Swift.String, indexFinger: Swift.String, middleFinger: Swift.String, ringFinger: Swift.String, littleFinger: Swift.String)
  public func getQuestions(questionaryType: BPDCoreLibrary.OBQuestionaryType)
  public func putQuestion(id: Swift.Int, label: Swift.String, responseType: Swift.String, responseList: Swift.String, questionSource: Swift.Int?, questionSourceResponse: Swift.Int?, surveyType: Swift.String, response: Swift.String, category: Swift.String)
  public func cleanDataPostQuestion()
  public func getEndpoint(code: Swift.String, questionId: Swift.Int, endpoint: Swift.String)
  public func getOccupationSurvey(_ occupation: Swift.String)
  public func createClient()
  public func createproduct(model: BPDCoreLibrary.BPDCProductRequestModel)
  public func createCredentials()
  public func getTermsAndConditions(name: BPDCoreLibrary.ContractName)
  public func saveOnboardingQuestions(otp: Swift.String)
  public func requestEmailOTP(email: Swift.String)
  public func createToken()
  public func saveProgress(questionSource: [BPDCoreLibrary.OnBoardingFormModel], docNumber: Swift.String)
  @objc deinit
}
public struct CashCodeForMeRequestModel {
  public init(monto: Swift.Double, cuenta: Swift.String, tipoCuenta: Swift.String, expiracion: Swift.String, moneda: Swift.String, montoCambioDivisa: Swift.Double, monedaDestino: Swift.String, montoRetiro: Swift.Double, centroCosto: Swift.String, isFavorite: Swift.Bool, alias: Swift.String)
}
extension BPDCoreLibrary.TokenMaintenanceReasonCode : Swift.Equatable {}
extension BPDCoreLibrary.TokenMaintenanceReasonCode : Swift.Hashable {}
extension BPDCoreLibrary.TokenMaintenanceReasonCode : Swift.RawRepresentable {}
extension BPDCoreLibrary.Questions.CodingKeys : Swift.Equatable {}
extension BPDCoreLibrary.Questions.CodingKeys : Swift.Hashable {}
extension BPDCoreLibrary.Questions.CodingKeys : Swift.RawRepresentable {}
extension BPDCoreLibrary.CreditCardStatus : Swift.Equatable {}
extension BPDCoreLibrary.CreditCardStatus : Swift.Hashable {}
extension BPDCoreLibrary.CreditCardStatus : Swift.RawRepresentable {}
extension BPDCoreLibrary.MetadataTerritory.CodingKeys : Swift.Equatable {}
extension BPDCoreLibrary.MetadataTerritory.CodingKeys : Swift.Hashable {}
extension BPDCoreLibrary.MetadataTerritory.CodingKeys : Swift.RawRepresentable {}
extension BPDCoreLibrary.MetadataPhoneNumberFormat.CodingKeys : Swift.Equatable {}
extension BPDCoreLibrary.MetadataPhoneNumberFormat.CodingKeys : Swift.Hashable {}
extension BPDCoreLibrary.MetadataPhoneNumberFormat.CodingKeys : Swift.RawRepresentable {}
extension BPDCoreLibrary.TypeAccountTo : Swift.Equatable {}
extension BPDCoreLibrary.TypeAccountTo : Swift.Hashable {}
extension BPDCoreLibrary.TypeAccountTo : Swift.RawRepresentable {}
extension BPDCoreLibrary.OtherBanksTypeTransaction : Swift.Equatable {}
extension BPDCoreLibrary.OtherBanksTypeTransaction : Swift.Hashable {}
extension BPDCoreLibrary.OtherBanksTypeTransaction : Swift.RawRepresentable {}
extension BPDCoreLibrary.Currency : Swift.Equatable {}
extension BPDCoreLibrary.Currency : Swift.Hashable {}
extension BPDCoreLibrary.Currency : Swift.RawRepresentable {}
extension BPDCoreLibrary.DocumentType : Swift.Equatable {}
extension BPDCoreLibrary.DocumentType : Swift.Hashable {}
extension BPDCoreLibrary.DocumentType : Swift.RawRepresentable {}
extension BPDCoreLibrary.DebitTokenReasonCode : Swift.Equatable {}
extension BPDCoreLibrary.DebitTokenReasonCode : Swift.Hashable {}
extension BPDCoreLibrary.DebitTokenReasonCode : Swift.RawRepresentable {}
extension BPDCoreLibrary.SharesCompany : Swift.Equatable {}
extension BPDCoreLibrary.SharesCompany : Swift.Hashable {}
extension BPDCoreLibrary.SharesCompany : Swift.RawRepresentable {}
extension BPDCoreLibrary.DataAccessStrategy : Swift.Equatable {}
extension BPDCoreLibrary.DataAccessStrategy : Swift.Hashable {}
extension BPDCoreLibrary.AccountTypes : Swift.Equatable {}
extension BPDCoreLibrary.AccountTypes : Swift.Hashable {}
extension BPDCoreLibrary.AccountTypes : Swift.RawRepresentable {}
extension BPDCoreLibrary.Currencies : Swift.Equatable {}
extension BPDCoreLibrary.Currencies : Swift.Hashable {}
extension BPDCoreLibrary.Currencies : Swift.RawRepresentable {}
extension BPDCoreLibrary.PossibleLengthType : Swift.Equatable {}
extension BPDCoreLibrary.PossibleLengthType : Swift.Hashable {}
extension BPDCoreLibrary.PossibleLengthType : Swift.RawRepresentable {}
extension BPDCoreLibrary.BiometricStatus : Swift.Equatable {}
extension BPDCoreLibrary.BiometricStatus : Swift.Hashable {}
extension BPDCoreLibrary.BiometricStatus : Swift.RawRepresentable {}
extension BPDCoreLibrary.BiometricType : Swift.Equatable {}
extension BPDCoreLibrary.BiometricType : Swift.Hashable {}
extension BPDCoreLibrary.ContractName : Swift.Equatable {}
extension BPDCoreLibrary.ContractName : Swift.Hashable {}
extension BPDCoreLibrary.ContractName : Swift.RawRepresentable {}
extension BPDCoreLibrary.EndpointType : Swift.Equatable {}
extension BPDCoreLibrary.EndpointType : Swift.Hashable {}
extension BPDCoreLibrary.EndpointType : Swift.RawRepresentable {}
extension BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType : Swift.Equatable {}
extension BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType : Swift.Hashable {}
extension BPDCoreLibrary.BPDUserRecoveryRequestModel.DocumentType : Swift.RawRepresentable {}
extension BPDCoreLibrary.ListQuestion : Swift.Equatable {}
extension BPDCoreLibrary.ListQuestion : Swift.Hashable {}
extension BPDCoreLibrary.ListQuestion : Swift.RawRepresentable {}
extension BPDCoreLibrary.InstallmentPlan : Swift.Equatable {}
extension BPDCoreLibrary.InstallmentPlan : Swift.Hashable {}
extension BPDCoreLibrary.InstallmentPlan : Swift.RawRepresentable {}
extension BPDCoreLibrary.DebitCardStatusValues : Swift.Equatable {}
extension BPDCoreLibrary.DebitCardStatusValues : Swift.Hashable {}
extension BPDCoreLibrary.DebitCardStatusValues : Swift.RawRepresentable {}
extension BPDCoreLibrary.NetworkingError.Status : Swift.Equatable {}
extension BPDCoreLibrary.NetworkingError.Status : Swift.Hashable {}
extension BPDCoreLibrary.NetworkingError.Status : Swift.RawRepresentable {}
extension BPDCoreLibrary.BPDStatementInquiry : Swift.Equatable {}
extension BPDCoreLibrary.BPDStatementInquiry : Swift.Hashable {}
extension BPDCoreLibrary.BPDStatementInquiry : Swift.RawRepresentable {}
extension BPDCoreLibrary.ProgressOnBoarding : Swift.Equatable {}
extension BPDCoreLibrary.ProgressOnBoarding : Swift.Hashable {}
extension BPDCoreLibrary.ProgressOnBoarding : Swift.RawRepresentable {}
extension BPDCoreLibrary.PollerError : Swift.Equatable {}
extension BPDCoreLibrary.PollerError : Swift.Hashable {}
extension BPDCoreLibrary.AnalyzeChallenge : Swift.Equatable {}
extension BPDCoreLibrary.AnalyzeChallenge : Swift.Hashable {}
extension BPDCoreLibrary.BPDResult : Swift.Sendable {}
extension BPDCoreLibrary.ContractType : Swift.Equatable {}
extension BPDCoreLibrary.ContractType : Swift.Hashable {}
extension BPDCoreLibrary.ContractType : Swift.RawRepresentable {}
extension BPDCoreLibrary.JSONSerializer.JSONSerializerError : Swift.Equatable {}
extension BPDCoreLibrary.JSONSerializer.JSONSerializerError : Swift.Hashable {}
extension BPDCoreLibrary.CategoryQuestion : Swift.Equatable {}
extension BPDCoreLibrary.CategoryQuestion : Swift.Hashable {}
extension BPDCoreLibrary.CategoryQuestion : Swift.RawRepresentable {}
extension BPDCoreLibrary.TransactionType : Swift.Equatable {}
extension BPDCoreLibrary.TransactionType : Swift.Hashable {}
extension BPDCoreLibrary.TransactionType : Swift.RawRepresentable {}
extension BPDCoreLibrary.AnalizeTransactionType : Swift.Equatable {}
extension BPDCoreLibrary.AnalizeTransactionType : Swift.Hashable {}
extension BPDCoreLibrary.AnalyzeTypeTransaction : Swift.Equatable {}
extension BPDCoreLibrary.AnalyzeTypeTransaction : Swift.Hashable {}
extension BPDCoreLibrary.TokenLisOptions : Swift.Equatable {}
extension BPDCoreLibrary.TokenLisOptions : Swift.Hashable {}
extension BPDCoreLibrary.TokenLisOptions : Swift.RawRepresentable {}
extension BPDCoreLibrary.BPDError.Status : Swift.Equatable {}
extension BPDCoreLibrary.BPDError.Status : Swift.Hashable {}
extension BPDCoreLibrary.BPDError.Status : Swift.RawRepresentable {}
extension BPDCoreLibrary.BPDStatus : Swift.Equatable {}
extension BPDCoreLibrary.BPDStatus : Swift.Hashable {}
extension BPDCoreLibrary.BPDStatus : Swift.RawRepresentable {}
extension BPDCoreLibrary.BPDStatus : Swift.Sendable {}
extension BPDCoreLibrary.RSAEventType : Swift.Equatable {}
extension BPDCoreLibrary.RSAEventType : Swift.Hashable {}
extension BPDCoreLibrary.RSAEventType : Swift.RawRepresentable {}
extension BPDCoreLibrary.OnBoardingFormEnum : Swift.Equatable {}
extension BPDCoreLibrary.OnBoardingFormEnum : Swift.Hashable {}
extension BPDCoreLibrary.MaskNumber : Swift.Equatable {}
extension BPDCoreLibrary.MaskNumber : Swift.Hashable {}
extension BPDCoreLibrary.MaskNumber : Swift.RawRepresentable {}
extension BPDCoreLibrary.QuestionType : Swift.Equatable {}
extension BPDCoreLibrary.QuestionType : Swift.Hashable {}
extension BPDCoreLibrary.QuestionType : Swift.RawRepresentable {}
extension BPDCoreLibrary.OBQuestionaryType : Swift.Equatable {}
extension BPDCoreLibrary.OBQuestionaryType : Swift.Hashable {}
extension BPDCoreLibrary.OBQuestionaryType : Swift.RawRepresentable {}
extension BPDCoreLibrary.TypeQuestion : Swift.Equatable {}
extension BPDCoreLibrary.TypeQuestion : Swift.Hashable {}
extension BPDCoreLibrary.TypeQuestion : Swift.RawRepresentable {}
extension BPDCoreLibrary.BranchTypeValues : Swift.Equatable {}
extension BPDCoreLibrary.BranchTypeValues : Swift.Hashable {}
extension BPDCoreLibrary.BranchTypeValues : Swift.RawRepresentable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.Identifiable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.CaseIterable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.Encodable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.Decodable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.Equatable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.Hashable {}
extension BPDCoreLibrary.CertificatesAlias : Swift.RawRepresentable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.Identifiable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.CaseIterable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.Encodable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.Decodable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.Equatable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.Hashable {}
extension BPDCoreLibrary.CertificatesIdProducts : Swift.RawRepresentable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.Identifiable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.CaseIterable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.Encodable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.Decodable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.Equatable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.Hashable {}
extension BPDCoreLibrary.CertificatesProducts : Swift.RawRepresentable {}
